import * as _udecode_plate_core_react from '@udecode/plate-core/react';
import * as _udecode_plate_core from '@udecode/plate-core';
import * as _udecode_slate from '@udecode/slate';
import { M as MediaPluginOptions, T as TMediaElement, a as EmbedUrlParser, E as EmbedUrlData, b as MediaPlaceholderOptions, d as TPlaceholderElement } from '../BasePlaceholderPlugin-B0SAvMW-.js';
import * as zustand_x from 'zustand-x';
import { SlateEditor, WithRequiredKey, InsertNodesOptions, Path, TElement } from '@udecode/plate';
import * as React$1 from 'react';
import React__default from 'react';
import * as jotai from 'jotai';
import * as jotai_x from 'jotai-x';
import * as mutative from 'mutative';
import * as is_hotkey from 'is-hotkey';
import * as _udecode_utils from '@udecode/utils';
import { PlateEditor } from '@udecode/plate/react';

declare const ImagePlugin: _udecode_plate_core_react.PlatePlugin<_udecode_plate_core.PluginConfig<"img", {
    disableEmbedInsert?: boolean;
    disableUploadInsert?: boolean;
    uploadImage?: (dataUrl: ArrayBuffer | string) => ArrayBuffer | Promise<ArrayBuffer | string> | string;
} & MediaPluginOptions, {}, {
    insert: {
        imageFromFiles: (files: FileList, options?: _udecode_slate.InsertNodesOptions | undefined) => void;
    };
}, {}>>;
declare const MediaEmbedPlugin: _udecode_plate_core_react.PlatePlugin<_udecode_plate_core.PluginConfig<"media_embed", MediaPluginOptions, {}, {}, {}>>;
declare const AudioPlugin: _udecode_plate_core_react.PlatePlugin<_udecode_plate_core.PluginConfig<"audio", {}, {}, {}, {}>>;
declare const FilePlugin: _udecode_plate_core_react.PlatePlugin<_udecode_plate_core.PluginConfig<"file", {}, {}, {}, {}>>;
declare const VideoPlugin: _udecode_plate_core_react.PlatePlugin<_udecode_plate_core.PluginConfig<"video", {}, {}, {}, {}>>;

interface PreviewItem {
    url: string;
    id?: string;
}
declare const ImagePreviewStore: zustand_x.TStateApi<{
    boundingClientRect: DOMRect;
    currentPreview: PreviewItem | null;
    isEditingScale: boolean;
    openEditorId: string | null;
    previewList: PreviewItem[];
    scale: number;
    translate: {
        x: number;
        y: number;
    };
}, [["zustand/mutative-x", never]], {
    close: () => void;
}, {
    isOpen: (editorId: string) => boolean;
}>;
declare const useImagePreviewValue: {
    <K extends "isEditingScale" | "translate" | "boundingClientRect" | "currentPreview" | "openEditorId" | "previewList" | "scale">(key: K): {
        boundingClientRect: DOMRect;
        currentPreview: PreviewItem | null;
        isEditingScale: boolean;
        openEditorId: string | null;
        previewList: PreviewItem[];
        scale: number;
        translate: {
            x: number;
            y: number;
        };
    }[K];
    <K extends "isOpen">(key: K, ...args: Parameters<{
        isOpen: (editorId: string) => boolean;
    }[K]>): ReturnType<{
        isOpen: (editorId: string) => boolean;
    }[K]>;
    (key: "state"): {
        boundingClientRect: DOMRect;
        currentPreview: PreviewItem | null;
        isEditingScale: boolean;
        openEditorId: string | null;
        previewList: PreviewItem[];
        scale: number;
        translate: {
            x: number;
            y: number;
        };
    };
    <K extends "isEditingScale" | "translate" | "boundingClientRect" | "currentPreview" | "openEditorId" | "previewList" | "scale">(key: K, equalityFn?: zustand_x.TEqualityChecker<{
        boundingClientRect: DOMRect;
        currentPreview: PreviewItem | null;
        isEditingScale: boolean;
        openEditorId: string | null;
        previewList: PreviewItem[];
        scale: number;
        translate: {
            x: number;
            y: number;
        };
    }[K]> | undefined): {
        boundingClientRect: DOMRect;
        currentPreview: PreviewItem | null;
        isEditingScale: boolean;
        openEditorId: string | null;
        previewList: PreviewItem[];
        scale: number;
        translate: {
            x: number;
            y: number;
        };
    }[K];
    <K extends "isOpen">(key: K, ...args: [...Parameters<{
        isOpen: (editorId: string) => boolean;
    }[K]>, (zustand_x.TEqualityChecker<ReturnType<{
        isOpen: (editorId: string) => boolean;
    }[K]>> | undefined)?]): ReturnType<{
        isOpen: (editorId: string) => boolean;
    }[K]>;
};

declare const openImagePreview: (editor: SlateEditor, element: TMediaElement) => void;

declare const useImagePreview: ({ scrollSpeed }: {
    scrollSpeed: number;
}) => {
    closeProps: {
        onClick: () => void;
    };
    currentUrlIndex: number | null;
    maskLayerProps: {
        onClick: () => void;
    };
    nextDisabled: boolean;
    nextProps: {
        disabled: boolean;
        onClick: () => void;
    };
    prevDisabled: boolean;
    prevProps: {
        disabled: boolean;
        onClick: () => void;
    };
    scaleTextProps: {
        onClick: () => void;
    };
    zommOutProps: {
        disabled: boolean;
        onClick: () => void;
    };
    zoomInDisabled: boolean;
    zoomInProps: {
        disabled: boolean;
        onClick: () => void;
    };
    zoomOutDisabled: boolean;
};

declare const useZoom: () => {
    zoomIn: () => void;
    zoomOut: () => void;
};

declare const useImage: () => {
    props: {
        draggable: boolean;
        src: string;
        onDoubleClickCapture: () => void;
    };
};
declare const Image: React$1.ForwardRefExoticComponent<{
    as?: React.ElementType;
    asChild?: boolean;
    className?: string;
    options?: any;
    state?: undefined;
    style?: React.CSSProperties;
    setProps?: ((hookProps: {
        draggable: boolean;
        src: string;
        onDoubleClickCapture: () => void;
    }) => Omit<React$1.DetailedHTMLProps<React$1.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>, "ref">) | undefined;
} & Omit<React$1.DetailedHTMLProps<React$1.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>, "ref"> & React$1.RefAttributes<any>>;

declare const usePreviewImage: () => {
    props: {
        draggable: boolean;
        ref: React__default.RefObject<HTMLImageElement | null>;
        src: string | undefined;
        style: {
            cursor: string;
            transform: string;
        };
        onClick: (e: React__default.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
    };
};
declare const PreviewImage: React__default.ForwardRefExoticComponent<{
    as?: React__default.ElementType;
    asChild?: boolean;
    className?: string;
    options?: any;
    state?: undefined;
    style?: React__default.CSSProperties;
    setProps?: ((hookProps: {
        draggable: boolean;
        ref: React__default.RefObject<HTMLImageElement | null>;
        src: string | undefined;
        style: {
            cursor: string;
            transform: string;
        };
        onClick: (e: React__default.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
    }) => Omit<React__default.DetailedHTMLProps<React__default.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>, "ref">) | undefined;
} & Omit<React__default.DetailedHTMLProps<React__default.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>, "ref"> & React__default.RefAttributes<any>>;

declare const useScaleInput: () => {
    props: {
        value: string;
        onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
        onKeyDown: (e: React.KeyboardEvent<HTMLInputElement>) => void;
    };
    ref: React$1.RefObject<HTMLInputElement | null>;
};

interface MediaStore {
    showCaption: boolean;
}
declare const MediaProvider: React$1.FC<jotai_x.ProviderProps<{
    showCaption: boolean;
}>>;
declare const mediaStore: jotai_x.StoreApi<MediaStore, object, "media">;
declare const useMediaSet: <K extends "showCaption">(key: K, options?: string | jotai_x.UseAtomOptions) => ({
    showCaption: jotai_x.SimpleWritableAtom<boolean>;
} & object)[K] extends jotai.WritableAtom<infer _V, infer A extends unknown[], infer R> ? (...args: A) => R : never;
declare const useMediaStore: jotai_x.UseStoreApi<MediaStore, object>;
declare const useMediaValue: <K extends "showCaption", S = ({
    showCaption: jotai_x.SimpleWritableAtom<boolean>;
} & object)[K] extends jotai.Atom<infer V> ? V : never>(key: K, options?: ({
    selector?: ((v: ({
        showCaption: jotai_x.SimpleWritableAtom<boolean>;
    } & object)[K] extends jotai.Atom<infer V_1> ? V_1 : never, prevSelectorOutput?: S | undefined) => S) | undefined;
    equalityFn?: ((prev: S, next: S) => boolean) | undefined;
} & jotai_x.UseAtomOptions) | undefined, deps?: unknown[]) => S;

declare const useMediaControllerState: () => {
    alignOpen: boolean;
    setAlignOpen: React__default.Dispatch<React__default.SetStateAction<boolean>>;
};
declare const useMediaController: ({ setAlignOpen, }: ReturnType<typeof useMediaControllerState>) => {
    MediaControllerDropDownMenuProps: {
        setAlignOpen: React__default.Dispatch<React__default.SetStateAction<boolean>>;
    };
};
declare const useMediaControllerDropDownMenu: (props: {
    openState: {
        open: boolean;
        onOpenChange: (_value?: boolean) => void;
    };
    setAlignOpen: React__default.Dispatch<React__default.SetStateAction<boolean>>;
}) => void;

declare const useMediaState: ({ urlParsers, }?: {
    urlParsers?: EmbedUrlParser[];
}) => {
    id: string | undefined;
    align: "center" | "left" | "right" | undefined;
    embed: EmbedUrlData | undefined;
    focused: boolean;
    isTweet: boolean;
    isUpload: boolean | undefined;
    isVideo: boolean;
    isYoutube: boolean;
    name: string | undefined;
    readOnly: boolean;
    selected: boolean;
    unsafeUrl: string;
};

declare const useMediaToolbarButton: ({ nodeType, }?: {
    nodeType?: string;
}) => {
    props: {
        onClick: () => Promise<void>;
        onMouseDown: (e: React.MouseEvent<HTMLButtonElement>) => void;
    };
};

declare const FloatingMedia: {
    EditButton: React$1.ForwardRefExoticComponent<{
        as?: React.ElementType;
        asChild?: boolean;
        className?: string;
        options?: any;
        state?: undefined;
        style?: React.CSSProperties;
        setProps?: ((hookProps: {
            onClick: () => void;
        }) => Omit<React$1.DetailedHTMLProps<React$1.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref">) | undefined;
    } & Omit<React$1.DetailedHTMLProps<React$1.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & React$1.RefAttributes<any>>;
    UrlInput: React$1.ForwardRefExoticComponent<{
        as?: React.ElementType;
        asChild?: boolean;
        className?: string;
        options?: {
            plugin: _udecode_plate_core.WithRequiredKey;
        } | undefined;
        state?: {
            defaultValue: string;
        } | undefined;
        style?: React.CSSProperties;
        setProps?: ((hookProps: {
            autoFocus: boolean;
            defaultValue: string;
            onChange: React$1.ChangeEventHandler<HTMLInputElement>;
        }) => Omit<React$1.DetailedHTMLProps<React$1.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "ref">) | undefined;
    } & Omit<React$1.DetailedHTMLProps<React$1.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "ref"> & React$1.RefAttributes<any>>;
};

declare const useFloatingMediaEditButton: () => {
    props: {
        onClick: () => void;
    };
};
declare const FloatingMediaEditButton: React__default.ForwardRefExoticComponent<{
    as?: React__default.ElementType;
    asChild?: boolean;
    className?: string;
    options?: any;
    state?: undefined;
    style?: React__default.CSSProperties;
    setProps?: ((hookProps: {
        onClick: () => void;
    }) => Omit<React__default.DetailedHTMLProps<React__default.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref">) | undefined;
} & Omit<React__default.DetailedHTMLProps<React__default.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & React__default.RefAttributes<any>>;

declare const FloatingMediaStore: zustand_x.TStateApi<{
    isEditing: boolean;
    url: string;
}, [["zustand/mutative-x", never]], {
    reset: () => void;
}, {}>;
declare const useFloatingMediaState: <K extends "url" | "isEditing">(key: K, equalityFn?: zustand_x.TEqualityChecker<{
    isEditing: boolean;
    url: string;
}[K]> | undefined) => [{
    isEditing: boolean;
    url: string;
}[K], (value: {
    isEditing: boolean;
    url: string;
}[K]) => void];
declare const useFloatingMediaValue: {
    <K extends "url" | "isEditing">(key: K): {
        isEditing: boolean;
        url: string;
    }[K];
    <K extends never>(key: K, ...args: Parameters<{}[K]>): ReturnType<{}[K]>;
    (key: "state"): {
        isEditing: boolean;
        url: string;
    };
    <K extends "url" | "isEditing">(key: K, equalityFn?: zustand_x.TEqualityChecker<{
        isEditing: boolean;
        url: string;
    }[K]> | undefined): {
        isEditing: boolean;
        url: string;
    }[K];
    <K extends never>(key: K, ...args: [...Parameters<{}[K]>, (zustand_x.TEqualityChecker<ReturnType<{}[K]>> | undefined)?]): ReturnType<{}[K]>;
};

declare const useFloatingMediaUrlInputState: ({ plugin, }: {
    plugin: WithRequiredKey;
}) => {
    defaultValue: string;
};
declare const useFloatingMediaUrlInput: ({ defaultValue, }: ReturnType<typeof useFloatingMediaUrlInputState>) => {
    props: {
        autoFocus: boolean;
        defaultValue: string;
        onChange: React__default.ChangeEventHandler<HTMLInputElement>;
    };
};
declare const FloatingMediaUrlInput: React__default.ForwardRefExoticComponent<{
    as?: React__default.ElementType;
    asChild?: boolean;
    className?: string;
    options?: {
        plugin: WithRequiredKey;
    } | undefined;
    state?: {
        defaultValue: string;
    } | undefined;
    style?: React__default.CSSProperties;
    setProps?: ((hookProps: {
        autoFocus: boolean;
        defaultValue: string;
        onChange: React__default.ChangeEventHandler<HTMLInputElement>;
    }) => Omit<React__default.DetailedHTMLProps<React__default.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "ref">) | undefined;
} & Omit<React__default.DetailedHTMLProps<React__default.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "ref"> & React__default.RefAttributes<any>>;

declare const submitFloatingMedia: (editor: SlateEditor, { element, plugin, }: {
    element: TMediaElement;
    plugin: WithRequiredKey;
}) => true | undefined;

declare const mimes: {
    'chemical/x-cdx': {
        readonly extensions: readonly ["cdx"];
        readonly source: "apache";
    };
    'chemical/x-cif': {
        readonly extensions: readonly ["cif"];
        readonly source: "apache";
    };
    'chemical/x-cmdf': {
        readonly extensions: readonly ["cmdf"];
        readonly source: "apache";
    };
    'chemical/x-cml': {
        readonly extensions: readonly ["cml"];
        readonly source: "apache";
    };
    'chemical/x-csml': {
        readonly extensions: readonly ["csml"];
        readonly source: "apache";
    };
    'chemical/x-xyz': {
        readonly extensions: readonly ["xyz"];
        readonly source: "apache";
    };
    'font/collection': {
        readonly extensions: readonly ["ttc"];
        readonly source: "iana";
    };
    'font/otf': {
        readonly extensions: readonly ["otf"];
        readonly source: "iana";
    };
    'font/ttf': {
        readonly extensions: readonly ["ttf"];
        readonly source: "iana";
    };
    'font/woff': {
        readonly extensions: readonly ["woff"];
        readonly source: "iana";
    };
    'font/woff2': {
        readonly extensions: readonly ["woff2"];
        readonly source: "iana";
    };
    'message/disposition-notification': {
        readonly extensions: readonly ["disposition-notification"];
        readonly source: "iana";
    };
    'message/global': {
        readonly extensions: readonly ["u8msg"];
        readonly source: "iana";
    };
    'message/global-delivery-status': {
        readonly extensions: readonly ["u8dsn"];
        readonly source: "iana";
    };
    'message/global-disposition-notification': {
        readonly extensions: readonly ["u8mdn"];
        readonly source: "iana";
    };
    'message/global-headers': {
        readonly extensions: readonly ["u8hdr"];
        readonly source: "iana";
    };
    'message/rfc822': {
        readonly extensions: readonly ["eml", "mime"];
        readonly source: "iana";
    };
    'message/vnd.wfa.wsc': {
        readonly extensions: readonly ["wsc"];
        readonly source: "iana";
    };
    'model/3mf': {
        readonly extensions: readonly ["3mf"];
        readonly source: "iana";
    };
    'model/gltf+json': {
        readonly extensions: readonly ["gltf"];
        readonly source: "iana";
    };
    'model/gltf-binary': {
        readonly extensions: readonly ["glb"];
        readonly source: "iana";
    };
    'model/iges': {
        readonly extensions: readonly ["igs", "iges"];
        readonly source: "iana";
    };
    'model/mesh': {
        readonly extensions: readonly ["msh", "mesh", "silo"];
        readonly source: "iana";
    };
    'model/mtl': {
        readonly extensions: readonly ["mtl"];
        readonly source: "iana";
    };
    'model/obj': {
        readonly extensions: readonly ["obj"];
        readonly source: "iana";
    };
    'model/step': {
        readonly extensions: readonly [".p21", ".stp", ".step", ".stpnc", ".210"];
        readonly source: "iana";
    };
    'model/step+xml': {
        readonly extensions: readonly ["stpx"];
        readonly source: "iana";
    };
    'model/step+zip': {
        readonly extensions: readonly ["stpz"];
        readonly source: "iana";
    };
    'model/step-xml+zip': {
        readonly extensions: readonly ["stpxz"];
        readonly source: "iana";
    };
    'model/stl': {
        readonly extensions: readonly ["stl"];
        readonly source: "iana";
    };
    'model/vnd.collada+xml': {
        readonly extensions: readonly ["dae"];
        readonly source: "iana";
    };
    'model/vnd.dwf': {
        readonly extensions: readonly ["dwf"];
        readonly source: "iana";
    };
    'model/vnd.gdl': {
        readonly extensions: readonly ["gdl"];
        readonly source: "iana";
    };
    'model/vnd.gtw': {
        readonly extensions: readonly ["gtw"];
        readonly source: "iana";
    };
    'model/vnd.mts': {
        readonly extensions: readonly ["mts"];
        readonly source: "iana";
    };
    'model/vnd.opengex': {
        readonly extensions: readonly ["ogex"];
        readonly source: "iana";
    };
    'model/vnd.parasolid.transmit.binary': {
        readonly extensions: readonly ["x_b"];
        readonly source: "iana";
    };
    'model/vnd.parasolid.transmit.text': {
        readonly extensions: readonly ["x_t"];
        readonly source: "iana";
    };
    'model/vnd.sap.vds': {
        readonly extensions: readonly ["vds"];
        readonly source: "iana";
    };
    'model/vnd.usdz+zip': {
        readonly extensions: readonly ["usdz"];
        readonly source: "iana";
    };
    'model/vnd.valve.source.compiled-map': {
        readonly extensions: readonly ["bsp"];
        readonly source: "iana";
    };
    'model/vnd.vtu': {
        readonly extensions: readonly ["vtu"];
        readonly source: "iana";
    };
    'model/vrml': {
        readonly extensions: readonly ["wrl", "vrml"];
        readonly source: "iana";
    };
    'model/x3d+binary': {
        readonly extensions: readonly ["x3db", "x3dbz"];
        readonly source: "apache";
    };
    'model/x3d+fastinfoset': {
        readonly extensions: readonly ["x3db"];
        readonly source: "iana";
    };
    'model/x3d+vrml': {
        readonly extensions: readonly ["x3dv", "x3dvz"];
        readonly source: "apache";
    };
    'model/x3d+xml': {
        readonly extensions: readonly ["x3d", "x3dz"];
        readonly source: "iana";
    };
    'model/x3d-vrml': {
        readonly extensions: readonly ["x3dv"];
        readonly source: "iana";
    };
    'x-conference/x-cooltalk': {
        readonly extensions: readonly ["ice"];
        readonly source: "apache";
    };
    'video/3gpp': {
        readonly extensions: readonly ["3gp", "3gpp"];
        readonly source: "iana";
    };
    'video/3gpp2': {
        readonly extensions: readonly ["3g2"];
        readonly source: "iana";
    };
    'video/h261': {
        readonly extensions: readonly ["h261"];
        readonly source: "iana";
    };
    'video/h263': {
        readonly extensions: readonly ["h263"];
        readonly source: "iana";
    };
    'video/h264': {
        readonly extensions: readonly ["h264"];
        readonly source: "iana";
    };
    'video/iso.segment': {
        readonly extensions: readonly ["m4s"];
        readonly source: "iana";
    };
    'video/jpeg': {
        readonly extensions: readonly ["jpgv"];
        readonly source: "iana";
    };
    'video/jpm': {
        readonly extensions: readonly ["jpm", "jpgm"];
        readonly source: "apache";
    };
    'video/mj2': {
        readonly extensions: readonly ["mj2", "mjp2"];
        readonly source: "iana";
    };
    'video/mp2t': {
        readonly extensions: readonly ["ts"];
        readonly source: "iana";
    };
    'video/mp4': {
        readonly extensions: readonly ["mp4", "mp4v", "mpg4"];
        readonly source: "iana";
    };
    'video/mpeg': {
        readonly extensions: readonly ["mpeg", "mpg", "mpe", "m1v", "m2v"];
        readonly source: "iana";
    };
    'video/ogg': {
        readonly extensions: readonly ["ogv"];
        readonly source: "iana";
    };
    'video/quicktime': {
        readonly extensions: readonly ["qt", "mov"];
        readonly source: "iana";
    };
    'video/vnd.dece.hd': {
        readonly extensions: readonly ["uvh", "uvvh"];
        readonly source: "iana";
    };
    'video/vnd.dece.mobile': {
        readonly extensions: readonly ["uvm", "uvvm"];
        readonly source: "iana";
    };
    'video/vnd.dece.pd': {
        readonly extensions: readonly ["uvp", "uvvp"];
        readonly source: "iana";
    };
    'video/vnd.dece.sd': {
        readonly extensions: readonly ["uvs", "uvvs"];
        readonly source: "iana";
    };
    'video/vnd.dece.video': {
        readonly extensions: readonly ["uvv", "uvvv"];
        readonly source: "iana";
    };
    'video/vnd.dvb.file': {
        readonly extensions: readonly ["dvb"];
        readonly source: "iana";
    };
    'video/vnd.fvt': {
        readonly extensions: readonly ["fvt"];
        readonly source: "iana";
    };
    'video/vnd.mpegurl': {
        readonly extensions: readonly ["mxu", "m4u"];
        readonly source: "iana";
    };
    'video/vnd.ms-playready.media.pyv': {
        readonly extensions: readonly ["pyv"];
        readonly source: "iana";
    };
    'video/vnd.uvvu.mp4': {
        readonly extensions: readonly ["uvu", "uvvu"];
        readonly source: "iana";
    };
    'video/vnd.vivo': {
        readonly extensions: readonly ["viv"];
        readonly source: "iana";
    };
    'video/webm': {
        readonly extensions: readonly ["webm"];
        readonly source: "apache";
    };
    'video/x-f4v': {
        readonly extensions: readonly ["f4v"];
        readonly source: "apache";
    };
    'video/x-fli': {
        readonly extensions: readonly ["fli"];
        readonly source: "apache";
    };
    'video/x-flv': {
        readonly extensions: readonly ["flv"];
        readonly source: "apache";
    };
    'video/x-m4v': {
        readonly extensions: readonly ["m4v"];
        readonly source: "apache";
    };
    'video/x-matroska': {
        readonly extensions: readonly ["mkv", "mk3d", "mks"];
        readonly source: "apache";
    };
    'video/x-mng': {
        readonly extensions: readonly ["mng"];
        readonly source: "apache";
    };
    'video/x-ms-asf': {
        readonly extensions: readonly ["asf", "asx"];
        readonly source: "apache";
    };
    'video/x-ms-vob': {
        readonly extensions: readonly ["vob"];
        readonly source: "apache";
    };
    'video/x-ms-wm': {
        readonly extensions: readonly ["wm"];
        readonly source: "apache";
    };
    'video/x-ms-wmv': {
        readonly extensions: readonly ["wmv"];
        readonly source: "apache";
    };
    'video/x-ms-wmx': {
        readonly extensions: readonly ["wmx"];
        readonly source: "apache";
    };
    'video/x-ms-wvx': {
        readonly extensions: readonly ["wvx"];
        readonly source: "apache";
    };
    'video/x-msvideo': {
        readonly extensions: readonly ["avi"];
        readonly source: "apache";
    };
    'video/x-sgi-movie': {
        readonly extensions: readonly ["movie"];
        readonly source: "apache";
    };
    'video/x-smv': {
        readonly extensions: readonly ["smv"];
        readonly source: "apache";
    };
    'text/cache-manifest': {
        readonly extensions: readonly ["appcache", "manifest"];
        readonly source: "iana";
    };
    'text/calendar': {
        readonly extensions: readonly ["ics", "ifb"];
        readonly source: "iana";
    };
    'text/css': {
        readonly charset: "UTF-8";
        readonly extensions: readonly ["css"];
        readonly source: "iana";
    };
    'text/csv': {
        readonly extensions: readonly ["csv"];
        readonly source: "iana";
    };
    'text/html': {
        readonly extensions: readonly ["html", "htm", "shtml"];
        readonly source: "iana";
    };
    'text/markdown': {
        readonly extensions: readonly ["markdown", "md"];
        readonly source: "iana";
    };
    'text/mathml': {
        readonly extensions: readonly ["mml"];
        readonly source: "nginx";
    };
    'text/n3': {
        readonly charset: "UTF-8";
        readonly extensions: readonly ["n3"];
        readonly source: "iana";
    };
    'text/plain': {
        readonly extensions: readonly ["txt", "text", "conf", "def", "list", "log", "in", "ini"];
        readonly source: "iana";
    };
    'text/prs.lines.tag': {
        readonly extensions: readonly ["dsc"];
        readonly source: "iana";
    };
    'text/richtext': {
        readonly extensions: readonly ["rtx"];
        readonly source: "iana";
    };
    'text/rtf': {
        readonly extensions: readonly ["rtf"];
        readonly source: "iana";
    };
    'text/sgml': {
        readonly extensions: readonly ["sgml", "sgm"];
        readonly source: "iana";
    };
    'text/shex': {
        readonly extensions: readonly ["shex"];
        readonly source: "iana";
    };
    'text/spdx': {
        readonly extensions: readonly ["spdx"];
        readonly source: "iana";
    };
    'text/tab-separated-values': {
        readonly extensions: readonly ["tsv"];
        readonly source: "iana";
    };
    'text/troff': {
        readonly extensions: readonly ["t", "tr", "roff", "man", "me", "ms"];
        readonly source: "iana";
    };
    'text/turtle': {
        readonly charset: "UTF-8";
        readonly extensions: readonly ["ttl"];
        readonly source: "iana";
    };
    'text/uri-list': {
        readonly extensions: readonly ["uri", "uris", "urls"];
        readonly source: "iana";
    };
    'text/vcard': {
        readonly extensions: readonly ["vcard"];
        readonly source: "iana";
    };
    'text/vnd.curl': {
        readonly extensions: readonly ["curl"];
        readonly source: "iana";
    };
    'text/vnd.curl.dcurl': {
        readonly extensions: readonly ["dcurl"];
        readonly source: "apache";
    };
    'text/vnd.curl.mcurl': {
        readonly extensions: readonly ["mcurl"];
        readonly source: "apache";
    };
    'text/vnd.curl.scurl': {
        readonly extensions: readonly ["scurl"];
        readonly source: "apache";
    };
    'text/vnd.dvb.subtitle': {
        readonly extensions: readonly ["sub"];
        readonly source: "iana";
    };
    'text/vnd.familysearch.gedcom': {
        readonly extensions: readonly ["ged"];
        readonly source: "iana";
    };
    'text/vnd.fly': {
        readonly extensions: readonly ["fly"];
        readonly source: "iana";
    };
    'text/vnd.fmi.flexstor': {
        readonly extensions: readonly ["flx"];
        readonly source: "iana";
    };
    'text/vnd.graphviz': {
        readonly extensions: readonly ["gv"];
        readonly source: "iana";
    };
    'text/vnd.in3d.3dml': {
        readonly extensions: readonly ["3dml"];
        readonly source: "iana";
    };
    'text/vnd.in3d.spot': {
        readonly extensions: readonly ["spot"];
        readonly source: "iana";
    };
    'text/vnd.sun.j2me.app-descriptor': {
        readonly charset: "UTF-8";
        readonly extensions: readonly ["jad"];
        readonly source: "iana";
    };
    'text/vnd.wap.wml': {
        readonly extensions: readonly ["wml"];
        readonly source: "iana";
    };
    'text/vnd.wap.wmlscript': {
        readonly extensions: readonly ["wmls"];
        readonly source: "iana";
    };
    'text/vtt': {
        readonly charset: "UTF-8";
        readonly extensions: readonly ["vtt"];
        readonly source: "iana";
    };
    'text/x-asm': {
        readonly extensions: readonly ["s", "asm"];
        readonly source: "apache";
    };
    'text/x-c': {
        readonly extensions: readonly ["c", "cc", "cxx", "cpp", "h", "hh", "dic"];
        readonly source: "apache";
    };
    'text/x-component': {
        readonly extensions: readonly ["htc"];
        readonly source: "nginx";
    };
    'text/x-fortran': {
        readonly extensions: readonly ["f", "for", "f77", "f90"];
        readonly source: "apache";
    };
    'text/x-java-source': {
        readonly extensions: readonly ["java"];
        readonly source: "apache";
    };
    'text/x-nfo': {
        readonly extensions: readonly ["nfo"];
        readonly source: "apache";
    };
    'text/x-opml': {
        readonly extensions: readonly ["opml"];
        readonly source: "apache";
    };
    'text/x-pascal': {
        readonly extensions: readonly ["p", "pas"];
        readonly source: "apache";
    };
    'text/x-setext': {
        readonly extensions: readonly ["etx"];
        readonly source: "apache";
    };
    'text/x-sfv': {
        readonly extensions: readonly ["sfv"];
        readonly source: "apache";
    };
    'text/x-uuencode': {
        readonly extensions: readonly ["uu"];
        readonly source: "apache";
    };
    'text/x-vcalendar': {
        readonly extensions: readonly ["vcs"];
        readonly source: "apache";
    };
    'text/x-vcard': {
        readonly extensions: readonly ["vcf"];
        readonly source: "apache";
    };
    'text/xml': {
        readonly extensions: readonly ["xml"];
        readonly source: "iana";
    };
    'image/aces': {
        readonly extensions: readonly ["exr"];
        readonly source: "iana";
    };
    'image/avci': {
        readonly extensions: readonly ["avci"];
        readonly source: "iana";
    };
    'image/avcs': {
        readonly extensions: readonly ["avcs"];
        readonly source: "iana";
    };
    'image/avif': {
        readonly extensions: readonly ["avif"];
        readonly source: "iana";
    };
    'image/bmp': {
        readonly extensions: readonly ["bmp"];
        readonly source: "iana";
    };
    'image/cgm': {
        readonly extensions: readonly ["cgm"];
        readonly source: "iana";
    };
    'image/dicom-rle': {
        readonly extensions: readonly ["drle"];
        readonly source: "iana";
    };
    'image/emf': {
        readonly extensions: readonly ["emf"];
        readonly source: "iana";
    };
    'image/fits': {
        readonly extensions: readonly ["fits"];
        readonly source: "iana";
    };
    'image/g3fax': {
        readonly extensions: readonly ["g3"];
        readonly source: "iana";
    };
    'image/gif': {
        readonly extensions: readonly ["gif"];
        readonly source: "iana";
    };
    'image/heic': {
        readonly extensions: readonly ["heic"];
        readonly source: "iana";
    };
    'image/heic-sequence': {
        readonly extensions: readonly ["heics"];
        readonly source: "iana";
    };
    'image/heif': {
        readonly extensions: readonly ["heif"];
        readonly source: "iana";
    };
    'image/heif-sequence': {
        readonly extensions: readonly ["heifs"];
        readonly source: "iana";
    };
    'image/hej2k': {
        readonly extensions: readonly ["hej2"];
        readonly source: "iana";
    };
    'image/hsj2': {
        readonly extensions: readonly ["hsj2"];
        readonly source: "iana";
    };
    'image/ief': {
        readonly extensions: readonly ["ief"];
        readonly source: "iana";
    };
    'image/jls': {
        readonly extensions: readonly ["jls"];
        readonly source: "iana";
    };
    'image/jp2': {
        readonly extensions: readonly ["jp2", "jpg2"];
        readonly source: "iana";
    };
    'image/jpeg': {
        readonly extensions: readonly ["jpeg", "jpg", "jpe", "jfif", "pjpeg", "pjp"];
        readonly source: "iana";
    };
    'image/jph': {
        readonly extensions: readonly ["jph"];
        readonly source: "iana";
    };
    'image/jphc': {
        readonly extensions: readonly ["jhc"];
        readonly source: "iana";
    };
    'image/jpm': {
        readonly extensions: readonly ["jpm"];
        readonly source: "iana";
    };
    'image/jpx': {
        readonly extensions: readonly ["jpx", "jpf"];
        readonly source: "iana";
    };
    'image/jxr': {
        readonly extensions: readonly ["jxr"];
        readonly source: "iana";
    };
    'image/jxra': {
        readonly extensions: readonly ["jxra"];
        readonly source: "iana";
    };
    'image/jxrs': {
        readonly extensions: readonly ["jxrs"];
        readonly source: "iana";
    };
    'image/jxs': {
        readonly extensions: readonly ["jxs"];
        readonly source: "iana";
    };
    'image/jxsc': {
        readonly extensions: readonly ["jxsc"];
        readonly source: "iana";
    };
    'image/jxsi': {
        readonly extensions: readonly ["jxsi"];
        readonly source: "iana";
    };
    'image/jxss': {
        readonly extensions: readonly ["jxss"];
        readonly source: "iana";
    };
    'image/ktx': {
        readonly extensions: readonly ["ktx"];
        readonly source: "iana";
    };
    'image/ktx2': {
        readonly extensions: readonly ["ktx2"];
        readonly source: "iana";
    };
    'image/png': {
        readonly extensions: readonly ["png"];
        readonly source: "iana";
    };
    'image/prs.btif': {
        readonly extensions: readonly ["btif"];
        readonly source: "iana";
    };
    'image/prs.pti': {
        readonly extensions: readonly ["pti"];
        readonly source: "iana";
    };
    'image/sgi': {
        readonly extensions: readonly ["sgi"];
        readonly source: "apache";
    };
    'image/svg+xml': {
        readonly extensions: readonly ["svg", "svgz"];
        readonly source: "iana";
    };
    'image/t38': {
        readonly extensions: readonly ["t38"];
        readonly source: "iana";
    };
    'image/tiff': {
        readonly extensions: readonly ["tif", "tiff"];
        readonly source: "iana";
    };
    'image/tiff-fx': {
        readonly extensions: readonly ["tfx"];
        readonly source: "iana";
    };
    'image/vnd.adobe.photoshop': {
        readonly extensions: readonly ["psd"];
        readonly source: "iana";
    };
    'image/vnd.airzip.accelerator.azv': {
        readonly extensions: readonly ["azv"];
        readonly source: "iana";
    };
    'image/vnd.dece.graphic': {
        readonly extensions: readonly ["uvi", "uvvi", "uvg", "uvvg"];
        readonly source: "iana";
    };
    'image/vnd.djvu': {
        readonly extensions: readonly ["djvu", "djv"];
        readonly source: "iana";
    };
    'image/vnd.dvb.subtitle': {
        readonly extensions: readonly ["sub"];
        readonly source: "iana";
    };
    'image/vnd.dwg': {
        readonly extensions: readonly ["dwg"];
        readonly source: "iana";
    };
    'image/vnd.dxf': {
        readonly extensions: readonly ["dxf"];
        readonly source: "iana";
    };
    'image/vnd.fastbidsheet': {
        readonly extensions: readonly ["fbs"];
        readonly source: "iana";
    };
    'image/vnd.fpx': {
        readonly extensions: readonly ["fpx"];
        readonly source: "iana";
    };
    'image/vnd.fst': {
        readonly extensions: readonly ["fst"];
        readonly source: "iana";
    };
    'image/vnd.fujixerox.edmics-mmr': {
        readonly extensions: readonly ["mmr"];
        readonly source: "iana";
    };
    'image/vnd.fujixerox.edmics-rlc': {
        readonly extensions: readonly ["rlc"];
        readonly source: "iana";
    };
    'image/vnd.microsoft.icon': {
        readonly extensions: readonly ["ico"];
        readonly source: "iana";
    };
    'image/vnd.ms-modi': {
        readonly extensions: readonly ["mdi"];
        readonly source: "iana";
    };
    'image/vnd.ms-photo': {
        readonly extensions: readonly ["wdp"];
        readonly source: "apache";
    };
    'image/vnd.net-fpx': {
        readonly extensions: readonly ["npx"];
        readonly source: "iana";
    };
    'image/vnd.pco.b16': {
        readonly extensions: readonly ["b16"];
        readonly source: "iana";
    };
    'image/vnd.tencent.tap': {
        readonly extensions: readonly ["tap"];
        readonly source: "iana";
    };
    'image/vnd.valve.source.texture': {
        readonly extensions: readonly ["vtf"];
        readonly source: "iana";
    };
    'image/vnd.wap.wbmp': {
        readonly extensions: readonly ["wbmp"];
        readonly source: "iana";
    };
    'image/vnd.xiff': {
        readonly extensions: readonly ["xif"];
        readonly source: "iana";
    };
    'image/vnd.zbrush.pcx': {
        readonly extensions: readonly ["pcx"];
        readonly source: "iana";
    };
    'image/webp': {
        readonly extensions: readonly ["webp"];
        readonly source: "apache";
    };
    'image/wmf': {
        readonly extensions: readonly ["wmf"];
        readonly source: "iana";
    };
    'image/x-3ds': {
        readonly extensions: readonly ["3ds"];
        readonly source: "apache";
    };
    'image/x-cmu-raster': {
        readonly extensions: readonly ["ras"];
        readonly source: "apache";
    };
    'image/x-cmx': {
        readonly extensions: readonly ["cmx"];
        readonly source: "apache";
    };
    'image/x-freehand': {
        readonly extensions: readonly ["fh", "fhc", "fh4", "fh5", "fh7"];
        readonly source: "apache";
    };
    'image/x-icon': {
        readonly extensions: readonly ["ico"];
        readonly source: "apache";
    };
    'image/x-jng': {
        readonly extensions: readonly ["jng"];
        readonly source: "nginx";
    };
    'image/x-mrsid-image': {
        readonly extensions: readonly ["sid"];
        readonly source: "apache";
    };
    'image/x-ms-bmp': {
        readonly extensions: readonly ["bmp"];
        readonly source: "nginx";
    };
    'image/x-pcx': {
        readonly extensions: readonly ["pcx"];
        readonly source: "apache";
    };
    'image/x-pict': {
        readonly extensions: readonly ["pic", "pct"];
        readonly source: "apache";
    };
    'image/x-portable-anymap': {
        readonly extensions: readonly ["pnm"];
        readonly source: "apache";
    };
    'image/x-portable-bitmap': {
        readonly extensions: readonly ["pbm"];
        readonly source: "apache";
    };
    'image/x-portable-graymap': {
        readonly extensions: readonly ["pgm"];
        readonly source: "apache";
    };
    'image/x-portable-pixmap': {
        readonly extensions: readonly ["ppm"];
        readonly source: "apache";
    };
    'image/x-rgb': {
        readonly extensions: readonly ["rgb"];
        readonly source: "apache";
    };
    'image/x-tga': {
        readonly extensions: readonly ["tga"];
        readonly source: "apache";
    };
    'image/x-xbitmap': {
        readonly extensions: readonly ["xbm"];
        readonly source: "apache";
    };
    'image/x-xpixmap': {
        readonly extensions: readonly ["xpm"];
        readonly source: "apache";
    };
    'image/x-xwindowdump': {
        readonly extensions: readonly ["xwd"];
        readonly source: "apache";
    };
    'audio/3gpp': {
        readonly extensions: readonly ["3gpp"];
        readonly source: "iana";
    };
    'audio/adpcm': {
        readonly extensions: readonly ["adp"];
        readonly source: "apache";
    };
    'audio/amr': {
        readonly extensions: readonly ["amr"];
        readonly source: "iana";
    };
    'audio/basic': {
        readonly extensions: readonly ["au", "snd"];
        readonly source: "iana";
    };
    'audio/midi': {
        readonly extensions: readonly ["mid", "midi", "kar", "rmi"];
        readonly source: "apache";
    };
    'audio/mobile-xmf': {
        readonly extensions: readonly ["mxmf"];
        readonly source: "iana";
    };
    'audio/mp4': {
        readonly extensions: readonly ["m4a", "mp4a"];
        readonly source: "iana";
    };
    'audio/mpeg': {
        readonly extensions: readonly ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"];
        readonly source: "iana";
    };
    'audio/ogg': {
        readonly extensions: readonly ["oga", "ogg", "spx", "opus"];
        readonly source: "iana";
    };
    'audio/s3m': {
        readonly extensions: readonly ["s3m"];
        readonly source: "apache";
    };
    'audio/silk': {
        readonly extensions: readonly ["sil"];
        readonly source: "apache";
    };
    'audio/vnd.dece.audio': {
        readonly extensions: readonly ["uva", "uvva"];
        readonly source: "iana";
    };
    'audio/vnd.digital-winds': {
        readonly extensions: readonly ["eol"];
        readonly source: "iana";
    };
    'audio/vnd.dra': {
        readonly extensions: readonly ["dra"];
        readonly source: "iana";
    };
    'audio/vnd.dts': {
        readonly extensions: readonly ["dts"];
        readonly source: "iana";
    };
    'audio/vnd.dts.hd': {
        readonly extensions: readonly ["dtshd"];
        readonly source: "iana";
    };
    'audio/vnd.lucent.voice': {
        readonly extensions: readonly ["lvp"];
        readonly source: "iana";
    };
    'audio/vnd.ms-playready.media.pya': {
        readonly extensions: readonly ["pya"];
        readonly source: "iana";
    };
    'audio/vnd.nuera.ecelp4800': {
        readonly extensions: readonly ["ecelp4800"];
        readonly source: "iana";
    };
    'audio/vnd.nuera.ecelp7470': {
        readonly extensions: readonly ["ecelp7470"];
        readonly source: "iana";
    };
    'audio/vnd.nuera.ecelp9600': {
        readonly extensions: readonly ["ecelp9600"];
        readonly source: "iana";
    };
    'audio/vnd.rip': {
        readonly extensions: readonly ["rip"];
        readonly source: "iana";
    };
    'audio/webm': {
        readonly extensions: readonly ["weba"];
        readonly source: "apache";
    };
    'audio/x-aac': {
        readonly extensions: readonly ["aac"];
        readonly source: "apache";
    };
    'audio/x-aiff': {
        readonly extensions: readonly ["aif", "aiff", "aifc"];
        readonly source: "apache";
    };
    'audio/x-caf': {
        readonly extensions: readonly ["caf"];
        readonly source: "apache";
    };
    'audio/x-flac': {
        readonly extensions: readonly ["flac"];
        readonly source: "apache";
    };
    'audio/x-gsm': {
        readonly extensions: readonly ["gsm"];
        readonly source: "apache";
    };
    'audio/x-m4a': {
        readonly extensions: readonly ["m4a"];
        readonly source: "nginx";
    };
    'audio/x-matroska': {
        readonly extensions: readonly ["mka"];
        readonly source: "apache";
    };
    'audio/x-mpegurl': {
        readonly extensions: readonly ["m3u"];
        readonly source: "apache";
    };
    'audio/x-ms-wax': {
        readonly extensions: readonly ["wax"];
        readonly source: "apache";
    };
    'audio/x-ms-wma': {
        readonly extensions: readonly ["wma"];
        readonly source: "apache";
    };
    'audio/x-pn-realaudio': {
        readonly extensions: readonly ["ram", "ra"];
        readonly source: "apache";
    };
    'audio/x-pn-realaudio-plugin': {
        readonly extensions: readonly ["rmp"];
        readonly source: "apache";
    };
    'audio/x-realaudio': {
        readonly extensions: readonly ["ra"];
        readonly source: "nginx";
    };
    'audio/x-wav': {
        readonly extensions: readonly ["wav"];
        readonly source: "apache";
    };
    'audio/xm': {
        readonly extensions: readonly ["xm"];
        readonly source: "apache";
    };
    'application/andrew-inset': {
        readonly extensions: readonly ["ez"];
        readonly source: "iana";
    };
    'application/applixware': {
        readonly extensions: readonly ["aw"];
        readonly source: "apache";
    };
    'application/atom+xml': {
        readonly extensions: readonly ["atom"];
        readonly source: "iana";
    };
    'application/atomcat+xml': {
        readonly extensions: readonly ["atomcat"];
        readonly source: "iana";
    };
    'application/atomdeleted+xml': {
        readonly extensions: readonly ["atomdeleted"];
        readonly source: "iana";
    };
    'application/atomsvc+xml': {
        readonly extensions: readonly ["atomsvc"];
        readonly source: "iana";
    };
    'application/atsc-dwd+xml': {
        readonly extensions: readonly ["dwd"];
        readonly source: "iana";
    };
    'application/atsc-held+xml': {
        readonly extensions: readonly ["held"];
        readonly source: "iana";
    };
    'application/atsc-rsat+xml': {
        readonly extensions: readonly ["rsat"];
        readonly source: "iana";
    };
    'application/calendar+xml': {
        readonly extensions: readonly ["xcs"];
        readonly source: "iana";
    };
    'application/ccxml+xml': {
        readonly extensions: readonly ["ccxml"];
        readonly source: "iana";
    };
    'application/cdfx+xml': {
        readonly extensions: readonly ["cdfx"];
        readonly source: "iana";
    };
    'application/cdmi-capability': {
        readonly extensions: readonly ["cdmia"];
        readonly source: "iana";
    };
    'application/cdmi-container': {
        readonly extensions: readonly ["cdmic"];
        readonly source: "iana";
    };
    'application/cdmi-domain': {
        readonly extensions: readonly ["cdmid"];
        readonly source: "iana";
    };
    'application/cdmi-object': {
        readonly extensions: readonly ["cdmio"];
        readonly source: "iana";
    };
    'application/cdmi-queue': {
        readonly extensions: readonly ["cdmiq"];
        readonly source: "iana";
    };
    'application/cpl+xml': {
        readonly extensions: readonly ["cpl"];
        readonly source: "iana";
    };
    'application/cu-seeme': {
        readonly extensions: readonly ["cu"];
        readonly source: "apache";
    };
    'application/dash+xml': {
        readonly extensions: readonly ["mpd"];
        readonly source: "iana";
    };
    'application/dash-patch+xml': {
        readonly extensions: readonly ["mpp"];
        readonly source: "iana";
    };
    'application/davmount+xml': {
        readonly extensions: readonly ["davmount"];
        readonly source: "iana";
    };
    'application/dicom': {
        readonly extensions: readonly ["dcm"];
        readonly source: "iana";
    };
    'application/docbook+xml': {
        readonly extensions: readonly ["dbk"];
        readonly source: "apache";
    };
    'application/dssc+der': {
        readonly extensions: readonly ["dssc"];
        readonly source: "iana";
    };
    'application/dssc+xml': {
        readonly extensions: readonly ["xdssc"];
        readonly source: "iana";
    };
    'application/ecmascript': {
        readonly extensions: readonly ["es", "ecma"];
        readonly source: "iana";
    };
    'application/emma+xml': {
        readonly extensions: readonly ["emma"];
        readonly source: "iana";
    };
    'application/emotionml+xml': {
        readonly extensions: readonly ["emotionml"];
        readonly source: "iana";
    };
    'application/epub+zip': {
        readonly extensions: readonly ["epub"];
        readonly source: "iana";
    };
    'application/exi': {
        readonly extensions: readonly ["exi"];
        readonly source: "iana";
    };
    'application/express': {
        readonly extensions: readonly ["exp"];
        readonly source: "iana";
    };
    'application/fdt+xml': {
        readonly extensions: readonly ["fdt"];
        readonly source: "iana";
    };
    'application/font-tdpfr': {
        readonly extensions: readonly ["pfr"];
        readonly source: "iana";
    };
    'application/geo+json': {
        readonly extensions: readonly ["geojson"];
        readonly source: "iana";
    };
    'application/gml+xml': {
        readonly extensions: readonly ["gml"];
        readonly source: "iana";
    };
    'application/gpx+xml': {
        readonly extensions: readonly ["gpx"];
        readonly source: "apache";
    };
    'application/gxf': {
        readonly extensions: readonly ["gxf"];
        readonly source: "apache";
    };
    'application/gzip': {
        readonly extensions: readonly ["gz"];
        readonly source: "iana";
    };
    'application/hyperstudio': {
        readonly extensions: readonly ["stk"];
        readonly source: "iana";
    };
    'application/inkml+xml': {
        readonly extensions: readonly ["ink", "inkml"];
        readonly source: "iana";
    };
    'application/ipfix': {
        readonly extensions: readonly ["ipfix"];
        readonly source: "iana";
    };
    'application/its+xml': {
        readonly extensions: readonly ["its"];
        readonly source: "iana";
    };
    'application/java-archive': {
        readonly extensions: readonly ["jar", "war", "ear"];
        readonly source: "apache";
    };
    'application/java-serialized-object': {
        readonly extensions: readonly ["ser"];
        readonly source: "apache";
    };
    'application/java-vm': {
        readonly extensions: readonly ["class"];
        readonly source: "apache";
    };
    'application/javascript': {
        readonly charset: "UTF-8";
        readonly extensions: readonly ["js", "mjs"];
        readonly source: "iana";
    };
    'application/json': {
        readonly charset: "UTF-8";
        readonly extensions: readonly ["json", "map"];
        readonly source: "iana";
    };
    'application/jsonml+json': {
        readonly extensions: readonly ["jsonml"];
        readonly source: "apache";
    };
    'application/ld+json': {
        readonly extensions: readonly ["jsonld"];
        readonly source: "iana";
    };
    'application/lgr+xml': {
        readonly extensions: readonly ["lgr"];
        readonly source: "iana";
    };
    'application/lost+xml': {
        readonly extensions: readonly ["lostxml"];
        readonly source: "iana";
    };
    'application/mac-binhex40': {
        readonly extensions: readonly ["hqx"];
        readonly source: "iana";
    };
    'application/mac-compactpro': {
        readonly extensions: readonly ["cpt"];
        readonly source: "apache";
    };
    'application/mads+xml': {
        readonly extensions: readonly ["mads"];
        readonly source: "iana";
    };
    'application/manifest+json': {
        readonly charset: "UTF-8";
        readonly extensions: readonly ["webmanifest"];
        readonly source: "iana";
    };
    'application/marc': {
        readonly extensions: readonly ["mrc"];
        readonly source: "iana";
    };
    'application/marcxml+xml': {
        readonly extensions: readonly ["mrcx"];
        readonly source: "iana";
    };
    'application/mathematica': {
        readonly extensions: readonly ["ma", "nb", "mb"];
        readonly source: "iana";
    };
    'application/mathml+xml': {
        readonly extensions: readonly ["mathml"];
        readonly source: "iana";
    };
    'application/mbox': {
        readonly extensions: readonly ["mbox"];
        readonly source: "iana";
    };
    'application/media-policy-dataset+xml': {
        readonly extensions: readonly ["mpf"];
        readonly source: "iana";
    };
    'application/mediaservercontrol+xml': {
        readonly extensions: readonly ["mscml"];
        readonly source: "iana";
    };
    'application/metalink4+xml': {
        readonly extensions: readonly ["meta4"];
        readonly source: "iana";
    };
    'application/metalink+xml': {
        readonly extensions: readonly ["metalink"];
        readonly source: "apache";
    };
    'application/mets+xml': {
        readonly extensions: readonly ["mets"];
        readonly source: "iana";
    };
    'application/mmt-aei+xml': {
        readonly extensions: readonly ["maei"];
        readonly source: "iana";
    };
    'application/mmt-usd+xml': {
        readonly extensions: readonly ["musd"];
        readonly source: "iana";
    };
    'application/mods+xml': {
        readonly extensions: readonly ["mods"];
        readonly source: "iana";
    };
    'application/mp4': {
        readonly extensions: readonly ["mp4s", "m4p"];
        readonly source: "iana";
    };
    'application/mp21': {
        readonly extensions: readonly ["m21", "mp21"];
        readonly source: "iana";
    };
    'application/msword': {
        readonly extensions: readonly ["doc", "dot"];
        readonly source: "iana";
    };
    'application/mxf': {
        readonly extensions: readonly ["mxf"];
        readonly source: "iana";
    };
    'application/n-quads': {
        readonly extensions: readonly ["nq"];
        readonly source: "iana";
    };
    'application/n-triples': {
        readonly extensions: readonly ["nt"];
        readonly source: "iana";
    };
    'application/node': {
        readonly extensions: readonly ["cjs"];
        readonly source: "iana";
    };
    'application/octet-stream': {
        readonly extensions: readonly ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"];
        readonly source: "iana";
    };
    'application/oda': {
        readonly extensions: readonly ["oda"];
        readonly source: "iana";
    };
    'application/oebps-package+xml': {
        readonly extensions: readonly ["opf"];
        readonly source: "iana";
    };
    'application/ogg': {
        readonly extensions: readonly ["ogx"];
        readonly source: "iana";
    };
    'application/omdoc+xml': {
        readonly extensions: readonly ["omdoc"];
        readonly source: "apache";
    };
    'application/onenote': {
        readonly extensions: readonly ["onetoc", "onetoc2", "onetmp", "onepkg"];
        readonly source: "apache";
    };
    'application/oxps': {
        readonly extensions: readonly ["oxps"];
        readonly source: "iana";
    };
    'application/p2p-overlay+xml': {
        readonly extensions: readonly ["relo"];
        readonly source: "iana";
    };
    'application/patch-ops-error+xml': {
        readonly extensions: readonly ["xer"];
        readonly source: "iana";
    };
    'application/pdf': {
        readonly extensions: readonly ["pdf"];
        readonly source: "iana";
    };
    'application/pgp-encrypted': {
        readonly extensions: readonly ["pgp"];
        readonly source: "iana";
    };
    'application/pgp-keys': {
        readonly extensions: readonly ["asc"];
        readonly source: "iana";
    };
    'application/pgp-signature': {
        readonly extensions: readonly ["asc", "sig"];
        readonly source: "iana";
    };
    'application/pics-rules': {
        readonly extensions: readonly ["prf"];
        readonly source: "apache";
    };
    'application/pkcs7-mime': {
        readonly extensions: readonly ["p7m", "p7c"];
        readonly source: "iana";
    };
    'application/pkcs7-signature': {
        readonly extensions: readonly ["p7s"];
        readonly source: "iana";
    };
    'application/pkcs8': {
        readonly extensions: readonly ["p8"];
        readonly source: "iana";
    };
    'application/pkcs10': {
        readonly extensions: readonly ["p10"];
        readonly source: "iana";
    };
    'application/pkix-attr-cert': {
        readonly extensions: readonly ["ac"];
        readonly source: "iana";
    };
    'application/pkix-cert': {
        readonly extensions: readonly ["cer"];
        readonly source: "iana";
    };
    'application/pkix-crl': {
        readonly extensions: readonly ["crl"];
        readonly source: "iana";
    };
    'application/pkix-pkipath': {
        readonly extensions: readonly ["pkipath"];
        readonly source: "iana";
    };
    'application/pkixcmp': {
        readonly extensions: readonly ["pki"];
        readonly source: "iana";
    };
    'application/pls+xml': {
        readonly extensions: readonly ["pls"];
        readonly source: "iana";
    };
    'application/postscript': {
        readonly extensions: readonly ["ai", "eps", "ps"];
        readonly source: "iana";
    };
    'application/provenance+xml': {
        readonly extensions: readonly ["provx"];
        readonly source: "iana";
    };
    'application/prs.cww': {
        readonly extensions: readonly ["cww"];
        readonly source: "iana";
    };
    'application/pskc+xml': {
        readonly extensions: readonly ["pskcxml"];
        readonly source: "iana";
    };
    'application/rdf+xml': {
        readonly extensions: readonly ["rdf", "owl"];
        readonly source: "iana";
    };
    'application/reginfo+xml': {
        readonly extensions: readonly ["rif"];
        readonly source: "iana";
    };
    'application/relax-ng-compact-syntax': {
        readonly extensions: readonly ["rnc"];
        readonly source: "iana";
    };
    'application/resource-lists+xml': {
        readonly extensions: readonly ["rl"];
        readonly source: "iana";
    };
    'application/resource-lists-diff+xml': {
        readonly extensions: readonly ["rld"];
        readonly source: "iana";
    };
    'application/rls-services+xml': {
        readonly extensions: readonly ["rs"];
        readonly source: "iana";
    };
    'application/route-apd+xml': {
        readonly extensions: readonly ["rapd"];
        readonly source: "iana";
    };
    'application/route-s-tsid+xml': {
        readonly extensions: readonly ["sls"];
        readonly source: "iana";
    };
    'application/route-usd+xml': {
        readonly extensions: readonly ["rusd"];
        readonly source: "iana";
    };
    'application/rpki-ghostbusters': {
        readonly extensions: readonly ["gbr"];
        readonly source: "iana";
    };
    'application/rpki-manifest': {
        readonly extensions: readonly ["mft"];
        readonly source: "iana";
    };
    'application/rpki-roa': {
        readonly extensions: readonly ["roa"];
        readonly source: "iana";
    };
    'application/rsd+xml': {
        readonly extensions: readonly ["rsd"];
        readonly source: "apache";
    };
    'application/rss+xml': {
        readonly extensions: readonly ["rss"];
        readonly source: "apache";
    };
    'application/rtf': {
        readonly extensions: readonly ["rtf"];
        readonly source: "iana";
    };
    'application/sbml+xml': {
        readonly extensions: readonly ["sbml"];
        readonly source: "iana";
    };
    'application/scvp-cv-request': {
        readonly extensions: readonly ["scq"];
        readonly source: "iana";
    };
    'application/scvp-cv-response': {
        readonly extensions: readonly ["scs"];
        readonly source: "iana";
    };
    'application/scvp-vp-request': {
        readonly extensions: readonly ["spq"];
        readonly source: "iana";
    };
    'application/scvp-vp-response': {
        readonly extensions: readonly ["spp"];
        readonly source: "iana";
    };
    'application/sdp': {
        readonly extensions: readonly ["sdp"];
        readonly source: "iana";
    };
    'application/senml+xml': {
        readonly extensions: readonly ["senmlx"];
        readonly source: "iana";
    };
    'application/sensml+xml': {
        readonly extensions: readonly ["sensmlx"];
        readonly source: "iana";
    };
    'application/set-payment-initiation': {
        readonly extensions: readonly ["setpay"];
        readonly source: "iana";
    };
    'application/set-registration-initiation': {
        readonly extensions: readonly ["setreg"];
        readonly source: "iana";
    };
    'application/shf+xml': {
        readonly extensions: readonly ["shf"];
        readonly source: "iana";
    };
    'application/sieve': {
        readonly extensions: readonly ["siv", "sieve"];
        readonly source: "iana";
    };
    'application/smil+xml': {
        readonly extensions: readonly ["smi", "smil"];
        readonly source: "iana";
    };
    'application/sparql-query': {
        readonly extensions: readonly ["rq"];
        readonly source: "iana";
    };
    'application/sparql-results+xml': {
        readonly extensions: readonly ["srx"];
        readonly source: "iana";
    };
    'application/srgs': {
        readonly extensions: readonly ["gram"];
        readonly source: "iana";
    };
    'application/srgs+xml': {
        readonly extensions: readonly ["grxml"];
        readonly source: "iana";
    };
    'application/sru+xml': {
        readonly extensions: readonly ["sru"];
        readonly source: "iana";
    };
    'application/ssdl+xml': {
        readonly extensions: readonly ["ssdl"];
        readonly source: "apache";
    };
    'application/ssml+xml': {
        readonly extensions: readonly ["ssml"];
        readonly source: "iana";
    };
    'application/swid+xml': {
        readonly extensions: readonly ["swidtag"];
        readonly source: "iana";
    };
    'application/tei+xml': {
        readonly extensions: readonly ["tei", "teicorpus"];
        readonly source: "iana";
    };
    'application/thraud+xml': {
        readonly extensions: readonly ["tfi"];
        readonly source: "iana";
    };
    'application/timestamped-data': {
        readonly extensions: readonly ["tsd"];
        readonly source: "iana";
    };
    'application/trig': {
        readonly extensions: readonly ["trig"];
        readonly source: "iana";
    };
    'application/ttml+xml': {
        readonly extensions: readonly ["ttml"];
        readonly source: "iana";
    };
    'application/urc-ressheet+xml': {
        readonly extensions: readonly ["rsheet"];
        readonly source: "iana";
    };
    'application/urc-targetdesc+xml': {
        readonly extensions: readonly ["td"];
        readonly source: "iana";
    };
    'application/vnd.3gpp2.tcap': {
        readonly extensions: readonly ["tcap"];
        readonly source: "iana";
    };
    'application/vnd.3gpp.pic-bw-large': {
        readonly extensions: readonly ["plb"];
        readonly source: "iana";
    };
    'application/vnd.3gpp.pic-bw-small': {
        readonly extensions: readonly ["psb"];
        readonly source: "iana";
    };
    'application/vnd.3gpp.pic-bw-var': {
        readonly extensions: readonly ["pvb"];
        readonly source: "iana";
    };
    'application/vnd.3m.post-it-notes': {
        readonly extensions: readonly ["pwn"];
        readonly source: "iana";
    };
    'application/vnd.1000minds.decision-model+xml': {
        readonly extensions: readonly ["1km"];
        readonly source: "iana";
    };
    'application/vnd.accpac.simply.aso': {
        readonly extensions: readonly ["aso"];
        readonly source: "iana";
    };
    'application/vnd.accpac.simply.imp': {
        readonly extensions: readonly ["imp"];
        readonly source: "iana";
    };
    'application/vnd.acucobol': {
        readonly extensions: readonly ["acu"];
        readonly source: "iana";
    };
    'application/vnd.acucorp': {
        readonly extensions: readonly ["atc", "acutc"];
        readonly source: "iana";
    };
    'application/vnd.adobe.air-application-installer-package+zip': {
        readonly extensions: readonly ["air"];
        readonly source: "apache";
    };
    'application/vnd.adobe.formscentral.fcdt': {
        readonly extensions: readonly ["fcdt"];
        readonly source: "iana";
    };
    'application/vnd.adobe.fxp': {
        readonly extensions: readonly ["fxp", "fxpl"];
        readonly source: "iana";
    };
    'application/vnd.adobe.xdp+xml': {
        readonly extensions: readonly ["xdp"];
        readonly source: "iana";
    };
    'application/vnd.adobe.xfdf': {
        readonly extensions: readonly ["xfdf"];
        readonly source: "iana";
    };
    'application/vnd.age': {
        readonly extensions: readonly ["age"];
        readonly source: "iana";
    };
    'application/vnd.ahead.space': {
        readonly extensions: readonly ["ahead"];
        readonly source: "iana";
    };
    'application/vnd.airzip.filesecure.azf': {
        readonly extensions: readonly ["azf"];
        readonly source: "iana";
    };
    'application/vnd.airzip.filesecure.azs': {
        readonly extensions: readonly ["azs"];
        readonly source: "iana";
    };
    'application/vnd.amazon.ebook': {
        readonly extensions: readonly ["azw"];
        readonly source: "apache";
    };
    'application/vnd.americandynamics.acc': {
        readonly extensions: readonly ["acc"];
        readonly source: "iana";
    };
    'application/vnd.amiga.ami': {
        readonly extensions: readonly ["ami"];
        readonly source: "iana";
    };
    'application/vnd.android.package-archive': {
        readonly extensions: readonly ["apk"];
        readonly source: "apache";
    };
    'application/vnd.anser-web-certificate-issue-initiation': {
        readonly extensions: readonly ["cii"];
        readonly source: "iana";
    };
    'application/vnd.anser-web-funds-transfer-initiation': {
        readonly extensions: readonly ["fti"];
        readonly source: "apache";
    };
    'application/vnd.antix.game-component': {
        readonly extensions: readonly ["atx"];
        readonly source: "iana";
    };
    'application/vnd.apple.installer+xml': {
        readonly extensions: readonly ["mpkg"];
        readonly source: "iana";
    };
    'application/vnd.apple.keynote': {
        readonly extensions: readonly ["key"];
        readonly source: "iana";
    };
    'application/vnd.apple.mpegurl': {
        readonly extensions: readonly ["m3u8"];
        readonly source: "iana";
    };
    'application/vnd.apple.numbers': {
        readonly extensions: readonly ["numbers"];
        readonly source: "iana";
    };
    'application/vnd.apple.pages': {
        readonly extensions: readonly ["pages"];
        readonly source: "iana";
    };
    'application/vnd.aristanetworks.swi': {
        readonly extensions: readonly ["swi"];
        readonly source: "iana";
    };
    'application/vnd.astraea-software.iota': {
        readonly extensions: readonly ["iota"];
        readonly source: "iana";
    };
    'application/vnd.audiograph': {
        readonly extensions: readonly ["aep"];
        readonly source: "iana";
    };
    'application/vnd.balsamiq.bmml+xml': {
        readonly extensions: readonly ["bmml"];
        readonly source: "iana";
    };
    'application/vnd.blueice.multipass': {
        readonly extensions: readonly ["mpm"];
        readonly source: "iana";
    };
    'application/vnd.bmi': {
        readonly extensions: readonly ["bmi"];
        readonly source: "iana";
    };
    'application/vnd.businessobjects': {
        readonly extensions: readonly ["rep"];
        readonly source: "iana";
    };
    'application/vnd.chemdraw+xml': {
        readonly extensions: readonly ["cdxml"];
        readonly source: "iana";
    };
    'application/vnd.chipnuts.karaoke-mmd': {
        readonly extensions: readonly ["mmd"];
        readonly source: "iana";
    };
    'application/vnd.cinderella': {
        readonly extensions: readonly ["cdy"];
        readonly source: "iana";
    };
    'application/vnd.citationstyles.style+xml': {
        readonly extensions: readonly ["csl"];
        readonly source: "iana";
    };
    'application/vnd.claymore': {
        readonly extensions: readonly ["cla"];
        readonly source: "iana";
    };
    'application/vnd.cloanto.rp9': {
        readonly extensions: readonly ["rp9"];
        readonly source: "iana";
    };
    'application/vnd.clonk.c4group': {
        readonly extensions: readonly ["c4g", "c4d", "c4f", "c4p", "c4u"];
        readonly source: "iana";
    };
    'application/vnd.cluetrust.cartomobile-config': {
        readonly extensions: readonly ["c11amc"];
        readonly source: "iana";
    };
    'application/vnd.cluetrust.cartomobile-config-pkg': {
        readonly extensions: readonly ["c11amz"];
        readonly source: "iana";
    };
    'application/vnd.commonspace': {
        readonly extensions: readonly ["csp"];
        readonly source: "iana";
    };
    'application/vnd.contact.cmsg': {
        readonly extensions: readonly ["cdbcmsg"];
        readonly source: "iana";
    };
    'application/vnd.cosmocaller': {
        readonly extensions: readonly ["cmc"];
        readonly source: "iana";
    };
    'application/vnd.crick.clicker': {
        readonly extensions: readonly ["clkx"];
        readonly source: "iana";
    };
    'application/vnd.crick.clicker.keyboard': {
        readonly extensions: readonly ["clkk"];
        readonly source: "iana";
    };
    'application/vnd.crick.clicker.palette': {
        readonly extensions: readonly ["clkp"];
        readonly source: "iana";
    };
    'application/vnd.crick.clicker.template': {
        readonly extensions: readonly ["clkt"];
        readonly source: "iana";
    };
    'application/vnd.crick.clicker.wordbank': {
        readonly extensions: readonly ["clkw"];
        readonly source: "iana";
    };
    'application/vnd.criticaltools.wbs+xml': {
        readonly extensions: readonly ["wbs"];
        readonly source: "iana";
    };
    'application/vnd.ctc-posml': {
        readonly extensions: readonly ["pml"];
        readonly source: "iana";
    };
    'application/vnd.cups-ppd': {
        readonly extensions: readonly ["ppd"];
        readonly source: "iana";
    };
    'application/vnd.curl.car': {
        readonly extensions: readonly ["car"];
        readonly source: "apache";
    };
    'application/vnd.curl.pcurl': {
        readonly extensions: readonly ["pcurl"];
        readonly source: "apache";
    };
    'application/vnd.dart': {
        readonly extensions: readonly ["dart"];
        readonly source: "iana";
    };
    'application/vnd.data-vision.rdz': {
        readonly extensions: readonly ["rdz"];
        readonly source: "iana";
    };
    'application/vnd.dbf': {
        readonly extensions: readonly ["dbf"];
        readonly source: "iana";
    };
    'application/vnd.dece.data': {
        readonly extensions: readonly ["uvf", "uvvf", "uvd", "uvvd"];
        readonly source: "iana";
    };
    'application/vnd.dece.ttml+xml': {
        readonly extensions: readonly ["uvt", "uvvt"];
        readonly source: "iana";
    };
    'application/vnd.dece.unspecified': {
        readonly extensions: readonly ["uvx", "uvvx"];
        readonly source: "iana";
    };
    'application/vnd.dece.zip': {
        readonly extensions: readonly ["uvz", "uvvz"];
        readonly source: "iana";
    };
    'application/vnd.denovo.fcselayout-link': {
        readonly extensions: readonly ["fe_launch"];
        readonly source: "iana";
    };
    'application/vnd.dna': {
        readonly extensions: readonly ["dna"];
        readonly source: "iana";
    };
    'application/vnd.dolby.mlp': {
        readonly extensions: readonly ["mlp"];
        readonly source: "apache";
    };
    'application/vnd.dpgraph': {
        readonly extensions: readonly ["dpg"];
        readonly source: "iana";
    };
    'application/vnd.dreamfactory': {
        readonly extensions: readonly ["dfac"];
        readonly source: "iana";
    };
    'application/vnd.ds-keypoint': {
        readonly extensions: readonly ["kpxx"];
        readonly source: "apache";
    };
    'application/vnd.dvb.ait': {
        readonly extensions: readonly ["ait"];
        readonly source: "iana";
    };
    'application/vnd.dvb.service': {
        readonly extensions: readonly ["svc"];
        readonly source: "iana";
    };
    'application/vnd.dynageo': {
        readonly extensions: readonly ["geo"];
        readonly source: "iana";
    };
    'application/vnd.ecowin.chart': {
        readonly extensions: readonly ["mag"];
        readonly source: "iana";
    };
    'application/vnd.enliven': {
        readonly extensions: readonly ["nml"];
        readonly source: "iana";
    };
    'application/vnd.epson.esf': {
        readonly extensions: readonly ["esf"];
        readonly source: "iana";
    };
    'application/vnd.epson.msf': {
        readonly extensions: readonly ["msf"];
        readonly source: "iana";
    };
    'application/vnd.epson.quickanime': {
        readonly extensions: readonly ["qam"];
        readonly source: "iana";
    };
    'application/vnd.epson.salt': {
        readonly extensions: readonly ["slt"];
        readonly source: "iana";
    };
    'application/vnd.epson.ssf': {
        readonly extensions: readonly ["ssf"];
        readonly source: "iana";
    };
    'application/vnd.eszigno3+xml': {
        readonly extensions: readonly ["es3", "et3"];
        readonly source: "iana";
    };
    'application/vnd.ezpix-album': {
        readonly extensions: readonly ["ez2"];
        readonly source: "iana";
    };
    'application/vnd.ezpix-package': {
        readonly extensions: readonly ["ez3"];
        readonly source: "iana";
    };
    'application/vnd.fdf': {
        readonly extensions: readonly ["fdf"];
        readonly source: "iana";
    };
    'application/vnd.fdsn.mseed': {
        readonly extensions: readonly ["mseed"];
        readonly source: "iana";
    };
    'application/vnd.fdsn.seed': {
        readonly extensions: readonly ["seed", "dataless"];
        readonly source: "iana";
    };
    'application/vnd.flographit': {
        readonly extensions: readonly ["gph"];
        readonly source: "iana";
    };
    'application/vnd.fluxtime.clip': {
        readonly extensions: readonly ["ftc"];
        readonly source: "iana";
    };
    'application/vnd.framemaker': {
        readonly extensions: readonly ["fm", "frame", "maker", "book"];
        readonly source: "iana";
    };
    'application/vnd.frogans.fnc': {
        readonly extensions: readonly ["fnc"];
        readonly source: "iana";
    };
    'application/vnd.frogans.ltf': {
        readonly extensions: readonly ["ltf"];
        readonly source: "iana";
    };
    'application/vnd.fsc.weblaunch': {
        readonly extensions: readonly ["fsc"];
        readonly source: "iana";
    };
    'application/vnd.fujitsu.oasys': {
        readonly extensions: readonly ["oas"];
        readonly source: "iana";
    };
    'application/vnd.fujitsu.oasys2': {
        readonly extensions: readonly ["oa2"];
        readonly source: "iana";
    };
    'application/vnd.fujitsu.oasys3': {
        readonly extensions: readonly ["oa3"];
        readonly source: "iana";
    };
    'application/vnd.fujitsu.oasysgp': {
        readonly extensions: readonly ["fg5"];
        readonly source: "iana";
    };
    'application/vnd.fujitsu.oasysprs': {
        readonly extensions: readonly ["bh2"];
        readonly source: "iana";
    };
    'application/vnd.fujixerox.ddd': {
        readonly extensions: readonly ["ddd"];
        readonly source: "iana";
    };
    'application/vnd.fujixerox.docuworks': {
        readonly extensions: readonly ["xdw"];
        readonly source: "iana";
    };
    'application/vnd.fujixerox.docuworks.binder': {
        readonly extensions: readonly ["xbd"];
        readonly source: "iana";
    };
    'application/vnd.fuzzysheet': {
        readonly extensions: readonly ["fzs"];
        readonly source: "iana";
    };
    'application/vnd.genomatix.tuxedo': {
        readonly extensions: readonly ["txd"];
        readonly source: "iana";
    };
    'application/vnd.geogebra.file': {
        readonly extensions: readonly ["ggb"];
        readonly source: "iana";
    };
    'application/vnd.geogebra.tool': {
        readonly extensions: readonly ["ggt"];
        readonly source: "iana";
    };
    'application/vnd.geometry-explorer': {
        readonly extensions: readonly ["gex", "gre"];
        readonly source: "iana";
    };
    'application/vnd.geonext': {
        readonly extensions: readonly ["gxt"];
        readonly source: "iana";
    };
    'application/vnd.geoplan': {
        readonly extensions: readonly ["g2w"];
        readonly source: "iana";
    };
    'application/vnd.geospace': {
        readonly extensions: readonly ["g3w"];
        readonly source: "iana";
    };
    'application/vnd.gmx': {
        readonly extensions: readonly ["gmx"];
        readonly source: "iana";
    };
    'application/vnd.google-earth.kml+xml': {
        readonly extensions: readonly ["kml"];
        readonly source: "iana";
    };
    'application/vnd.google-earth.kmz': {
        readonly extensions: readonly ["kmz"];
        readonly source: "iana";
    };
    'application/vnd.grafeq': {
        readonly extensions: readonly ["gqf", "gqs"];
        readonly source: "iana";
    };
    'application/vnd.groove-account': {
        readonly extensions: readonly ["gac"];
        readonly source: "iana";
    };
    'application/vnd.groove-help': {
        readonly extensions: readonly ["ghf"];
        readonly source: "iana";
    };
    'application/vnd.groove-identity-message': {
        readonly extensions: readonly ["gim"];
        readonly source: "iana";
    };
    'application/vnd.groove-injector': {
        readonly extensions: readonly ["grv"];
        readonly source: "iana";
    };
    'application/vnd.groove-tool-message': {
        readonly extensions: readonly ["gtm"];
        readonly source: "iana";
    };
    'application/vnd.groove-tool-template': {
        readonly extensions: readonly ["tpl"];
        readonly source: "iana";
    };
    'application/vnd.groove-vcard': {
        readonly extensions: readonly ["vcg"];
        readonly source: "iana";
    };
    'application/vnd.hal+xml': {
        readonly extensions: readonly ["hal"];
        readonly source: "iana";
    };
    'application/vnd.handheld-entertainment+xml': {
        readonly extensions: readonly ["zmm"];
        readonly source: "iana";
    };
    'application/vnd.hbci': {
        readonly extensions: readonly ["hbci"];
        readonly source: "iana";
    };
    'application/vnd.hhe.lesson-player': {
        readonly extensions: readonly ["les"];
        readonly source: "iana";
    };
    'application/vnd.hp-hpgl': {
        readonly extensions: readonly ["hpgl"];
        readonly source: "iana";
    };
    'application/vnd.hp-hpid': {
        readonly extensions: readonly ["hpid"];
        readonly source: "iana";
    };
    'application/vnd.hp-hps': {
        readonly extensions: readonly ["hps"];
        readonly source: "iana";
    };
    'application/vnd.hp-jlyt': {
        readonly extensions: readonly ["jlt"];
        readonly source: "iana";
    };
    'application/vnd.hp-pcl': {
        readonly extensions: readonly ["pcl"];
        readonly source: "iana";
    };
    'application/vnd.hp-pclxl': {
        readonly extensions: readonly ["pclxl"];
        readonly source: "iana";
    };
    'application/vnd.hydrostatix.sof-data': {
        readonly extensions: readonly ["sfd-hdstx"];
        readonly source: "iana";
    };
    'application/vnd.ibm.minipay': {
        readonly extensions: readonly ["mpy"];
        readonly source: "iana";
    };
    'application/vnd.ibm.modcap': {
        readonly extensions: readonly ["afp", "listafp", "list3820"];
        readonly source: "iana";
    };
    'application/vnd.ibm.rights-management': {
        readonly extensions: readonly ["irm"];
        readonly source: "iana";
    };
    'application/vnd.ibm.secure-container': {
        readonly extensions: readonly ["sc"];
        readonly source: "iana";
    };
    'application/vnd.iccprofile': {
        readonly extensions: readonly ["icc", "icm"];
        readonly source: "iana";
    };
    'application/vnd.igloader': {
        readonly extensions: readonly ["igl"];
        readonly source: "iana";
    };
    'application/vnd.immervision-ivp': {
        readonly extensions: readonly ["ivp"];
        readonly source: "iana";
    };
    'application/vnd.immervision-ivu': {
        readonly extensions: readonly ["ivu"];
        readonly source: "iana";
    };
    'application/vnd.insors.igm': {
        readonly extensions: readonly ["igm"];
        readonly source: "iana";
    };
    'application/vnd.intercon.formnet': {
        readonly extensions: readonly ["xpw", "xpx"];
        readonly source: "iana";
    };
    'application/vnd.intergeo': {
        readonly extensions: readonly ["i2g"];
        readonly source: "iana";
    };
    'application/vnd.intu.qbo': {
        readonly extensions: readonly ["qbo"];
        readonly source: "iana";
    };
    'application/vnd.intu.qfx': {
        readonly extensions: readonly ["qfx"];
        readonly source: "iana";
    };
    'application/vnd.ipunplugged.rcprofile': {
        readonly extensions: readonly ["rcprofile"];
        readonly source: "iana";
    };
    'application/vnd.irepository.package+xml': {
        readonly extensions: readonly ["irp"];
        readonly source: "iana";
    };
    'application/vnd.is-xpr': {
        readonly extensions: readonly ["xpr"];
        readonly source: "iana";
    };
    'application/vnd.isac.fcs': {
        readonly extensions: readonly ["fcs"];
        readonly source: "iana";
    };
    'application/vnd.jam': {
        readonly extensions: readonly ["jam"];
        readonly source: "iana";
    };
    'application/vnd.jcp.javame.midlet-rms': {
        readonly extensions: readonly ["rms"];
        readonly source: "iana";
    };
    'application/vnd.jisp': {
        readonly extensions: readonly ["jisp"];
        readonly source: "iana";
    };
    'application/vnd.joost.joda-archive': {
        readonly extensions: readonly ["joda"];
        readonly source: "iana";
    };
    'application/vnd.kahootz': {
        readonly extensions: readonly ["ktz", "ktr"];
        readonly source: "iana";
    };
    'application/vnd.kde.karbon': {
        readonly extensions: readonly ["karbon"];
        readonly source: "iana";
    };
    'application/vnd.kde.kchart': {
        readonly extensions: readonly ["chrt"];
        readonly source: "iana";
    };
    'application/vnd.kde.kformula': {
        readonly extensions: readonly ["kfo"];
        readonly source: "iana";
    };
    'application/vnd.kde.kivio': {
        readonly extensions: readonly ["flw"];
        readonly source: "iana";
    };
    'application/vnd.kde.kontour': {
        readonly extensions: readonly ["kon"];
        readonly source: "iana";
    };
    'application/vnd.kde.kpresenter': {
        readonly extensions: readonly ["kpr", "kpt"];
        readonly source: "iana";
    };
    'application/vnd.kde.kspread': {
        readonly extensions: readonly ["ksp"];
        readonly source: "iana";
    };
    'application/vnd.kde.kword': {
        readonly extensions: readonly ["kwd", "kwt"];
        readonly source: "iana";
    };
    'application/vnd.kenameaapp': {
        readonly extensions: readonly ["htke"];
        readonly source: "iana";
    };
    'application/vnd.kidspiration': {
        readonly extensions: readonly ["kia"];
        readonly source: "iana";
    };
    'application/vnd.kinar': {
        readonly extensions: readonly ["kne", "knp"];
        readonly source: "iana";
    };
    'application/vnd.koan': {
        readonly extensions: readonly ["skp", "skd", "skt", "skm"];
        readonly source: "iana";
    };
    'application/vnd.kodak-descriptor': {
        readonly extensions: readonly ["sse"];
        readonly source: "iana";
    };
    'application/vnd.las.las+xml': {
        readonly extensions: readonly ["lasxml"];
        readonly source: "iana";
    };
    'application/vnd.llamagraphics.life-balance.desktop': {
        readonly extensions: readonly ["lbd"];
        readonly source: "iana";
    };
    'application/vnd.llamagraphics.life-balance.exchange+xml': {
        readonly extensions: readonly ["lbe"];
        readonly source: "iana";
    };
    'application/vnd.lotus-1-2-3': {
        readonly extensions: readonly ["123"];
        readonly source: "iana";
    };
    'application/vnd.lotus-approach': {
        readonly extensions: readonly ["apr"];
        readonly source: "iana";
    };
    'application/vnd.lotus-freelance': {
        readonly extensions: readonly ["pre"];
        readonly source: "iana";
    };
    'application/vnd.lotus-notes': {
        readonly extensions: readonly ["nsf"];
        readonly source: "iana";
    };
    'application/vnd.lotus-organizer': {
        readonly extensions: readonly ["org"];
        readonly source: "iana";
    };
    'application/vnd.lotus-screencam': {
        readonly extensions: readonly ["scm"];
        readonly source: "iana";
    };
    'application/vnd.lotus-wordpro': {
        readonly extensions: readonly ["lwp"];
        readonly source: "iana";
    };
    'application/vnd.macports.portpkg': {
        readonly extensions: readonly ["portpkg"];
        readonly source: "iana";
    };
    'application/vnd.mapbox-vector-tile': {
        readonly extensions: readonly ["mvt"];
        readonly source: "iana";
    };
    'application/vnd.mcd': {
        readonly extensions: readonly ["mcd"];
        readonly source: "iana";
    };
    'application/vnd.medcalcdata': {
        readonly extensions: readonly ["mc1"];
        readonly source: "iana";
    };
    'application/vnd.mediastation.cdkey': {
        readonly extensions: readonly ["cdkey"];
        readonly source: "iana";
    };
    'application/vnd.mfer': {
        readonly extensions: readonly ["mwf"];
        readonly source: "iana";
    };
    'application/vnd.mfmp': {
        readonly extensions: readonly ["mfm"];
        readonly source: "iana";
    };
    'application/vnd.micrografx.flo': {
        readonly extensions: readonly ["flo"];
        readonly source: "iana";
    };
    'application/vnd.micrografx.igx': {
        readonly extensions: readonly ["igx"];
        readonly source: "iana";
    };
    'application/vnd.mif': {
        readonly extensions: readonly ["mif"];
        readonly source: "iana";
    };
    'application/vnd.mobius.daf': {
        readonly extensions: readonly ["daf"];
        readonly source: "iana";
    };
    'application/vnd.mobius.dis': {
        readonly extensions: readonly ["dis"];
        readonly source: "iana";
    };
    'application/vnd.mobius.mbk': {
        readonly extensions: readonly ["mbk"];
        readonly source: "iana";
    };
    'application/vnd.mobius.mqy': {
        readonly extensions: readonly ["mqy"];
        readonly source: "iana";
    };
    'application/vnd.mobius.msl': {
        readonly extensions: readonly ["msl"];
        readonly source: "iana";
    };
    'application/vnd.mobius.plc': {
        readonly extensions: readonly ["plc"];
        readonly source: "iana";
    };
    'application/vnd.mobius.txf': {
        readonly extensions: readonly ["txf"];
        readonly source: "iana";
    };
    'application/vnd.mophun.application': {
        readonly extensions: readonly ["mpn"];
        readonly source: "iana";
    };
    'application/vnd.mophun.certificate': {
        readonly extensions: readonly ["mpc"];
        readonly source: "iana";
    };
    'application/vnd.mozilla.xul+xml': {
        readonly extensions: readonly ["xul"];
        readonly source: "iana";
    };
    'application/vnd.ms-artgalry': {
        readonly extensions: readonly ["cil"];
        readonly source: "iana";
    };
    'application/vnd.ms-cab-compressed': {
        readonly extensions: readonly ["cab"];
        readonly source: "iana";
    };
    'application/vnd.ms-excel': {
        readonly extensions: readonly ["xls", "xlm", "xla", "xlc", "xlt", "xlw"];
        readonly source: "iana";
    };
    'application/vnd.ms-excel.addin.macroenabled.12': {
        readonly extensions: readonly ["xlam"];
        readonly source: "iana";
    };
    'application/vnd.ms-excel.sheet.binary.macroenabled.12': {
        readonly extensions: readonly ["xlsb"];
        readonly source: "iana";
    };
    'application/vnd.ms-excel.sheet.macroenabled.12': {
        readonly extensions: readonly ["xlsm"];
        readonly source: "iana";
    };
    'application/vnd.ms-excel.template.macroenabled.12': {
        readonly extensions: readonly ["xltm"];
        readonly source: "iana";
    };
    'application/vnd.ms-fontobject': {
        readonly extensions: readonly ["eot"];
        readonly source: "iana";
    };
    'application/vnd.ms-htmlhelp': {
        readonly extensions: readonly ["chm"];
        readonly source: "iana";
    };
    'application/vnd.ms-ims': {
        readonly extensions: readonly ["ims"];
        readonly source: "iana";
    };
    'application/vnd.ms-lrm': {
        readonly extensions: readonly ["lrm"];
        readonly source: "iana";
    };
    'application/vnd.ms-officetheme': {
        readonly extensions: readonly ["thmx"];
        readonly source: "iana";
    };
    'application/vnd.ms-pki.seccat': {
        readonly extensions: readonly ["cat"];
        readonly source: "apache";
    };
    'application/vnd.ms-pki.stl': {
        readonly extensions: readonly ["stl"];
        readonly source: "apache";
    };
    'application/vnd.ms-powerpoint': {
        readonly extensions: readonly ["ppt", "pps", "pot"];
        readonly source: "iana";
    };
    'application/vnd.ms-powerpoint.addin.macroenabled.12': {
        readonly extensions: readonly ["ppam"];
        readonly source: "iana";
    };
    'application/vnd.ms-powerpoint.presentation.macroenabled.12': {
        readonly extensions: readonly ["pptm"];
        readonly source: "iana";
    };
    'application/vnd.ms-powerpoint.slide.macroenabled.12': {
        readonly extensions: readonly ["sldm"];
        readonly source: "iana";
    };
    'application/vnd.ms-powerpoint.slideshow.macroenabled.12': {
        readonly extensions: readonly ["ppsm"];
        readonly source: "iana";
    };
    'application/vnd.ms-powerpoint.template.macroenabled.12': {
        readonly extensions: readonly ["potm"];
        readonly source: "iana";
    };
    'application/vnd.ms-project': {
        readonly extensions: readonly ["mpp", "mpt"];
        readonly source: "iana";
    };
    'application/vnd.ms-word.document.macroenabled.12': {
        readonly extensions: readonly ["docm"];
        readonly source: "iana";
    };
    'application/vnd.ms-word.template.macroenabled.12': {
        readonly extensions: readonly ["dotm"];
        readonly source: "iana";
    };
    'application/vnd.ms-works': {
        readonly extensions: readonly ["wps", "wks", "wcm", "wdb"];
        readonly source: "iana";
    };
    'application/vnd.ms-wpl': {
        readonly extensions: readonly ["wpl"];
        readonly source: "iana";
    };
    'application/vnd.ms-xpsdocument': {
        readonly extensions: readonly ["xps"];
        readonly source: "iana";
    };
    'application/vnd.mseq': {
        readonly extensions: readonly ["mseq"];
        readonly source: "iana";
    };
    'application/vnd.musician': {
        readonly extensions: readonly ["mus"];
        readonly source: "iana";
    };
    'application/vnd.muvee.style': {
        readonly extensions: readonly ["msty"];
        readonly source: "iana";
    };
    'application/vnd.mynfc': {
        readonly extensions: readonly ["taglet"];
        readonly source: "iana";
    };
    'application/vnd.neurolanguage.nlu': {
        readonly extensions: readonly ["nlu"];
        readonly source: "iana";
    };
    'application/vnd.nitf': {
        readonly extensions: readonly ["ntf", "nitf"];
        readonly source: "iana";
    };
    'application/vnd.noblenet-directory': {
        readonly extensions: readonly ["nnd"];
        readonly source: "iana";
    };
    'application/vnd.noblenet-sealer': {
        readonly extensions: readonly ["nns"];
        readonly source: "iana";
    };
    'application/vnd.noblenet-web': {
        readonly extensions: readonly ["nnw"];
        readonly source: "iana";
    };
    'application/vnd.nokia.n-gage.ac+xml': {
        readonly extensions: readonly ["ac"];
        readonly source: "iana";
    };
    'application/vnd.nokia.n-gage.data': {
        readonly extensions: readonly ["ngdat"];
        readonly source: "iana";
    };
    'application/vnd.nokia.n-gage.symbian.install': {
        readonly extensions: readonly ["n-gage"];
        readonly source: "iana";
    };
    'application/vnd.nokia.radio-preset': {
        readonly extensions: readonly ["rpst"];
        readonly source: "iana";
    };
    'application/vnd.nokia.radio-presets': {
        readonly extensions: readonly ["rpss"];
        readonly source: "iana";
    };
    'application/vnd.novadigm.edm': {
        readonly extensions: readonly ["edm"];
        readonly source: "iana";
    };
    'application/vnd.novadigm.edx': {
        readonly extensions: readonly ["edx"];
        readonly source: "iana";
    };
    'application/vnd.novadigm.ext': {
        readonly extensions: readonly ["ext"];
        readonly source: "iana";
    };
    'application/vnd.oasis.opendocument.chart': {
        readonly extensions: readonly ["odc"];
        readonly source: "iana";
    };
    'application/vnd.oasis.opendocument.chart-template': {
        readonly extensions: readonly ["otc"];
        readonly source: "iana";
    };
    'application/vnd.oasis.opendocument.database': {
        readonly extensions: readonly ["odb"];
        readonly source: "iana";
    };
    'application/vnd.oasis.opendocument.formula': {
        readonly extensions: readonly ["odf"];
        readonly source: "iana";
    };
    'application/vnd.oasis.opendocument.formula-template': {
        readonly extensions: readonly ["odft"];
        readonly source: "iana";
    };
    'application/vnd.oasis.opendocument.graphics': {
        readonly extensions: readonly ["odg"];
        readonly source: "iana";
    };
    'application/vnd.oasis.opendocument.graphics-template': {
        readonly extensions: readonly ["otg"];
        readonly source: "iana";
    };
    'application/vnd.oasis.opendocument.image': {
        readonly extensions: readonly ["odi"];
        readonly source: "iana";
    };
    'application/vnd.oasis.opendocument.image-template': {
        readonly extensions: readonly ["oti"];
        readonly source: "iana";
    };
    'application/vnd.oasis.opendocument.presentation': {
        readonly extensions: readonly ["odp"];
        readonly source: "iana";
    };
    'application/vnd.oasis.opendocument.presentation-template': {
        readonly extensions: readonly ["otp"];
        readonly source: "iana";
    };
    'application/vnd.oasis.opendocument.spreadsheet': {
        readonly extensions: readonly ["ods"];
        readonly source: "iana";
    };
    'application/vnd.oasis.opendocument.spreadsheet-template': {
        readonly extensions: readonly ["ots"];
        readonly source: "iana";
    };
    'application/vnd.oasis.opendocument.text': {
        readonly extensions: readonly ["odt"];
        readonly source: "iana";
    };
    'application/vnd.oasis.opendocument.text-master': {
        readonly extensions: readonly ["odm"];
        readonly source: "iana";
    };
    'application/vnd.oasis.opendocument.text-template': {
        readonly extensions: readonly ["ott"];
        readonly source: "iana";
    };
    'application/vnd.oasis.opendocument.text-web': {
        readonly extensions: readonly ["oth"];
        readonly source: "iana";
    };
    'application/vnd.olpc-sugar': {
        readonly extensions: readonly ["xo"];
        readonly source: "iana";
    };
    'application/vnd.oma.dd2+xml': {
        readonly extensions: readonly ["dd2"];
        readonly source: "iana";
    };
    'application/vnd.openblox.game+xml': {
        readonly extensions: readonly ["obgx"];
        readonly source: "iana";
    };
    'application/vnd.openofficeorg.extension': {
        readonly extensions: readonly ["oxt"];
        readonly source: "apache";
    };
    'application/vnd.openstreetmap.data+xml': {
        readonly extensions: readonly ["osm"];
        readonly source: "iana";
    };
    'application/vnd.openxmlformats-officedocument.presentationml.presentation': {
        readonly extensions: readonly ["pptx"];
        readonly source: "iana";
    };
    'application/vnd.openxmlformats-officedocument.presentationml.slide': {
        readonly extensions: readonly ["sldx"];
        readonly source: "iana";
    };
    'application/vnd.openxmlformats-officedocument.presentationml.slideshow': {
        readonly extensions: readonly ["ppsx"];
        readonly source: "iana";
    };
    'application/vnd.openxmlformats-officedocument.presentationml.template': {
        readonly extensions: readonly ["potx"];
        readonly source: "iana";
    };
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {
        readonly extensions: readonly ["xlsx"];
        readonly source: "iana";
    };
    'application/vnd.openxmlformats-officedocument.spreadsheetml.template': {
        readonly extensions: readonly ["xltx"];
        readonly source: "iana";
    };
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document': {
        readonly extensions: readonly ["docx"];
        readonly source: "iana";
    };
    'application/vnd.openxmlformats-officedocument.wordprocessingml.template': {
        readonly extensions: readonly ["dotx"];
        readonly source: "iana";
    };
    'application/vnd.osgeo.mapguide.package': {
        readonly extensions: readonly ["mgp"];
        readonly source: "iana";
    };
    'application/vnd.osgi.dp': {
        readonly extensions: readonly ["dp"];
        readonly source: "iana";
    };
    'application/vnd.osgi.subsystem': {
        readonly extensions: readonly ["esa"];
        readonly source: "iana";
    };
    'application/vnd.palm': {
        readonly extensions: readonly ["pdb", "pqa", "oprc"];
        readonly source: "iana";
    };
    'application/vnd.pawaafile': {
        readonly extensions: readonly ["paw"];
        readonly source: "iana";
    };
    'application/vnd.pg.format': {
        readonly extensions: readonly ["str"];
        readonly source: "iana";
    };
    'application/vnd.pg.osasli': {
        readonly extensions: readonly ["ei6"];
        readonly source: "iana";
    };
    'application/vnd.picsel': {
        readonly extensions: readonly ["efif"];
        readonly source: "iana";
    };
    'application/vnd.pmi.widget': {
        readonly extensions: readonly ["wg"];
        readonly source: "iana";
    };
    'application/vnd.pocketlearn': {
        readonly extensions: readonly ["plf"];
        readonly source: "iana";
    };
    'application/vnd.powerbuilder6': {
        readonly extensions: readonly ["pbd"];
        readonly source: "iana";
    };
    'application/vnd.previewsystems.box': {
        readonly extensions: readonly ["box"];
        readonly source: "iana";
    };
    'application/vnd.proteus.magazine': {
        readonly extensions: readonly ["mgz"];
        readonly source: "iana";
    };
    'application/vnd.publishare-delta-tree': {
        readonly extensions: readonly ["qps"];
        readonly source: "iana";
    };
    'application/vnd.pvi.ptid1': {
        readonly extensions: readonly ["ptid"];
        readonly source: "iana";
    };
    'application/vnd.quark.quarkxpress': {
        readonly extensions: readonly ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"];
        readonly source: "iana";
    };
    'application/vnd.rar': {
        readonly extensions: readonly ["rar"];
        readonly source: "iana";
    };
    'application/vnd.realvnc.bed': {
        readonly extensions: readonly ["bed"];
        readonly source: "iana";
    };
    'application/vnd.recordare.musicxml': {
        readonly extensions: readonly ["mxl"];
        readonly source: "iana";
    };
    'application/vnd.recordare.musicxml+xml': {
        readonly extensions: readonly ["musicxml"];
        readonly source: "iana";
    };
    'application/vnd.rig.cryptonote': {
        readonly extensions: readonly ["cryptonote"];
        readonly source: "iana";
    };
    'application/vnd.rim.cod': {
        readonly extensions: readonly ["cod"];
        readonly source: "apache";
    };
    'application/vnd.rn-realmedia': {
        readonly extensions: readonly ["rm"];
        readonly source: "apache";
    };
    'application/vnd.rn-realmedia-vbr': {
        readonly extensions: readonly ["rmvb"];
        readonly source: "apache";
    };
    'application/vnd.route66.link66+xml': {
        readonly extensions: readonly ["link66"];
        readonly source: "iana";
    };
    'application/vnd.sailingtracker.track': {
        readonly extensions: readonly ["st"];
        readonly source: "iana";
    };
    'application/vnd.seemail': {
        readonly extensions: readonly ["see"];
        readonly source: "iana";
    };
    'application/vnd.sema': {
        readonly extensions: readonly ["sema"];
        readonly source: "iana";
    };
    'application/vnd.semd': {
        readonly extensions: readonly ["semd"];
        readonly source: "iana";
    };
    'application/vnd.semf': {
        readonly extensions: readonly ["semf"];
        readonly source: "iana";
    };
    'application/vnd.shana.informed.formdata': {
        readonly extensions: readonly ["ifm"];
        readonly source: "iana";
    };
    'application/vnd.shana.informed.formtemplate': {
        readonly extensions: readonly ["itp"];
        readonly source: "iana";
    };
    'application/vnd.shana.informed.interchange': {
        readonly extensions: readonly ["iif"];
        readonly source: "iana";
    };
    'application/vnd.shana.informed.package': {
        readonly extensions: readonly ["ipk"];
        readonly source: "iana";
    };
    'application/vnd.simtech-mindmapper': {
        readonly extensions: readonly ["twd", "twds"];
        readonly source: "iana";
    };
    'application/vnd.smaf': {
        readonly extensions: readonly ["mmf"];
        readonly source: "iana";
    };
    'application/vnd.smart.teacher': {
        readonly extensions: readonly ["teacher"];
        readonly source: "iana";
    };
    'application/vnd.software602.filler.form+xml': {
        readonly extensions: readonly ["fo"];
        readonly source: "iana";
    };
    'application/vnd.solent.sdkm+xml': {
        readonly extensions: readonly ["sdkm", "sdkd"];
        readonly source: "iana";
    };
    'application/vnd.spotfire.dxp': {
        readonly extensions: readonly ["dxp"];
        readonly source: "iana";
    };
    'application/vnd.spotfire.sfs': {
        readonly extensions: readonly ["sfs"];
        readonly source: "iana";
    };
    'application/vnd.stardivision.calc': {
        readonly extensions: readonly ["sdc"];
        readonly source: "apache";
    };
    'application/vnd.stardivision.draw': {
        readonly extensions: readonly ["sda"];
        readonly source: "apache";
    };
    'application/vnd.stardivision.impress': {
        readonly extensions: readonly ["sdd"];
        readonly source: "apache";
    };
    'application/vnd.stardivision.math': {
        readonly extensions: readonly ["smf"];
        readonly source: "apache";
    };
    'application/vnd.stardivision.writer': {
        readonly extensions: readonly ["sdw", "vor"];
        readonly source: "apache";
    };
    'application/vnd.stardivision.writer-global': {
        readonly extensions: readonly ["sgl"];
        readonly source: "apache";
    };
    'application/vnd.stepmania.package': {
        readonly extensions: readonly ["smzip"];
        readonly source: "iana";
    };
    'application/vnd.stepmania.stepchart': {
        readonly extensions: readonly ["sm"];
        readonly source: "iana";
    };
    'application/vnd.sun.wadl+xml': {
        readonly extensions: readonly ["wadl"];
        readonly source: "iana";
    };
    'application/vnd.sun.xml.calc': {
        readonly extensions: readonly ["sxc"];
        readonly source: "apache";
    };
    'application/vnd.sun.xml.calc.template': {
        readonly extensions: readonly ["stc"];
        readonly source: "apache";
    };
    'application/vnd.sun.xml.draw': {
        readonly extensions: readonly ["sxd"];
        readonly source: "apache";
    };
    'application/vnd.sun.xml.draw.template': {
        readonly extensions: readonly ["std"];
        readonly source: "apache";
    };
    'application/vnd.sun.xml.impress': {
        readonly extensions: readonly ["sxi"];
        readonly source: "apache";
    };
    'application/vnd.sun.xml.impress.template': {
        readonly extensions: readonly ["sti"];
        readonly source: "apache";
    };
    'application/vnd.sun.xml.math': {
        readonly extensions: readonly ["sxm"];
        readonly source: "apache";
    };
    'application/vnd.sun.xml.writer': {
        readonly extensions: readonly ["sxw"];
        readonly source: "apache";
    };
    'application/vnd.sun.xml.writer.global': {
        readonly extensions: readonly ["sxg"];
        readonly source: "apache";
    };
    'application/vnd.sun.xml.writer.template': {
        readonly extensions: readonly ["stw"];
        readonly source: "apache";
    };
    'application/vnd.sus-calendar': {
        readonly extensions: readonly ["sus", "susp"];
        readonly source: "iana";
    };
    'application/vnd.svd': {
        readonly extensions: readonly ["svd"];
        readonly source: "iana";
    };
    'application/vnd.symbian.install': {
        readonly extensions: readonly ["sis", "sisx"];
        readonly source: "apache";
    };
    'application/vnd.syncml+xml': {
        readonly charset: "UTF-8";
        readonly extensions: readonly ["xsm"];
        readonly source: "iana";
    };
    'application/vnd.syncml.dm+wbxml': {
        readonly charset: "UTF-8";
        readonly extensions: readonly ["bdm"];
        readonly source: "iana";
    };
    'application/vnd.syncml.dm+xml': {
        readonly charset: "UTF-8";
        readonly extensions: readonly ["xdm"];
        readonly source: "iana";
    };
    'application/vnd.syncml.dmddf+xml': {
        readonly charset: "UTF-8";
        readonly extensions: readonly ["ddf"];
        readonly source: "iana";
    };
    'application/vnd.tao.intent-module-archive': {
        readonly extensions: readonly ["tao"];
        readonly source: "iana";
    };
    'application/vnd.tcpdump.pcap': {
        readonly extensions: readonly ["pcap", "cap", "dmp"];
        readonly source: "iana";
    };
    'application/vnd.tmobile-livetv': {
        readonly extensions: readonly ["tmo"];
        readonly source: "iana";
    };
    'application/vnd.trid.tpt': {
        readonly extensions: readonly ["tpt"];
        readonly source: "iana";
    };
    'application/vnd.triscape.mxs': {
        readonly extensions: readonly ["mxs"];
        readonly source: "iana";
    };
    'application/vnd.trueapp': {
        readonly extensions: readonly ["tra"];
        readonly source: "iana";
    };
    'application/vnd.ufdl': {
        readonly extensions: readonly ["ufd", "ufdl"];
        readonly source: "iana";
    };
    'application/vnd.uiq.theme': {
        readonly extensions: readonly ["utz"];
        readonly source: "iana";
    };
    'application/vnd.umajin': {
        readonly extensions: readonly ["umj"];
        readonly source: "iana";
    };
    'application/vnd.unity': {
        readonly extensions: readonly ["unityweb"];
        readonly source: "iana";
    };
    'application/vnd.uoml+xml': {
        readonly extensions: readonly ["uoml"];
        readonly source: "iana";
    };
    'application/vnd.vcx': {
        readonly extensions: readonly ["vcx"];
        readonly source: "iana";
    };
    'application/vnd.visio': {
        readonly extensions: readonly ["vsd", "vst", "vss", "vsw"];
        readonly source: "iana";
    };
    'application/vnd.visionary': {
        readonly extensions: readonly ["vis"];
        readonly source: "iana";
    };
    'application/vnd.vsf': {
        readonly extensions: readonly ["vsf"];
        readonly source: "iana";
    };
    'application/vnd.wap.wbxml': {
        readonly charset: "UTF-8";
        readonly extensions: readonly ["wbxml"];
        readonly source: "iana";
    };
    'application/vnd.wap.wmlc': {
        readonly extensions: readonly ["wmlc"];
        readonly source: "iana";
    };
    'application/vnd.wap.wmlscriptc': {
        readonly extensions: readonly ["wmlsc"];
        readonly source: "iana";
    };
    'application/vnd.webturbo': {
        readonly extensions: readonly ["wtb"];
        readonly source: "iana";
    };
    'application/vnd.wolfram.player': {
        readonly extensions: readonly ["nbp"];
        readonly source: "iana";
    };
    'application/vnd.wordperfect': {
        readonly extensions: readonly ["wpd"];
        readonly source: "iana";
    };
    'application/vnd.wqd': {
        readonly extensions: readonly ["wqd"];
        readonly source: "iana";
    };
    'application/vnd.wt.stf': {
        readonly extensions: readonly ["stf"];
        readonly source: "iana";
    };
    'application/vnd.xara': {
        readonly extensions: readonly ["xar"];
        readonly source: "iana";
    };
    'application/vnd.xfdl': {
        readonly extensions: readonly ["xfdl"];
        readonly source: "iana";
    };
    'application/vnd.yamaha.hv-dic': {
        readonly extensions: readonly ["hvd"];
        readonly source: "iana";
    };
    'application/vnd.yamaha.hv-script': {
        readonly extensions: readonly ["hvs"];
        readonly source: "iana";
    };
    'application/vnd.yamaha.hv-voice': {
        readonly extensions: readonly ["hvp"];
        readonly source: "iana";
    };
    'application/vnd.yamaha.openscoreformat': {
        readonly extensions: readonly ["osf"];
        readonly source: "iana";
    };
    'application/vnd.yamaha.openscoreformat.osfpvg+xml': {
        readonly extensions: readonly ["osfpvg"];
        readonly source: "iana";
    };
    'application/vnd.yamaha.smaf-audio': {
        readonly extensions: readonly ["saf"];
        readonly source: "iana";
    };
    'application/vnd.yamaha.smaf-phrase': {
        readonly extensions: readonly ["spf"];
        readonly source: "iana";
    };
    'application/vnd.yellowriver-custom-menu': {
        readonly extensions: readonly ["cmp"];
        readonly source: "iana";
    };
    'application/vnd.zul': {
        readonly extensions: readonly ["zir", "zirz"];
        readonly source: "iana";
    };
    'application/vnd.zzazz.deck+xml': {
        readonly extensions: readonly ["zaz"];
        readonly source: "iana";
    };
    'application/voicexml+xml': {
        readonly extensions: readonly ["vxml"];
        readonly source: "iana";
    };
    'application/wasm': {
        readonly extensions: readonly ["wasm"];
        readonly source: "iana";
    };
    'application/watcherinfo+xml': {
        readonly extensions: readonly ["wif"];
        readonly source: "iana";
    };
    'application/widget': {
        readonly extensions: readonly ["wgt"];
        readonly source: "iana";
    };
    'application/winhlp': {
        readonly extensions: readonly ["hlp"];
        readonly source: "apache";
    };
    'application/wsdl+xml': {
        readonly extensions: readonly ["wsdl"];
        readonly source: "iana";
    };
    'application/wspolicy+xml': {
        readonly extensions: readonly ["wspolicy"];
        readonly source: "iana";
    };
    'application/x-7z-compressed': {
        readonly extensions: readonly ["7z"];
        readonly source: "apache";
    };
    'application/x-abiword': {
        readonly extensions: readonly ["abw"];
        readonly source: "apache";
    };
    'application/x-ace-compressed': {
        readonly extensions: readonly ["ace"];
        readonly source: "apache";
    };
    'application/x-apple-diskimage': {
        readonly extensions: readonly ["dmg"];
        readonly source: "apache";
    };
    'application/x-authorware-bin': {
        readonly extensions: readonly ["aab", "x32", "u32", "vox"];
        readonly source: "apache";
    };
    'application/x-authorware-map': {
        readonly extensions: readonly ["aam"];
        readonly source: "apache";
    };
    'application/x-authorware-seg': {
        readonly extensions: readonly ["aas"];
        readonly source: "apache";
    };
    'application/x-bcpio': {
        readonly extensions: readonly ["bcpio"];
        readonly source: "apache";
    };
    'application/x-bittorrent': {
        readonly extensions: readonly ["torrent"];
        readonly source: "apache";
    };
    'application/x-blorb': {
        readonly extensions: readonly ["blb", "blorb"];
        readonly source: "apache";
    };
    'application/x-bzip': {
        readonly extensions: readonly ["bz"];
        readonly source: "apache";
    };
    'application/x-bzip2': {
        readonly extensions: readonly ["bz2", "boz"];
        readonly source: "apache";
    };
    'application/x-cbr': {
        readonly extensions: readonly ["cbr", "cba", "cbt", "cbz", "cb7"];
        readonly source: "apache";
    };
    'application/x-cdlink': {
        readonly extensions: readonly ["vcd"];
        readonly source: "apache";
    };
    'application/x-cfs-compressed': {
        readonly extensions: readonly ["cfs"];
        readonly source: "apache";
    };
    'application/x-chat': {
        readonly extensions: readonly ["chat"];
        readonly source: "apache";
    };
    'application/x-chess-pgn': {
        readonly extensions: readonly ["pgn"];
        readonly source: "apache";
    };
    'application/x-cocoa': {
        readonly extensions: readonly ["cco"];
        readonly source: "nginx";
    };
    'application/x-conference': {
        readonly extensions: readonly ["nsc"];
        readonly source: "apache";
    };
    'application/x-cpio': {
        readonly extensions: readonly ["cpio"];
        readonly source: "apache";
    };
    'application/x-csh': {
        readonly extensions: readonly ["csh"];
        readonly source: "apache";
    };
    'application/x-debian-package': {
        readonly extensions: readonly ["deb", "udeb"];
        readonly source: "apache";
    };
    'application/x-dgc-compressed': {
        readonly extensions: readonly ["dgc"];
        readonly source: "apache";
    };
    'application/x-director': {
        readonly extensions: readonly ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"];
        readonly source: "apache";
    };
    'application/x-doom': {
        readonly extensions: readonly ["wad"];
        readonly source: "apache";
    };
    'application/x-dtbncx+xml': {
        readonly extensions: readonly ["ncx"];
        readonly source: "apache";
    };
    'application/x-dtbook+xml': {
        readonly extensions: readonly ["dtb"];
        readonly source: "apache";
    };
    'application/x-dtbresource+xml': {
        readonly extensions: readonly ["res"];
        readonly source: "apache";
    };
    'application/x-dvi': {
        readonly extensions: readonly ["dvi"];
        readonly source: "apache";
    };
    'application/x-envoy': {
        readonly extensions: readonly ["evy"];
        readonly source: "apache";
    };
    'application/x-eva': {
        readonly extensions: readonly ["eva"];
        readonly source: "apache";
    };
    'application/x-font-bdf': {
        readonly extensions: readonly ["bdf"];
        readonly source: "apache";
    };
    'application/x-font-ghostscript': {
        readonly extensions: readonly ["gsf"];
        readonly source: "apache";
    };
    'application/x-font-linux-psf': {
        readonly extensions: readonly ["psf"];
        readonly source: "apache";
    };
    'application/x-font-pcf': {
        readonly extensions: readonly ["pcf"];
        readonly source: "apache";
    };
    'application/x-font-snf': {
        readonly extensions: readonly ["snf"];
        readonly source: "apache";
    };
    'application/x-font-type1': {
        readonly extensions: readonly ["pfa", "pfb", "pfm", "afm"];
        readonly source: "apache";
    };
    'application/x-freearc': {
        readonly extensions: readonly ["arc"];
        readonly source: "apache";
    };
    'application/x-futuresplash': {
        readonly extensions: readonly ["spl"];
        readonly source: "apache";
    };
    'application/x-gca-compressed': {
        readonly extensions: readonly ["gca"];
        readonly source: "apache";
    };
    'application/x-glulx': {
        readonly extensions: readonly ["ulx"];
        readonly source: "apache";
    };
    'application/x-gnumeric': {
        readonly extensions: readonly ["gnumeric"];
        readonly source: "apache";
    };
    'application/x-gramps-xml': {
        readonly extensions: readonly ["gramps"];
        readonly source: "apache";
    };
    'application/x-gtar': {
        readonly extensions: readonly ["gtar"];
        readonly source: "apache";
    };
    'application/x-hdf': {
        readonly extensions: readonly ["hdf"];
        readonly source: "apache";
    };
    'application/x-install-instructions': {
        readonly extensions: readonly ["install"];
        readonly source: "apache";
    };
    'application/x-iso9660-image': {
        readonly extensions: readonly ["iso"];
        readonly source: "apache";
    };
    'application/x-java-archive-diff': {
        readonly extensions: readonly ["jardiff"];
        readonly source: "nginx";
    };
    'application/x-java-jnlp-file': {
        readonly extensions: readonly ["jnlp"];
        readonly source: "apache";
    };
    'application/x-latex': {
        readonly extensions: readonly ["latex"];
        readonly source: "apache";
    };
    'application/x-lzh-compressed': {
        readonly extensions: readonly ["lzh", "lha"];
        readonly source: "apache";
    };
    'application/x-makeself': {
        readonly extensions: readonly ["run"];
        readonly source: "nginx";
    };
    'application/x-mie': {
        readonly extensions: readonly ["mie"];
        readonly source: "apache";
    };
    'application/x-mobipocket-ebook': {
        readonly extensions: readonly ["prc", "mobi"];
        readonly source: "apache";
    };
    'application/x-ms-application': {
        readonly extensions: readonly ["application"];
        readonly source: "apache";
    };
    'application/x-ms-shortcut': {
        readonly extensions: readonly ["lnk"];
        readonly source: "apache";
    };
    'application/x-ms-wmd': {
        readonly extensions: readonly ["wmd"];
        readonly source: "apache";
    };
    'application/x-ms-wmz': {
        readonly extensions: readonly ["wmz"];
        readonly source: "apache";
    };
    'application/x-ms-xbap': {
        readonly extensions: readonly ["xbap"];
        readonly source: "apache";
    };
    'application/x-msaccess': {
        readonly extensions: readonly ["mdb"];
        readonly source: "apache";
    };
    'application/x-msbinder': {
        readonly extensions: readonly ["obd"];
        readonly source: "apache";
    };
    'application/x-mscardfile': {
        readonly extensions: readonly ["crd"];
        readonly source: "apache";
    };
    'application/x-msclip': {
        readonly extensions: readonly ["clp"];
        readonly source: "apache";
    };
    'application/x-msdownload': {
        readonly extensions: readonly ["exe", "dll", "com", "bat", "msi"];
        readonly source: "apache";
    };
    'application/x-msmediaview': {
        readonly extensions: readonly ["mvb", "m13", "m14"];
        readonly source: "apache";
    };
    'application/x-msmetafile': {
        readonly extensions: readonly ["wmf", "wmz", "emf", "emz"];
        readonly source: "apache";
    };
    'application/x-msmoney': {
        readonly extensions: readonly ["mny"];
        readonly source: "apache";
    };
    'application/x-mspublisher': {
        readonly extensions: readonly ["pub"];
        readonly source: "apache";
    };
    'application/x-msschedule': {
        readonly extensions: readonly ["scd"];
        readonly source: "apache";
    };
    'application/x-msterminal': {
        readonly extensions: readonly ["trm"];
        readonly source: "apache";
    };
    'application/x-mswrite': {
        readonly extensions: readonly ["wri"];
        readonly source: "apache";
    };
    'application/x-netcdf': {
        readonly extensions: readonly ["nc", "cdf"];
        readonly source: "apache";
    };
    'application/x-nzb': {
        readonly extensions: readonly ["nzb"];
        readonly source: "apache";
    };
    'application/x-perl': {
        readonly extensions: readonly ["pl", "pm"];
        readonly source: "nginx";
    };
    'application/x-pilot': {
        readonly extensions: readonly ["prc", "pdb"];
        readonly source: "nginx";
    };
    'application/x-pkcs7-certificates': {
        readonly extensions: readonly ["p7b", "spc"];
        readonly source: "apache";
    };
    'application/x-pkcs7-certreqresp': {
        readonly extensions: readonly ["p7r"];
        readonly source: "apache";
    };
    'application/x-pkcs12': {
        readonly extensions: readonly ["p12", "pfx"];
        readonly source: "apache";
    };
    'application/x-rar-compressed': {
        readonly extensions: readonly ["rar"];
        readonly source: "apache";
    };
    'application/x-redhat-package-manager': {
        readonly extensions: readonly ["rpm"];
        readonly source: "nginx";
    };
    'application/x-research-info-systems': {
        readonly extensions: readonly ["ris"];
        readonly source: "apache";
    };
    'application/x-sea': {
        readonly extensions: readonly ["sea"];
        readonly source: "nginx";
    };
    'application/x-sh': {
        readonly extensions: readonly ["sh"];
        readonly source: "apache";
    };
    'application/x-shar': {
        readonly extensions: readonly ["shar"];
        readonly source: "apache";
    };
    'application/x-shockwave-flash': {
        readonly extensions: readonly ["swf"];
        readonly source: "apache";
    };
    'application/x-silverlight-app': {
        readonly extensions: readonly ["xap"];
        readonly source: "apache";
    };
    'application/x-sql': {
        readonly extensions: readonly ["sql"];
        readonly source: "apache";
    };
    'application/x-stuffit': {
        readonly extensions: readonly ["sit"];
        readonly source: "apache";
    };
    'application/x-stuffitx': {
        readonly extensions: readonly ["sitx"];
        readonly source: "apache";
    };
    'application/x-subrip': {
        readonly extensions: readonly ["srt"];
        readonly source: "apache";
    };
    'application/x-sv4cpio': {
        readonly extensions: readonly ["sv4cpio"];
        readonly source: "apache";
    };
    'application/x-sv4crc': {
        readonly extensions: readonly ["sv4crc"];
        readonly source: "apache";
    };
    'application/x-t3vm-image': {
        readonly extensions: readonly ["t3"];
        readonly source: "apache";
    };
    'application/x-tads': {
        readonly extensions: readonly ["gam"];
        readonly source: "apache";
    };
    'application/x-tar': {
        readonly extensions: readonly ["tar"];
        readonly source: "apache";
    };
    'application/x-tcl': {
        readonly extensions: readonly ["tcl", "tk"];
        readonly source: "apache";
    };
    'application/x-tex': {
        readonly extensions: readonly ["tex"];
        readonly source: "apache";
    };
    'application/x-tex-tfm': {
        readonly extensions: readonly ["tfm"];
        readonly source: "apache";
    };
    'application/x-texinfo': {
        readonly extensions: readonly ["texinfo", "texi"];
        readonly source: "apache";
    };
    'application/x-tgif': {
        readonly extensions: readonly ["obj"];
        readonly source: "apache";
    };
    'application/x-ustar': {
        readonly extensions: readonly ["ustar"];
        readonly source: "apache";
    };
    'application/x-wais-source': {
        readonly extensions: readonly ["src"];
        readonly source: "apache";
    };
    'application/x-x509-ca-cert': {
        readonly extensions: readonly ["der", "crt", "pem"];
        readonly source: "iana";
    };
    'application/x-xfig': {
        readonly extensions: readonly ["fig"];
        readonly source: "apache";
    };
    'application/x-xliff+xml': {
        readonly extensions: readonly ["xlf"];
        readonly source: "apache";
    };
    'application/x-xpinstall': {
        readonly extensions: readonly ["xpi"];
        readonly source: "apache";
    };
    'application/x-xz': {
        readonly extensions: readonly ["xz"];
        readonly source: "apache";
    };
    'application/x-zmachine': {
        readonly extensions: readonly ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"];
        readonly source: "apache";
    };
    'application/xaml+xml': {
        readonly extensions: readonly ["xaml"];
        readonly source: "apache";
    };
    'application/xcap-att+xml': {
        readonly extensions: readonly ["xav"];
        readonly source: "iana";
    };
    'application/xcap-caps+xml': {
        readonly extensions: readonly ["xca"];
        readonly source: "iana";
    };
    'application/xcap-diff+xml': {
        readonly extensions: readonly ["xdf"];
        readonly source: "iana";
    };
    'application/xcap-el+xml': {
        readonly extensions: readonly ["xel"];
        readonly source: "iana";
    };
    'application/xcap-ns+xml': {
        readonly extensions: readonly ["xns"];
        readonly source: "iana";
    };
    'application/xenc+xml': {
        readonly extensions: readonly ["xenc"];
        readonly source: "iana";
    };
    'application/xhtml+xml': {
        readonly extensions: readonly ["xhtml", "xht"];
        readonly source: "iana";
    };
    'application/xliff+xml': {
        readonly extensions: readonly ["xlf"];
        readonly source: "iana";
    };
    'application/xml': {
        readonly extensions: readonly ["xml", "xsl", "xsd", "rng"];
        readonly source: "iana";
    };
    'application/xml-dtd': {
        readonly extensions: readonly ["dtd"];
        readonly source: "iana";
    };
    'application/xop+xml': {
        readonly extensions: readonly ["xop"];
        readonly source: "iana";
    };
    'application/xproc+xml': {
        readonly extensions: readonly ["xpl"];
        readonly source: "apache";
    };
    'application/xslt+xml': {
        readonly extensions: readonly ["xsl", "xslt"];
        readonly source: "iana";
    };
    'application/xspf+xml': {
        readonly extensions: readonly ["xspf"];
        readonly source: "apache";
    };
    'application/xv+xml': {
        readonly extensions: readonly ["mxml", "xhvml", "xvml", "xvm"];
        readonly source: "iana";
    };
    'application/yaml': {
        readonly extensions: readonly ["yaml", "yml"];
        readonly source: "iana";
    };
    'application/yang': {
        readonly extensions: readonly ["yang"];
        readonly source: "iana";
    };
    'application/yin+xml': {
        readonly extensions: readonly ["yin"];
        readonly source: "iana";
    };
    'application/zip': {
        readonly extensions: readonly ["zip"];
        readonly source: "iana";
    };
};
type MimeType = keyof typeof mimes;
declare const ALLOWED_FILE_TYPES: readonly ["image", "video", "audio", "pdf", "text", "blob"];
type AllowedFileType = (typeof ALLOWED_FILE_TYPES)[number];
type FileRouterInputKey = AllowedFileType | MimeType;

declare enum UploadErrorCode {
    INVALID_FILE_TYPE = 400,
    TOO_MANY_FILES = 402,
    INVALID_FILE_SIZE = 403,
    TOO_LESS_FILES = 405,
    TOO_LARGE = 413
}
type FileSize = `${PowOf2}${SizeUnit}`;
type MediaItemConfig = {
    mediaType: MediaKeys;
    maxFileCount?: number;
    maxFileSize?: FileSize;
    minFileCount?: number;
};
type MediaKeys = typeof AudioPlugin.key | typeof FilePlugin.key | typeof ImagePlugin.key | typeof VideoPlugin.key;
type SizeUnit = 'B' | 'GB' | 'KB' | 'MB';
type UploadError = {
    code: UploadErrorCode.INVALID_FILE_SIZE;
    data: {
        files: File[];
    };
} | {
    code: UploadErrorCode.INVALID_FILE_TYPE;
    data: {
        allowedTypes: string[];
        files: File[];
    };
} | {
    code: UploadErrorCode.TOO_LARGE;
    data: {
        files: File[];
        fileType: AllowedFileType;
        maxFileSize: string;
    };
} | {
    code: UploadErrorCode.TOO_LESS_FILES;
    data: {
        files: File[];
        fileType: AllowedFileType;
        minFileCount: number;
    };
} | {
    code: UploadErrorCode.TOO_MANY_FILES;
    data: {
        files: File[];
        fileType: AllowedFileType | null;
        maxFileCount: number;
    };
};
type PowOf2 = 1 | 2 | 4 | 8 | 16 | 32 | 64 | 128 | 256 | 512 | 1024;

type PlaceholderApi = {
    addUploadingFile: (id: string, file: File) => void;
    getUploadingFile: (id: string) => File | undefined;
    removeUploadingFile: (id: string) => void;
};
type PlaceholderTransforms = {
    insertMedia: (files: FileList, options?: InsertNodesOptions) => void;
};
type UploadConfig = Partial<Record<AllowedFileType, MediaItemConfig>>;
declare const PlaceholderPlugin: _udecode_plate_core_react.PlatePlugin<_udecode_plate_core.PluginConfig<"placeholder", MediaPlaceholderOptions & {
    disableEmptyPlaceholder: boolean;
    disableFileDrop: boolean;
    uploadConfig: UploadConfig;
    uploadingFiles: Record<string, File>;
    error?: UploadError | null;
    maxFileCount?: number;
    multiple?: boolean;
}, {
    placeholder: PlaceholderApi;
} & Record<"placeholder", {
    addUploadingFile: (id: string, file: File) => void;
    getUploadingFile: (id: string) => File;
    removeUploadingFile: (id: string) => void;
}>, {
    insert: {
        media: (files: FileList, options?: (Omit<InsertNodesOptions, "at"> & {
            at?: _udecode_slate.Path;
        }) | undefined) => any;
    };
}, {}>>;

interface PlaceholderStore {
    isUploading: boolean;
    progresses: Progresses;
    size: {
        height: number;
        width: number;
    } | null;
    updatedFiles: File[];
}
type Progresses = Record<string, number>;
declare const PlaceholderProvider: React$1.FC<jotai_x.ProviderProps<{
    isUploading: boolean;
    progresses: Progresses;
    size: {
        height: number;
        width: number;
    } | null;
    updatedFiles: File[];
}>>;
declare const placeholderStore: jotai_x.StoreApi<PlaceholderStore, object, "placeholder">;
declare const usePlaceholderSet: <K extends keyof PlaceholderStore>(key: K, options?: string | jotai_x.UseAtomOptions) => ({
    isUploading: jotai_x.SimpleWritableAtom<boolean>;
    progresses: jotai_x.SimpleWritableAtom<Progresses>;
    size: jotai_x.SimpleWritableAtom<{
        height: number;
        width: number;
    } | null>;
    updatedFiles: jotai_x.SimpleWritableAtom<File[]>;
} & object)[K] extends jotai.WritableAtom<infer _V, infer A extends unknown[], infer R> ? (...args: A) => R : never;
declare const usePlaceholderState: <K extends keyof PlaceholderStore>(key: K, options?: string | jotai_x.UseAtomOptions) => ({
    isUploading: jotai_x.SimpleWritableAtom<boolean>;
    progresses: jotai_x.SimpleWritableAtom<Progresses>;
    size: jotai_x.SimpleWritableAtom<{
        height: number;
        width: number;
    } | null>;
    updatedFiles: jotai_x.SimpleWritableAtom<File[]>;
} & object)[K] extends jotai.WritableAtom<infer V, infer A extends unknown[], infer R> ? [V, (...args: A) => R] : never;
declare const usePlaceholderStore: jotai_x.UseStoreApi<PlaceholderStore, object>;
declare const usePlaceholderValue: <K extends keyof PlaceholderStore, S = ({
    isUploading: jotai_x.SimpleWritableAtom<boolean>;
    progresses: jotai_x.SimpleWritableAtom<Progresses>;
    size: jotai_x.SimpleWritableAtom<{
        height: number;
        width: number;
    } | null>;
    updatedFiles: jotai_x.SimpleWritableAtom<File[]>;
} & object)[K] extends jotai.Atom<infer V> ? V : never>(key: K, options?: ({
    selector?: ((v: ({
        isUploading: jotai_x.SimpleWritableAtom<boolean>;
        progresses: jotai_x.SimpleWritableAtom<Progresses>;
        size: jotai_x.SimpleWritableAtom<{
            height: number;
            width: number;
        } | null>;
        updatedFiles: jotai_x.SimpleWritableAtom<File[]>;
    } & object)[K] extends jotai.Atom<infer V_1> ? V_1 : never, prevSelectorOutput?: S | undefined) => S) | undefined;
    equalityFn?: ((prev: S, next: S) => boolean) | undefined;
} & jotai_x.UseAtomOptions) | undefined, deps?: unknown[]) => S;

declare const usePlaceholderElementState: () => {
    editor: {
        api: _udecode_slate.EditorApi & _udecode_utils.UnionToIntersection<_udecode_plate_core.InferApi<_udecode_plate_core_react.PlateCorePlugin>>;
        pluginList: _udecode_plate_core_react.AnyEditorPlatePlugin[];
        plugins: Record<string, _udecode_plate_core_react.AnyEditorPlatePlugin>;
        shortcuts: _udecode_plate_core_react.Shortcuts;
        tf: _udecode_slate.EditorTransforms & _udecode_utils.UnionToIntersection<_udecode_plate_core.InferTransforms<_udecode_plate_core_react.PlateCorePlugin>>;
        transforms: _udecode_slate.EditorTransforms & _udecode_utils.UnionToIntersection<_udecode_plate_core.InferTransforms<_udecode_plate_core_react.PlateCorePlugin>>;
        getApi: <C extends _udecode_plate_core.AnyPluginConfig = _udecode_plate_core.PluginConfig>(plugin?: _udecode_plate_core.WithRequiredKey<C>) => _udecode_plate_core_react.PlateEditor["api"] & _udecode_plate_core.InferApi<C>;
        getPlugin: <C extends _udecode_plate_core.AnyPluginConfig = _udecode_plate_core.PluginConfig>(plugin: _udecode_plate_core.WithRequiredKey<C>) => C extends {
            node: any;
        } ? C : _udecode_plate_core_react.EditorPlatePlugin<C>;
        getTransforms: <C extends _udecode_plate_core.AnyPluginConfig = _udecode_plate_core.PluginConfig>(plugin?: _udecode_plate_core.WithRequiredKey<C>) => _udecode_plate_core_react.PlateEditor["tf"] & _udecode_plate_core.InferTransforms<C>;
        uid?: string;
    } & {
        id: any;
        children: _udecode_slate.Value;
        history: _udecode_slate.History;
        marks: _udecode_slate.EditorMarks | null;
        operations: _udecode_slate.Operation<_udecode_slate.TElement | _udecode_slate.TText>[];
        selection: _udecode_slate.EditorSelection;
    } & _udecode_slate.EditorMethods<_udecode_slate.Value> & _udecode_utils.UnknownObject & {
        key: any;
        currentKeyboardEvent: is_hotkey.KeyboardEventLike | null;
        isFallback: boolean;
        pluginList: any[];
        plugins: Record<string, any>;
        prevSelection: _udecode_slate.TRange | null;
        setOptions: {
            <C extends _udecode_plate_core.AnyPluginConfig>(plugin: _udecode_plate_core.WithRequiredKey<C>, options: (state: mutative.Draft<Partial<_udecode_plate_core.InferOptions<C>>>) => void): void;
            <C extends _udecode_plate_core.AnyPluginConfig>(plugin: _udecode_plate_core.WithRequiredKey<C>, options: Partial<_udecode_plate_core.InferOptions<C>>): void;
        };
        getInjectProps: <C extends _udecode_plate_core.AnyPluginConfig = _udecode_plate_core.PluginConfig>(plugin: _udecode_plate_core.WithRequiredKey<C>) => _udecode_plate_core.InjectNodeProps<C>;
        getOption: <C extends _udecode_plate_core.AnyPluginConfig, StateType extends _udecode_plate_core.InferOptions<C>, TSelectors extends _udecode_plate_core.InferSelectors<C>, K extends keyof StateType | keyof TSelectors | "state">(plugin: _udecode_plate_core.WithRequiredKey<C>, key: K, ...args: K extends keyof TSelectors ? Parameters<TSelectors[K]> : []) => K extends "state" ? StateType : K extends keyof TSelectors ? ReturnType<TSelectors[K]> : K extends keyof StateType ? StateType[K] : never;
        getOptions: <C extends _udecode_plate_core.AnyPluginConfig = _udecode_plate_core.PluginConfig>(plugin: _udecode_plate_core.WithRequiredKey<C>) => _udecode_plate_core.InferOptions<C>;
        getOptionsStore: <C extends _udecode_plate_core.AnyPluginConfig>(plugin: _udecode_plate_core.WithRequiredKey<C>) => zustand_x.TStateApi<_udecode_plate_core.InferOptions<C>, [["zustand/mutative-x", never]], {}, _udecode_plate_core.InferSelectors<C>>;
        getPlugin: <C extends _udecode_plate_core.AnyPluginConfig = _udecode_plate_core.PluginConfig>(plugin: _udecode_plate_core.WithRequiredKey<C>) => C extends {
            node: any;
        } ? C : _udecode_plate_core.EditorPlugin<C>;
        getType: (plugin: _udecode_plate_core.WithRequiredKey) => string;
        setOption: <C extends _udecode_plate_core.AnyPluginConfig, K extends keyof _udecode_plate_core.InferOptions<C>>(plugin: _udecode_plate_core.WithRequiredKey<C>, optionKey: K, value: _udecode_plate_core.InferOptions<C>[K]) => void;
    } & {
        store: _udecode_plate_core_react.PlateStore;
    };
    element: _udecode_slate.TElement;
    focused: boolean;
    isUploading: boolean;
    mediaType: string;
    progresses: {
        [x: string]: number;
    };
    progressing: boolean;
    readOnly: boolean;
    selected: boolean;
    setSize: (args_0: {
        height: number;
        width: number;
    } | null) => void;
    updatedFiles: File[];
};

declare const usePlaceholderPopoverState: () => {
    id: unknown;
    editor: {
        api: _udecode_slate.EditorApi & _udecode_utils.UnionToIntersection<_udecode_plate_core.InferApi<_udecode_plate_core_react.PlateCorePlugin>>;
        pluginList: _udecode_plate_core_react.AnyEditorPlatePlugin[];
        plugins: Record<string, _udecode_plate_core_react.AnyEditorPlatePlugin>;
        shortcuts: _udecode_plate_core_react.Shortcuts;
        tf: _udecode_slate.EditorTransforms & _udecode_utils.UnionToIntersection<_udecode_plate_core.InferTransforms<_udecode_plate_core_react.PlateCorePlugin>>;
        transforms: _udecode_slate.EditorTransforms & _udecode_utils.UnionToIntersection<_udecode_plate_core.InferTransforms<_udecode_plate_core_react.PlateCorePlugin>>;
        getApi: <C extends _udecode_plate_core.AnyPluginConfig = _udecode_plate_core.PluginConfig>(plugin?: _udecode_plate_core.WithRequiredKey<C>) => _udecode_plate_core_react.PlateEditor["api"] & _udecode_plate_core.InferApi<C>;
        getPlugin: <C extends _udecode_plate_core.AnyPluginConfig = _udecode_plate_core.PluginConfig>(plugin: _udecode_plate_core.WithRequiredKey<C>) => C extends {
            node: any;
        } ? C : _udecode_plate_core_react.EditorPlatePlugin<C>;
        getTransforms: <C extends _udecode_plate_core.AnyPluginConfig = _udecode_plate_core.PluginConfig>(plugin?: _udecode_plate_core.WithRequiredKey<C>) => _udecode_plate_core_react.PlateEditor["tf"] & _udecode_plate_core.InferTransforms<C>;
        uid?: string;
    } & {
        id: any;
        children: _udecode_slate.Value;
        history: _udecode_slate.History;
        marks: _udecode_slate.EditorMarks | null;
        operations: _udecode_slate.Operation<_udecode_slate.TElement | _udecode_slate.TText>[];
        selection: _udecode_slate.EditorSelection;
    } & _udecode_slate.EditorMethods<_udecode_slate.Value> & _udecode_utils.UnknownObject & {
        key: any;
        currentKeyboardEvent: is_hotkey.KeyboardEventLike | null;
        isFallback: boolean;
        pluginList: any[];
        plugins: Record<string, any>;
        prevSelection: _udecode_slate.TRange | null;
        setOptions: {
            <C extends _udecode_plate_core.AnyPluginConfig>(plugin: _udecode_plate_core.WithRequiredKey<C>, options: (state: mutative.Draft<Partial<_udecode_plate_core.InferOptions<C>>>) => void): void;
            <C extends _udecode_plate_core.AnyPluginConfig>(plugin: _udecode_plate_core.WithRequiredKey<C>, options: Partial<_udecode_plate_core.InferOptions<C>>): void;
        };
        getInjectProps: <C extends _udecode_plate_core.AnyPluginConfig = _udecode_plate_core.PluginConfig>(plugin: _udecode_plate_core.WithRequiredKey<C>) => _udecode_plate_core.InjectNodeProps<C>;
        getOption: <C extends _udecode_plate_core.AnyPluginConfig, StateType extends _udecode_plate_core.InferOptions<C>, TSelectors extends _udecode_plate_core.InferSelectors<C>, K extends keyof StateType | keyof TSelectors | "state">(plugin: _udecode_plate_core.WithRequiredKey<C>, key: K, ...args: K extends keyof TSelectors ? Parameters<TSelectors[K]> : []) => K extends "state" ? StateType : K extends keyof TSelectors ? ReturnType<TSelectors[K]> : K extends keyof StateType ? StateType[K] : never;
        getOptions: <C extends _udecode_plate_core.AnyPluginConfig = _udecode_plate_core.PluginConfig>(plugin: _udecode_plate_core.WithRequiredKey<C>) => _udecode_plate_core.InferOptions<C>;
        getOptionsStore: <C extends _udecode_plate_core.AnyPluginConfig>(plugin: _udecode_plate_core.WithRequiredKey<C>) => zustand_x.TStateApi<_udecode_plate_core.InferOptions<C>, [["zustand/mutative-x", never]], {}, _udecode_plate_core.InferSelectors<C>>;
        getPlugin: <C extends _udecode_plate_core.AnyPluginConfig = _udecode_plate_core.PluginConfig>(plugin: _udecode_plate_core.WithRequiredKey<C>) => C extends {
            node: any;
        } ? C : _udecode_plate_core.EditorPlugin<C>;
        getType: (plugin: _udecode_plate_core.WithRequiredKey) => string;
        setOption: <C extends _udecode_plate_core.AnyPluginConfig, K extends keyof _udecode_plate_core.InferOptions<C>>(plugin: _udecode_plate_core.WithRequiredKey<C>, optionKey: K, value: _udecode_plate_core.InferOptions<C>[K]) => void;
    } & {
        store: _udecode_plate_core_react.PlateStore;
    };
    element: TPlaceholderElement;
    focused: boolean;
    mediaType: string;
    readOnly: boolean;
    selected: boolean;
    selectionCollapsed: boolean;
    setIsUploading: (args_0: boolean) => void;
    setProgresses: (args_0: {
        [x: string]: number;
    }) => void;
    setUpdatedFiles: (args_0: File[]) => void;
    size: {
        height: number;
        width: number;
    } | null;
};

declare const insertMedia: (editor: PlateEditor, files: FileList, options?: Omit<InsertNodesOptions, "at"> & {
    at?: Path;
}) => any;

type ErrorDataType<T extends UploadErrorCode> = Extract<UploadError, {
    code: T;
}>['data'];
declare const createUploadError: <T extends UploadErrorCode>(code: T, data: ErrorDataType<T>) => UploadError;
declare const isUploadError: (error: unknown) => error is UploadError;

declare const FILESIZE_UNITS: readonly ["B", "KB", "MB", "GB"];
type FileSizeUnit = (typeof FILESIZE_UNITS)[number];
declare const fileSizeToBytes: (fileSize: FileSize, file: File) => number;
declare const bytesToFileSize: (bytes: number) => string;

declare const getMediaType: (file: File, config: UploadConfig) => MediaKeys;

declare const groupFilesByType: (fileList: FileList, config: UploadConfig) => Record<AllowedFileType, File[]>;

declare const withHistoryMark: (editor: PlateEditor, fn: () => void) => void;
declare const isHistoryMarking: (editor: PlateEditor) => boolean;
declare const updateUploadHistory: (editor: PlateEditor, node: TElement) => void;

declare const matchFileType: (file: File, allowedTypes: FileRouterInputKey[]) => FileRouterInputKey;

declare const validateFileItem: (files: File[], config: MediaItemConfig, key: AllowedFileType) => UploadErrorCode | true;

declare const validateFiles: (fileList: FileList, config: UploadConfig) => void;

export { AudioPlugin, FILESIZE_UNITS, FilePlugin, type FileSize, type FileSizeUnit, FloatingMedia, FloatingMediaEditButton, FloatingMediaStore, FloatingMediaUrlInput, Image, ImagePlugin, ImagePreviewStore, MediaEmbedPlugin, type MediaItemConfig, type MediaKeys, MediaProvider, type PlaceholderApi, PlaceholderPlugin, PlaceholderProvider, type PlaceholderTransforms, PreviewImage, type PreviewItem, type SizeUnit, type UploadConfig, type UploadError, UploadErrorCode, VideoPlugin, bytesToFileSize, createUploadError, fileSizeToBytes, getMediaType, groupFilesByType, insertMedia, isHistoryMarking, isUploadError, matchFileType, mediaStore, openImagePreview, placeholderStore, submitFloatingMedia, updateUploadHistory, useFloatingMediaEditButton, useFloatingMediaState, useFloatingMediaUrlInput, useFloatingMediaUrlInputState, useFloatingMediaValue, useImage, useImagePreview, useImagePreviewValue, useMediaController, useMediaControllerDropDownMenu, useMediaControllerState, useMediaSet, useMediaState, useMediaStore, useMediaToolbarButton, useMediaValue, usePlaceholderElementState, usePlaceholderPopoverState, usePlaceholderSet, usePlaceholderState, usePlaceholderStore, usePlaceholderValue, usePreviewImage, useScaleInput, useZoom, validateFileItem, validateFiles, withHistoryMark };
