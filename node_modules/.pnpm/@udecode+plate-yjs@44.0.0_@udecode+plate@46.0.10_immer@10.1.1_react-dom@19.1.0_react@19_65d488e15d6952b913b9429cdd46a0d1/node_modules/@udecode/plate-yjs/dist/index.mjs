// src/lib/BaseYjsPlugin.ts
import { HocuspocusProvider } from "@hocuspocus/provider";
import { createTSlatePlugin } from "@udecode/plate";

// src/lib/withPlateYjs.ts
import * as Y from "yjs";

// src/lib/withTCursors.ts
import {
  withCursors
} from "@slate-yjs/core";
var withTCursors = (editor, awareness, options) => withCursors(editor, awareness, options);

// src/lib/withTYHistory.ts
import {
  withYHistory
} from "@slate-yjs/core";
var withTYHistory = (editor, options) => withYHistory(editor, options);

// src/lib/withTYjs.ts
import { withYjs } from "@slate-yjs/core";
var withTYjs = (editor, sharedRoot, options) => withYjs(editor, sharedRoot, options);

// src/lib/withPlateYjs.ts
var withPlateYjs = ({
  editor: e,
  getOptions
}) => {
  const editor = e;
  const { cursorOptions, disableCursors, provider, yjsOptions } = getOptions();
  const sharedType = provider.document.get(
    "content",
    Y.XmlText
  );
  if (disableCursors) {
    return withTYHistory(
      withTYjs(editor, sharedType, {
        autoConnect: false,
        ...yjsOptions
      })
    );
  }
  return withTYHistory(
    withTCursors(
      withTYjs(editor, sharedType, {
        autoConnect: false,
        ...yjsOptions
      }),
      provider.awareness,
      cursorOptions
    )
  );
};

// src/lib/BaseYjsPlugin.ts
var BaseYjsPlugin = createTSlatePlugin({
  key: "yjs",
  extendEditor: withPlateYjs,
  options: {
    isConnected: false,
    isSynced: false,
    provider: {}
  }
}).extend(({ getOptions, setOption }) => {
  const { hocuspocusProviderOptions } = getOptions();
  if (!hocuspocusProviderOptions) {
    throw new Error("HocuspocusProvider configuration is required");
  }
  const provider = new HocuspocusProvider({
    ...hocuspocusProviderOptions,
    onAwarenessChange() {
    },
    onConnect() {
      setOption("isConnected", true);
      hocuspocusProviderOptions.onConnect?.();
    },
    onDisconnect(data) {
      setOption("isConnected", false);
      setOption("isSynced", false);
      hocuspocusProviderOptions.onDisconnect?.(data);
    },
    onSynced(data) {
      setOption("isSynced", true);
      hocuspocusProviderOptions.onSynced?.(data);
    }
  });
  return {
    options: { provider }
  };
});
export {
  BaseYjsPlugin,
  withPlateYjs,
  withTCursors,
  withTYHistory,
  withTYjs
};
//# sourceMappingURL=index.mjs.map