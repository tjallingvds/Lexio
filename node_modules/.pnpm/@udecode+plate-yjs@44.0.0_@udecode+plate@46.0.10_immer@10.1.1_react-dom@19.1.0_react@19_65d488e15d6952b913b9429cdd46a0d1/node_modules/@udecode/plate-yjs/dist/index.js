"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  BaseYjsPlugin: () => BaseYjsPlugin,
  withPlateYjs: () => withPlateYjs,
  withTCursors: () => withTCursors,
  withTYHistory: () => withTYHistory,
  withTYjs: () => withTYjs
});
module.exports = __toCommonJS(index_exports);

// src/lib/BaseYjsPlugin.ts
var import_provider = require("@hocuspocus/provider");
var import_plate = require("@udecode/plate");

// src/lib/withPlateYjs.ts
var Y = __toESM(require("yjs"));

// src/lib/withTCursors.ts
var import_core = require("@slate-yjs/core");
var withTCursors = (editor, awareness, options) => (0, import_core.withCursors)(editor, awareness, options);

// src/lib/withTYHistory.ts
var import_core2 = require("@slate-yjs/core");
var withTYHistory = (editor, options) => (0, import_core2.withYHistory)(editor, options);

// src/lib/withTYjs.ts
var import_core3 = require("@slate-yjs/core");
var withTYjs = (editor, sharedRoot, options) => (0, import_core3.withYjs)(editor, sharedRoot, options);

// src/lib/withPlateYjs.ts
var withPlateYjs = ({
  editor: e,
  getOptions
}) => {
  const editor = e;
  const { cursorOptions, disableCursors, provider, yjsOptions } = getOptions();
  const sharedType = provider.document.get(
    "content",
    Y.XmlText
  );
  if (disableCursors) {
    return withTYHistory(
      withTYjs(editor, sharedType, {
        autoConnect: false,
        ...yjsOptions
      })
    );
  }
  return withTYHistory(
    withTCursors(
      withTYjs(editor, sharedType, {
        autoConnect: false,
        ...yjsOptions
      }),
      provider.awareness,
      cursorOptions
    )
  );
};

// src/lib/BaseYjsPlugin.ts
var BaseYjsPlugin = (0, import_plate.createTSlatePlugin)({
  key: "yjs",
  extendEditor: withPlateYjs,
  options: {
    isConnected: false,
    isSynced: false,
    provider: {}
  }
}).extend(({ getOptions, setOption }) => {
  const { hocuspocusProviderOptions } = getOptions();
  if (!hocuspocusProviderOptions) {
    throw new Error("HocuspocusProvider configuration is required");
  }
  const provider = new import_provider.HocuspocusProvider({
    ...hocuspocusProviderOptions,
    onAwarenessChange() {
    },
    onConnect() {
      setOption("isConnected", true);
      hocuspocusProviderOptions.onConnect?.();
    },
    onDisconnect(data) {
      setOption("isConnected", false);
      setOption("isSynced", false);
      hocuspocusProviderOptions.onDisconnect?.(data);
    },
    onSynced(data) {
      setOption("isSynced", true);
      hocuspocusProviderOptions.onSynced?.(data);
    }
  });
  return {
    options: { provider }
  };
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BaseYjsPlugin,
  withPlateYjs,
  withTCursors,
  withTYHistory,
  withTYjs
});
//# sourceMappingURL=index.js.map