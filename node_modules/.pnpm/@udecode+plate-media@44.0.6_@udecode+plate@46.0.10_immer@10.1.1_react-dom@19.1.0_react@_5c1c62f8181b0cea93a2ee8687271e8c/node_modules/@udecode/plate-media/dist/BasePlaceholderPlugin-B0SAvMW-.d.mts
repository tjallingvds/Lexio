import { TElement, PluginConfig } from '@udecode/plate';
import * as _udecode_plate_core from '@udecode/plate-core';
import * as _udecode_slate from '@udecode/slate';

type EmbedUrlData = {
    id?: string;
    provider?: string;
    url?: string;
};
type EmbedUrlParser = (url: string) => EmbedUrlData | undefined;
declare const parseMediaUrl: (url: string, { urlParsers, }: {
    urlParsers: EmbedUrlParser[];
}) => EmbedUrlData | undefined;

interface MediaPluginOptions {
    isUrl?: (text: string) => boolean;
    /** Transforms the url. */
    transformUrl?: (url: string) => string;
}
interface TMediaElement extends TElement {
    url: string;
    id?: string;
    align?: 'center' | 'left' | 'right';
    isUpload?: boolean;
    name?: string;
    placeholderId?: string;
}

interface MediaPlaceholderOptions {
    rules?: PlaceholderRule[];
}
type PlaceholderConfig = PluginConfig<'placeholder', MediaPlaceholderOptions>;
interface PlaceholderRule {
    mediaType: string;
}
interface TPlaceholderElement extends TElement {
    mediaType: string;
}
declare const BasePlaceholderPlugin: _udecode_plate_core.SlatePlugin<PluginConfig<"placeholder", MediaPlaceholderOptions, {}, {
    insert: {
        audioPlaceholder: (options?: _udecode_slate.InsertNodesOptions | undefined) => void;
        filePlaceholder: (options?: _udecode_slate.InsertNodesOptions | undefined) => void;
        imagePlaceholder: (options?: _udecode_slate.InsertNodesOptions | undefined) => void;
        videoPlaceholder: (options?: _udecode_slate.InsertNodesOptions | undefined) => void;
    };
}, {}>>;

export { BasePlaceholderPlugin as B, type EmbedUrlData as E, type MediaPluginOptions as M, type PlaceholderConfig as P, type TMediaElement as T, type EmbedUrlParser as a, type MediaPlaceholderOptions as b, type PlaceholderRule as c, type TPlaceholderElement as d, parseMediaUrl as p };
