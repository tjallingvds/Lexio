import * as _udecode_plate_core from '@udecode/plate-core';
import { T as TMediaElement, M as MediaPluginOptions, E as EmbedUrlData } from './BasePlaceholderPlugin-B0SAvMW-.mjs';
export { B as BasePlaceholderPlugin, a as EmbedUrlParser, b as MediaPlaceholderOptions, P as PlaceholderConfig, c as PlaceholderRule, d as TPlaceholderElement, p as parseMediaUrl } from './BasePlaceholderPlugin-B0SAvMW-.mjs';
import * as _udecode_slate from '@udecode/slate';
import { InsertNodesOptions, SlateEditor, PluginConfig, OverrideEditor, SetNodesOptions } from '@udecode/plate';

interface InsertMediaOptions extends InsertNodesOptions {
    /**
     * Default onClick is getting the image url by calling this promise before
     * inserting the image.
     */
    type?: string;
    getUrl?: () => Promise<string>;
}
declare const insertMedia: <E extends SlateEditor>(editor: E, { getUrl, type, ...options }?: InsertMediaOptions) => Promise<void>;

interface TAudioElement extends TMediaElement {
}
declare const BaseAudioPlugin: _udecode_plate_core.SlatePlugin<_udecode_plate_core.PluginConfig<"audio", {}, {}, {}, {}>>;

interface TFileElement extends TMediaElement {
}
declare const BaseFilePlugin: _udecode_plate_core.SlatePlugin<_udecode_plate_core.PluginConfig<"file", {}, {}, {}, {}>>;

interface TVideoElement extends TMediaElement {
}
declare const BaseVideoPlugin: _udecode_plate_core.SlatePlugin<_udecode_plate_core.PluginConfig<"video", {}, {}, {}, {}>>;

type ImageConfig = PluginConfig<'img', {
    /** Disable url embed on insert data. */
    disableEmbedInsert?: boolean;
    /** Disable file upload on insert data. */
    disableUploadInsert?: boolean;
    /**
     * An optional method that will upload the image to a server. The method
     * receives the base64 dataUrl of the uploaded image, and should return the
     * URL of the uploaded image.
     */
    uploadImage?: (dataUrl: ArrayBuffer | string) => ArrayBuffer | Promise<ArrayBuffer | string> | string;
} & MediaPluginOptions>;
interface TImageElement extends TMediaElement {
    initialHeight?: number;
    initialWidth?: number;
}
/** Enables support for images. */
declare const BaseImagePlugin: _udecode_plate_core.SlatePlugin<PluginConfig<"img", {
    /** Disable url embed on insert data. */
    disableEmbedInsert?: boolean;
    /** Disable file upload on insert data. */
    disableUploadInsert?: boolean;
    /**
     * An optional method that will upload the image to a server. The method
     * receives the base64 dataUrl of the uploaded image, and should return the
     * URL of the uploaded image.
     */
    uploadImage?: (dataUrl: ArrayBuffer | string) => ArrayBuffer | Promise<ArrayBuffer | string> | string;
} & MediaPluginOptions, {}, {
    insert: {
        imageFromFiles: (files: FileList, options?: _udecode_slate.InsertNodesOptions | undefined) => void;
    };
}, {}>>;

/** If inserted text is image url, insert image instead. */
declare const withImageEmbed: OverrideEditor<ImageConfig>;

/**
 * Allows for pasting images from clipboard. Not yet: dragging and dropping
 * images, selecting them through a file system dialog.
 */
declare const withImageUpload: OverrideEditor<ImageConfig>;

declare const insertImage: (editor: SlateEditor, url: ArrayBuffer | string, options?: InsertNodesOptions) => void;

declare const insertImageFromFiles: (editor: SlateEditor, files: FileList, options?: InsertNodesOptions) => void;

declare const isImageUrl: (url: string) => boolean;

type MediaEmbedConfig = PluginConfig<'media_embed', MediaPluginOptions>;
interface TMediaEmbedElement extends TMediaElement {
}
/**
 * Enables support for embeddable media such as YouTube or Vimeo videos,
 * Instagram posts and tweets or Google Maps.
 */
declare const BaseMediaEmbedPlugin: _udecode_plate_core.SlatePlugin<MediaEmbedConfig>;

declare const parseIframeUrl: (url: string) => string;

declare const parseTwitterUrl: (url: string) => EmbedUrlData | undefined;

declare const VIDEO_PROVIDERS: string[];
declare const parseVideoUrl: (url: string) => EmbedUrlData | undefined;

declare const insertMediaEmbed: (editor: SlateEditor, { url }: Partial<TMediaEmbedElement>, options?: InsertNodesOptions) => void;

declare const insertPlaceholder: (editor: SlateEditor, mediaType: string, options?: InsertNodesOptions) => void;
declare const insertImagePlaceholder: (editor: SlateEditor, options?: InsertNodesOptions) => void;
declare const insertVideoPlaceholder: (editor: SlateEditor, options?: InsertNodesOptions) => void;
declare const insertAudioPlaceholder: (editor: SlateEditor, options?: InsertNodesOptions) => void;
declare const insertFilePlaceholder: (editor: SlateEditor, options?: InsertNodesOptions) => void;

type props = {
    type: string;
    url: string;
    id?: string;
    initialHeight?: number;
    initialWidth?: number;
    isUpload?: boolean;
    name?: string;
    placeholderId?: string;
    width?: number;
};
declare const setMediaNode: (editor: SlateEditor, props: props, options?: SetNodesOptions) => void;

export { BaseAudioPlugin, BaseFilePlugin, BaseImagePlugin, BaseMediaEmbedPlugin, BaseVideoPlugin, EmbedUrlData, type ImageConfig, type InsertMediaOptions, type MediaEmbedConfig, MediaPluginOptions, type TAudioElement, type TFileElement, type TImageElement, TMediaElement, type TMediaEmbedElement, type TVideoElement, VIDEO_PROVIDERS, insertAudioPlaceholder, insertFilePlaceholder, insertImage, insertImageFromFiles, insertImagePlaceholder, insertMedia, insertMediaEmbed, insertPlaceholder, insertVideoPlaceholder, isImageUrl, parseIframeUrl, parseTwitterUrl, parseVideoUrl, setMediaNode, withImageEmbed, withImageUpload };
