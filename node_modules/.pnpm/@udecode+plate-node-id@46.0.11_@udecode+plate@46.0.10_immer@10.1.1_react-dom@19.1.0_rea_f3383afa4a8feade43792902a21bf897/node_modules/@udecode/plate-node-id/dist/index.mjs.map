{"version":3,"sources":["../src/lib/NodeIdPlugin.ts","../src/lib/withNodeId.ts"],"sourcesContent":["import {\n  type Descendant,\n  type PluginConfig,\n  type QueryNodeOptions,\n  createTSlatePlugin,\n  ElementApi,\n  nanoid,\n  queryNode,\n} from '@udecode/plate';\n\nimport { withNodeId } from './withNodeId';\n\nexport type NodeIdConfig = PluginConfig<\n  'nodeId',\n  {\n    /**\n     * By default, when a node inserted using editor.tf.insertNode(s) has an id,\n     * it will be used instead of the id generator, except if it already exists\n     * in the document. Set this option to true to disable this behavior.\n     */\n    disableInsertOverrides?: boolean;\n    /**\n     * Filter inline `Element` nodes.\n     *\n     * @default true\n     */\n    filterInline?: boolean;\n    /**\n     * Filter `Text` nodes.\n     *\n     * @default true\n     */\n    filterText?: boolean;\n    /**\n     * Node key to store the id.\n     *\n     * @default 'id'\n     */\n    idKey?: string;\n    /**\n     * Normalize initial value. If false, normalize only the first and last node\n     * are missing id. To disable this behavior, use `NodeIdPlugin.configure({\n     * normalizeInitialValue: null })`.\n     *\n     * @default false\n     */\n    normalizeInitialValue?: boolean;\n    /**\n     * Reuse ids on undo/redo and copy/pasting if not existing in the document.\n     * This is disabled by default to avoid duplicate ids across documents.\n     *\n     * @default false\n     */\n    reuseId?: boolean;\n    /**\n     * ID factory, e.g. `uuid`\n     *\n     * @default () => Date.now()\n     */\n    idCreator?: () => any;\n  } & QueryNodeOptions\n>;\n\n/** @see {@link withNodeId} */\nexport const NodeIdPlugin = createTSlatePlugin<NodeIdConfig>({\n  key: 'nodeId',\n  options: {\n    filterInline: true,\n    filterText: true,\n    idKey: 'id',\n    normalizeInitialValue: false,\n    filter: () => true,\n    idCreator: () => nanoid(10),\n  },\n  normalizeInitialValue: ({ editor, getOptions }) => {\n    const {\n      allow,\n      exclude,\n      filter,\n      filterInline,\n      filterText,\n      idKey,\n      normalizeInitialValue,\n    } = getOptions();\n\n    // Perf: check if normalization is needed by looking at the first node and last node\n    if (!normalizeInitialValue) {\n      const firstNode = editor.children[0];\n      const lastNode = editor.children.at(-1);\n\n      if (firstNode?.id && lastNode?.id) {\n        return;\n      }\n    }\n\n    const addNodeId = (entry: [Descendant, number[]]) => {\n      const [node, path] = entry;\n\n      if (\n        !node[idKey!] &&\n        queryNode([node, path], {\n          allow,\n          exclude,\n          filter: (entry) => {\n            const [node] = entry;\n\n            if (filterText && !ElementApi.isElement(node)) {\n              return false;\n            }\n            if (\n              filterInline &&\n              ElementApi.isElement(node) &&\n              !editor.api.isBlock(node)\n            ) {\n              return false;\n            }\n\n            return filter!(entry);\n          },\n        })\n      ) {\n        node[idKey!] = getOptions().idCreator!();\n      }\n      // Process children in place if they exist\n      if ((node.children as any)?.length > 0) {\n        (node.children as any).forEach((child: any, index: number) => {\n          addNodeId([child, [...path, index]]);\n        });\n      }\n\n      return node;\n    };\n\n    // Process top-level nodes in place\n    editor.children.forEach((node, index) => {\n      addNodeId([node, [index]]);\n    });\n  },\n}).overrideEditor(withNodeId);\n","import {\n  type Descendant,\n  type NodeEntry,\n  type NodeProps,\n  type OverrideEditor,\n  type TNode,\n  applyDeepToNodes,\n  defaultsDeepToNodes,\n  isDefined,\n  queryNode,\n} from '@udecode/plate';\nimport castArray from 'lodash/castArray.js';\nimport cloneDeep from 'lodash/cloneDeep.js';\n\nimport type { NodeIdConfig } from './NodeIdPlugin';\n\n/** Enables support for inserting nodes with an id key. */\nexport const withNodeId: OverrideEditor<NodeIdConfig> = ({\n  editor,\n  getOptions,\n  tf: { apply, insertNode, insertNodes },\n}) => {\n  const idPropsCreator = () => ({\n    [getOptions().idKey ?? '']: getOptions().idCreator!(),\n  });\n\n  const filterNode = (nodeEntry: NodeEntry) => {\n    const { filter, filterText } = getOptions();\n\n    return (\n      filter!(nodeEntry) && (!filterText || nodeEntry[0]?.type !== undefined)\n    );\n  };\n\n  const removeIdFromNodeIfDuplicate = <N extends Descendant>(node: N) => {\n    const { idKey = '', reuseId } = getOptions();\n\n    if (\n      !reuseId &&\n      editor.api.some({ at: [], match: { [idKey]: node[idKey] } })\n    ) {\n      delete node[idKey];\n    }\n  };\n\n  const overrideIdIfSet = (node: TNode) => {\n    const { idKey = '' } = getOptions();\n\n    if (isDefined(node._id)) {\n      const id = node._id;\n      delete node._id;\n\n      if (!editor.api.some({ at: [], match: { [idKey]: id } })) {\n        node[idKey] = id;\n      }\n    }\n  };\n\n  return {\n    transforms: {\n      apply(operation) {\n        const {\n          allow,\n          disableInsertOverrides,\n          exclude,\n          idCreator,\n          idKey = '',\n          reuseId,\n        } = getOptions();\n\n        const query = {\n          allow,\n          exclude,\n          filter: filterNode,\n        };\n\n        if (operation.type === 'insert_node') {\n          // clone to be able to write (read-only)\n          const node = cloneDeep(operation.node);\n\n          // Delete ids from node that are already being used\n          applyDeepToNodes({\n            apply: removeIdFromNodeIfDuplicate,\n            node,\n            query,\n            source: {},\n          });\n\n          defaultsDeepToNodes({\n            node,\n            path: operation.path,\n            query,\n            source: idPropsCreator,\n          });\n\n          if (!disableInsertOverrides) {\n            applyDeepToNodes({\n              apply: overrideIdIfSet,\n              node,\n              query,\n              source: {},\n            });\n          }\n\n          return apply({\n            ...operation,\n            node,\n          });\n        }\n        if (operation.type === 'split_node') {\n          const node = operation.properties as NodeProps<TNode>;\n          let id = (operation.properties as any)[idKey];\n\n          // only for elements (node with a type) or all nodes if `filterText=false`\n\n          if (queryNode([node as any, operation.path], query)) {\n            /**\n             * Create a new id if:\n             *\n             * - The id in the new node is already being used in the editor or,\n             * - The node has no id\n             */\n            if (\n              !reuseId ||\n              id === undefined ||\n              editor.api.some({\n                at: [],\n                match: { [idKey]: id },\n              })\n            ) {\n              id = idCreator!();\n            }\n\n            return apply({\n              ...operation,\n              properties: {\n                ...operation.properties,\n                [idKey]: id,\n              },\n            });\n          }\n          // if the node is allowed, we don't want to use the same id\n          if (id) {\n            delete (operation.properties as any)[idKey];\n          }\n        }\n\n        return apply(operation);\n      },\n\n      insertNode(node) {\n        const { disableInsertOverrides, idKey = '' } = getOptions();\n\n        if (!disableInsertOverrides && node[idKey]) {\n          if (!Object.isExtensible(node)) {\n            node = cloneDeep(node);\n          }\n\n          node._id = node[idKey];\n        }\n\n        insertNode(node);\n      },\n\n      insertNodes(_nodes, options) {\n        const nodes = castArray<Descendant>(_nodes as any).filter(\n          (node) => !!node\n        );\n\n        if (nodes.length === 0) return;\n\n        const { disableInsertOverrides, idKey = '' } = getOptions();\n\n        insertNodes(\n          nodes.map((node) => {\n            if (!disableInsertOverrides && node[idKey]) {\n              if (!Object.isExtensible(node)) {\n                node = cloneDeep(node);\n              }\n\n              node._id = node[idKey];\n            }\n\n            return node;\n          }),\n          options\n        );\n      },\n    },\n  };\n};\n"],"mappings":";AAAA;AAAA,EAIE;AAAA,EACA;AAAA,EACA;AAAA,EACA,aAAAA;AAAA,OACK;;;ACRP;AAAA,EAME;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,OAAO,eAAe;AACtB,OAAO,eAAe;AAKf,IAAM,aAA2C,CAAC;AAAA,EACvD;AAAA,EACA;AAAA,EACA,IAAI,EAAE,OAAO,YAAY,YAAY;AACvC,MAAM;AACJ,QAAM,iBAAiB,OAAO;AAAA,IAC5B,CAAC,WAAW,EAAE,SAAS,EAAE,GAAG,WAAW,EAAE,UAAW;AAAA,EACtD;AAEA,QAAM,aAAa,CAAC,cAAyB;AAC3C,UAAM,EAAE,QAAQ,WAAW,IAAI,WAAW;AAE1C,WACE,OAAQ,SAAS,MAAM,CAAC,cAAc,UAAU,CAAC,GAAG,SAAS;AAAA,EAEjE;AAEA,QAAM,8BAA8B,CAAuB,SAAY;AACrE,UAAM,EAAE,QAAQ,IAAI,QAAQ,IAAI,WAAW;AAE3C,QACE,CAAC,WACD,OAAO,IAAI,KAAK,EAAE,IAAI,CAAC,GAAG,OAAO,EAAE,CAAC,KAAK,GAAG,KAAK,KAAK,EAAE,EAAE,CAAC,GAC3D;AACA,aAAO,KAAK,KAAK;AAAA,IACnB;AAAA,EACF;AAEA,QAAM,kBAAkB,CAAC,SAAgB;AACvC,UAAM,EAAE,QAAQ,GAAG,IAAI,WAAW;AAElC,QAAI,UAAU,KAAK,GAAG,GAAG;AACvB,YAAM,KAAK,KAAK;AAChB,aAAO,KAAK;AAEZ,UAAI,CAAC,OAAO,IAAI,KAAK,EAAE,IAAI,CAAC,GAAG,OAAO,EAAE,CAAC,KAAK,GAAG,GAAG,EAAE,CAAC,GAAG;AACxD,aAAK,KAAK,IAAI;AAAA,MAChB;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AAAA,IACL,YAAY;AAAA,MACV,MAAM,WAAW;AACf,cAAM;AAAA,UACJ;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,QAAQ;AAAA,UACR;AAAA,QACF,IAAI,WAAW;AAEf,cAAM,QAAQ;AAAA,UACZ;AAAA,UACA;AAAA,UACA,QAAQ;AAAA,QACV;AAEA,YAAI,UAAU,SAAS,eAAe;AAEpC,gBAAM,OAAO,UAAU,UAAU,IAAI;AAGrC,2BAAiB;AAAA,YACf,OAAO;AAAA,YACP;AAAA,YACA;AAAA,YACA,QAAQ,CAAC;AAAA,UACX,CAAC;AAED,8BAAoB;AAAA,YAClB;AAAA,YACA,MAAM,UAAU;AAAA,YAChB;AAAA,YACA,QAAQ;AAAA,UACV,CAAC;AAED,cAAI,CAAC,wBAAwB;AAC3B,6BAAiB;AAAA,cACf,OAAO;AAAA,cACP;AAAA,cACA;AAAA,cACA,QAAQ,CAAC;AAAA,YACX,CAAC;AAAA,UACH;AAEA,iBAAO,MAAM;AAAA,YACX,GAAG;AAAA,YACH;AAAA,UACF,CAAC;AAAA,QACH;AACA,YAAI,UAAU,SAAS,cAAc;AACnC,gBAAM,OAAO,UAAU;AACvB,cAAI,KAAM,UAAU,WAAmB,KAAK;AAI5C,cAAI,UAAU,CAAC,MAAa,UAAU,IAAI,GAAG,KAAK,GAAG;AAOnD,gBACE,CAAC,WACD,OAAO,UACP,OAAO,IAAI,KAAK;AAAA,cACd,IAAI,CAAC;AAAA,cACL,OAAO,EAAE,CAAC,KAAK,GAAG,GAAG;AAAA,YACvB,CAAC,GACD;AACA,mBAAK,UAAW;AAAA,YAClB;AAEA,mBAAO,MAAM;AAAA,cACX,GAAG;AAAA,cACH,YAAY;AAAA,gBACV,GAAG,UAAU;AAAA,gBACb,CAAC,KAAK,GAAG;AAAA,cACX;AAAA,YACF,CAAC;AAAA,UACH;AAEA,cAAI,IAAI;AACN,mBAAQ,UAAU,WAAmB,KAAK;AAAA,UAC5C;AAAA,QACF;AAEA,eAAO,MAAM,SAAS;AAAA,MACxB;AAAA,MAEA,WAAW,MAAM;AACf,cAAM,EAAE,wBAAwB,QAAQ,GAAG,IAAI,WAAW;AAE1D,YAAI,CAAC,0BAA0B,KAAK,KAAK,GAAG;AAC1C,cAAI,CAAC,OAAO,aAAa,IAAI,GAAG;AAC9B,mBAAO,UAAU,IAAI;AAAA,UACvB;AAEA,eAAK,MAAM,KAAK,KAAK;AAAA,QACvB;AAEA,mBAAW,IAAI;AAAA,MACjB;AAAA,MAEA,YAAY,QAAQ,SAAS;AAC3B,cAAM,QAAQ,UAAsB,MAAa,EAAE;AAAA,UACjD,CAAC,SAAS,CAAC,CAAC;AAAA,QACd;AAEA,YAAI,MAAM,WAAW,EAAG;AAExB,cAAM,EAAE,wBAAwB,QAAQ,GAAG,IAAI,WAAW;AAE1D;AAAA,UACE,MAAM,IAAI,CAAC,SAAS;AAClB,gBAAI,CAAC,0BAA0B,KAAK,KAAK,GAAG;AAC1C,kBAAI,CAAC,OAAO,aAAa,IAAI,GAAG;AAC9B,uBAAO,UAAU,IAAI;AAAA,cACvB;AAEA,mBAAK,MAAM,KAAK,KAAK;AAAA,YACvB;AAEA,mBAAO;AAAA,UACT,CAAC;AAAA,UACD;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;;;AD9HO,IAAM,eAAe,mBAAiC;AAAA,EAC3D,KAAK;AAAA,EACL,SAAS;AAAA,IACP,cAAc;AAAA,IACd,YAAY;AAAA,IACZ,OAAO;AAAA,IACP,uBAAuB;AAAA,IACvB,QAAQ,MAAM;AAAA,IACd,WAAW,MAAM,OAAO,EAAE;AAAA,EAC5B;AAAA,EACA,uBAAuB,CAAC,EAAE,QAAQ,WAAW,MAAM;AACjD,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI,WAAW;AAGf,QAAI,CAAC,uBAAuB;AAC1B,YAAM,YAAY,OAAO,SAAS,CAAC;AACnC,YAAM,WAAW,OAAO,SAAS,GAAG,EAAE;AAEtC,UAAI,WAAW,MAAM,UAAU,IAAI;AACjC;AAAA,MACF;AAAA,IACF;AAEA,UAAM,YAAY,CAAC,UAAkC;AACnD,YAAM,CAAC,MAAM,IAAI,IAAI;AAErB,UACE,CAAC,KAAK,KAAM,KACZC,WAAU,CAAC,MAAM,IAAI,GAAG;AAAA,QACtB;AAAA,QACA;AAAA,QACA,QAAQ,CAACC,WAAU;AACjB,gBAAM,CAACC,KAAI,IAAID;AAEf,cAAI,cAAc,CAAC,WAAW,UAAUC,KAAI,GAAG;AAC7C,mBAAO;AAAA,UACT;AACA,cACE,gBACA,WAAW,UAAUA,KAAI,KACzB,CAAC,OAAO,IAAI,QAAQA,KAAI,GACxB;AACA,mBAAO;AAAA,UACT;AAEA,iBAAO,OAAQD,MAAK;AAAA,QACtB;AAAA,MACF,CAAC,GACD;AACA,aAAK,KAAM,IAAI,WAAW,EAAE,UAAW;AAAA,MACzC;AAEA,UAAK,KAAK,UAAkB,SAAS,GAAG;AACtC,QAAC,KAAK,SAAiB,QAAQ,CAAC,OAAY,UAAkB;AAC5D,oBAAU,CAAC,OAAO,CAAC,GAAG,MAAM,KAAK,CAAC,CAAC;AAAA,QACrC,CAAC;AAAA,MACH;AAEA,aAAO;AAAA,IACT;AAGA,WAAO,SAAS,QAAQ,CAAC,MAAM,UAAU;AACvC,gBAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAAA,IAC3B,CAAC;AAAA,EACH;AACF,CAAC,EAAE,eAAe,UAAU;","names":["queryNode","queryNode","entry","node"]}