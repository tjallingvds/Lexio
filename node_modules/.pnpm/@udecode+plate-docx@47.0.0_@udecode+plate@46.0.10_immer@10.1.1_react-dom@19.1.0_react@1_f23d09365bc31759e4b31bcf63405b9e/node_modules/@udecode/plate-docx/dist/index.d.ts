import * as _udecode_plate_core from '@udecode/plate-core';
import { SlatePlugin } from '@udecode/plate';

declare const DocxPlugin: SlatePlugin<_udecode_plate_core.PluginConfig<"docx", {}, {}, {}, {}>>;

declare const cleanDocx: (html: string, rtf: string) => string;

interface RtfImage {
    hex: string;
    mimeType: string;
    spid: string;
}
type RtfImagesMap = Record<RtfImage['spid'], RtfImage>;

/** Remove HTML nodes between comments in the next sibling after BR. */
declare const cleanDocxBrComments: (rootNode: Node) => void;

/** Remove paragraph innerHTML if its child is 'O:P' with NO_BREAK_SPACE. */
declare const cleanDocxEmptyParagraphs: (rootNode: Node) => void;

/** Replace docx footnotes with sup element. */
declare const cleanDocxFootnotes: (rootNode: Node) => void;

/** Clean docx image elements. */
declare const cleanDocxImageElements: (document: Document, rtf: string, rootNode: Node) => void;

/** Clean elements style mso-list to mso-list:Ignore */
declare const cleanDocxListElements: (rootNode: Node) => void;

declare const cleanDocxListElementsToList: (rootNode: Node) => void;

/** Replace p.MsoQuote elements with blockquote. */
declare const cleanDocxQuotes: (rootNode: Node) => void;

/** Replace the element with spaces if its style includes 'mso-spacerun: yes'. */
declare const cleanDocxSpacerun: (element: Element) => void;

/** Clean docx spaceruns and tab counts. */
declare const cleanDocxSpans: (rootNode: Node) => void;

/** Replace element with tabs if its style starts with 'mso-tab-count'. */
declare const cleanDocxTabCount: (element: Element) => void;

interface Result {
    list: Element | null;
    nextSibling: Element | null;
}
declare const docxListToList: (element: Element) => Result;

declare const generateSpaces: (count: number) => string;
declare const generateTabs: (count: number) => string;

declare const getDocxSpacing: (element: Element, cssProp: string) => number;
declare const getDocxIndent: (element: Element) => number;
declare const getDocxTextIndent: (element: Element) => number;

declare const getDocxListContentHtml: (rootElement: Element) => string;

declare const getDocxListIndent: (element: Element) => number;

declare const getDocxListNode: (element: Element) => Node | null;

declare const getRtfImageHex: (imageData: string) => string | null;

declare const getRtfImageMimeType: (imageData: string) => string | null;

declare const getRtfImageSpid: (imageData: string, spidPrefix: string) => string | null;

declare const getRtfImagesByType: (rtf: string, spidPrefix: string, type: string) => RtfImage[];

declare const getRtfImagesMap: (rtf: string) => RtfImagesMap;

declare const getTextListStyleType: (text: string) => string | undefined;

declare const getVShapeSpid: (document: Document, element: Element) => string | null;

declare const getVShapes: (document: Document) => Record<string, string>;

declare const isDocxBookmark: (element: Element) => boolean;

/**
 * Check if the element contains docx content. True if one element has:
 *
 * - Style including 'mso-'
 * - ClassName including 'Mso'
 */
declare const isDocxContent: (body: HTMLElement) => boolean;

/** Is element a docx footnote. */
declare const isDocxFootnote: (element: Element) => boolean;

declare const isDocxList: (element: Element) => boolean;

declare const isDocxOl: (element: Element) => boolean;

export { DocxPlugin, type RtfImage, type RtfImagesMap, cleanDocx, cleanDocxBrComments, cleanDocxEmptyParagraphs, cleanDocxFootnotes, cleanDocxImageElements, cleanDocxListElements, cleanDocxListElementsToList, cleanDocxQuotes, cleanDocxSpacerun, cleanDocxSpans, cleanDocxTabCount, docxListToList, generateSpaces, generateTabs, getDocxIndent, getDocxListContentHtml, getDocxListIndent, getDocxListNode, getDocxSpacing, getDocxTextIndent, getRtfImageHex, getRtfImageMimeType, getRtfImageSpid, getRtfImagesByType, getRtfImagesMap, getTextListStyleType, getVShapeSpid, getVShapes, isDocxBookmark, isDocxContent, isDocxFootnote, isDocxList, isDocxOl };
