// src/createSlotComponent.tsx
import React from "react";
import { Slot } from "@radix-ui/react-slot";
var createSlotComponent = (element) => React.forwardRef(({ as, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : as || element;
  return /* @__PURE__ */ React.createElement(Comp, { ref, ...props });
});

// src/Box.tsx
var Box = createSlotComponent("div");

// src/MemoizedChildren.tsx
import React2 from "react";
var MemoizedChildren = React2.memo(
  ({ children }) => {
    return /* @__PURE__ */ React2.createElement(React2.Fragment, null, children);
  }
);

// src/PortalBody.tsx
import React3 from "react";
import ReactDOM from "react-dom";
var PortalBody = ({
  children,
  element
}) => {
  const container = element || typeof window !== "undefined" ? document.body : void 0;
  if (!container) return /* @__PURE__ */ React3.createElement(React3.Fragment, null, children);
  return ReactDOM.createPortal(children, element || document.body);
};

// src/Text.tsx
var Text = createSlotComponent("span");

// src/composeEventHandlers.ts
var composeEventHandlers = (originalEventHandler, ourEventHandler, { checkForDefaultPrevented = true } = {}) => (event) => {
  originalEventHandler?.(event);
  if (checkForDefaultPrevented === false || !event.defaultPrevented) {
    return ourEventHandler?.(event);
  }
};

// src/createPrimitiveComponent.tsx
import React5 from "react";
import { isDefined } from "@udecode/utils";
import { clsx } from "clsx";

// src/useComposedRef.ts
import React4 from "react";
var setRef = (ref, value) => {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref !== null && ref !== void 0) {
    ref.current = value;
  }
};
var composeRefs = (...refs) => (node) => refs.forEach((ref) => setRef(ref, node));
var useComposedRef = (...refs) => {
  return React4.useCallback(composeRefs(...refs), refs);
};

// src/createPrimitiveComponent.tsx
var createPrimitiveComponent = (element) => {
  const Comp = createSlotComponent(element);
  return ({
    propsHook,
    stateHook
  } = {}) => {
    return React5.forwardRef(
      ({
        asChild,
        className: classNameProp,
        getClassName,
        options,
        state: stateProp,
        ...props
      }, ref) => {
        const state = isDefined(stateProp) ? stateProp : stateHook ? stateHook(options) : void 0;
        const {
          hidden,
          props: hookProps,
          ref: hookRef
        } = propsHook ? propsHook(state) : { hidden: false, props: {}, ref: null };
        const _ref = useComposedRef(ref, hookRef);
        const className = isDefined(hookProps?.className) || isDefined(classNameProp) ? clsx(hookProps?.className, classNameProp) : void 0;
        const style = hookProps?.style || props.style ? { ...hookProps?.style, ...props.style } : void 0;
        if (!asChild && hidden) return null;
        return /* @__PURE__ */ React5.createElement(
          Comp,
          {
            ref: _ref,
            asChild,
            ...hookProps,
            className,
            style,
            ...props,
            ...props.setProps?.(hookProps ?? {}) ?? {}
          }
        );
      }
    );
  };
};

// src/createPrimitiveElement.tsx
import React6 from "react";
function createPrimitiveElement(tag) {
  return React6.forwardRef(
    function CreateComponent(props, ref) {
      return React6.createElement(tag, { ...props, ref });
    }
  );
}

// src/useEffectOnce.ts
import React7 from "react";
function useEffectOnce(effect, deps) {
  const initialized = React7.useRef(false);
  const prevDepsRef = React7.useRef(deps);
  React7.useEffect(() => {
    const depsChanged = deps.some((dep, i) => dep !== prevDepsRef.current[i]);
    if (!initialized.current || depsChanged) {
      initialized.current = true;
      prevDepsRef.current = deps;
      effect();
    }
  }, deps);
}

// src/useIsomorphicLayoutEffect.ts
import React8 from "react";
var CAN_USE_DOM = typeof window !== "undefined" && window.document?.createElement !== void 0;
var useIsomorphicLayoutEffect = CAN_USE_DOM ? React8.useLayoutEffect : React8.useEffect;

// src/useMemoOnce.ts
import React9 from "react";
function useMemoOnce(factory, deps) {
  const initialized = React9.useRef(false);
  const prevDepsRef = React9.useRef(deps);
  const memoizedValueRef = React9.useRef(void 0);
  if (!initialized.current || deps.some((dep, i) => dep !== prevDepsRef.current[i])) {
    initialized.current = true;
    prevDepsRef.current = deps;
    memoizedValueRef.current = factory();
  }
  return memoizedValueRef.current;
}

// src/useMemoizedSelector.ts
import React10 from "react";
function useMemoizedSelector(selector, deps, equalityFn = (a, b) => a === b) {
  const [memoizedValue, setMemoizedValue] = React10.useState(() => selector());
  const previousValueRef = React10.useRef(memoizedValue);
  React10.useEffect(() => {
    const newValue = selector();
    if (!equalityFn(previousValueRef.current, newValue)) {
      setMemoizedValue(newValue);
      previousValueRef.current = newValue;
    }
  }, deps);
  return memoizedValue;
}

// src/useOnClickOutside.ts
import React11 from "react";
var canUsePassiveEvents = () => {
  if (typeof window === "undefined" || typeof window.addEventListener !== "function")
    return false;
  let passive = false;
  const options = Object.defineProperty({}, "passive", {
    get() {
      passive = true;
    }
  });
  const noop = () => null;
  window.addEventListener("test", noop, options);
  window.removeEventListener("test", noop, options);
  return passive;
};
var DEFAULT_IGNORE_CLASS = "ignore-onclickoutside";
var checkClass = (el, cl) => el.classList?.contains(cl);
var hasIgnoreClass = (e, ignoreClass) => {
  let el = e.target || e;
  while (el) {
    if (Array.isArray(ignoreClass)) {
      if (ignoreClass.some((c) => checkClass(el, c))) return true;
    } else if (checkClass(el, ignoreClass)) {
      return true;
    }
    el = el.parentElement;
  }
  return false;
};
var clickedOnScrollbar = (e) => document.documentElement.clientWidth <= e.clientX || document.documentElement.clientHeight <= e.clientY;
var getEventOptions = (type) => type.includes("touch") && canUsePassiveEvents() ? { passive: true } : false;
var useOnClickOutside = (callback, {
  detectIFrame = true,
  disabled,
  eventTypes = ["mousedown", "touchstart"],
  excludeScrollbar,
  ignoreClass = DEFAULT_IGNORE_CLASS,
  refs: refsOpt
} = {}) => {
  const [refsState, setRefsState] = React11.useState([]);
  const callbackRef = React11.useRef(callback);
  callbackRef.current = callback;
  const ref = React11.useCallback(
    (el) => setRefsState((prevState) => [...prevState, { current: el }]),
    []
  );
  React11.useEffect(
    () => {
      if (!refsOpt?.length && refsState.length === 0) return;
      const getEls = () => {
        const els = [];
        (refsOpt || refsState).forEach(
          ({ current }) => current && els.push(current)
        );
        return els;
      };
      const handler = (e) => {
        if (!hasIgnoreClass(e, ignoreClass) && !(excludeScrollbar && clickedOnScrollbar(e)) && getEls().every((el) => !el.contains(e.target)))
          callbackRef.current(e);
      };
      const blurHandler = (e) => (
        // On firefox the iframe becomes document.activeElement in the next event loop
        setTimeout(() => {
          const { activeElement } = document;
          if (activeElement?.tagName === "IFRAME" && !hasIgnoreClass(activeElement, ignoreClass) && !getEls().includes(activeElement))
            callbackRef.current(e);
        }, 0)
      );
      const removeEventListener = () => {
        eventTypes.forEach(
          (type) => document.removeEventListener(
            type,
            handler,
            getEventOptions(type)
          )
        );
        if (detectIFrame) window.removeEventListener("blur", blurHandler);
      };
      if (disabled) {
        removeEventListener();
        return;
      }
      eventTypes.forEach(
        (type) => document.addEventListener(type, handler, getEventOptions(type))
      );
      if (detectIFrame) window.addEventListener("blur", blurHandler);
      return () => removeEventListener();
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      refsState,
      ignoreClass,
      excludeScrollbar,
      disabled,
      detectIFrame,
      // eslint-disable-next-line react-hooks/exhaustive-deps
      JSON.stringify(eventTypes)
    ]
  );
  return ref;
};

// src/useStableFn.ts
import React12 from "react";
var useStableFn = (fn, deps = []) => {
  const fnRef = React12.useRef(fn);
  fnRef.current = fn;
  return React12.useCallback((...args) => fnRef.current(...args), deps);
};

// src/useStableMemo.ts
import React13 from "react";
var useStableMemo = (producer, deps) => {
  const [value, setValue] = React13.useState(producer);
  React13.useLayoutEffect(() => {
    setValue(producer);
  }, deps);
  return value;
};

// src/withProviders.tsx
import React14 from "react";
var withProviders = (...providers) => (WrappedComponent) => (props) => providers.reduceRight(
  (acc, prov) => {
    let Provider = prov;
    if (Array.isArray(prov)) {
      [Provider] = prov;
      return /* @__PURE__ */ React14.createElement(Provider, { ...prov[1] }, acc);
    }
    return /* @__PURE__ */ React14.createElement(Provider, null, acc);
  },
  /* @__PURE__ */ React14.createElement(WrappedComponent, { ...props })
);

// src/withRef.tsx
import React15 from "react";
function withRef(renderFunction) {
  return React15.forwardRef(renderFunction);
}
export {
  Box,
  CAN_USE_DOM,
  DEFAULT_IGNORE_CLASS,
  MemoizedChildren,
  PortalBody,
  Text,
  composeEventHandlers,
  composeRefs,
  createPrimitiveComponent,
  createPrimitiveElement,
  createSlotComponent,
  useComposedRef,
  useEffectOnce,
  useIsomorphicLayoutEffect,
  useMemoOnce,
  useMemoizedSelector,
  useOnClickOutside,
  useStableFn,
  useStableMemo,
  withProviders,
  withRef
};
//# sourceMappingURL=index.mjs.map