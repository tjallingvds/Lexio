{"version":3,"sources":["../src/internal/HotkeysProvider.tsx","../src/internal/BoundHotkeysProxyProvider.tsx","../src/internal/deepEqual.ts","../src/internal/parseHotkeys.ts","../src/internal/isHotkeyPressed.ts","../src/internal/key.ts","../src/internal/useRecordHotkeys.ts","../src/internal/useHotkeys.ts","../src/internal/useDeepEqualMemo.ts","../src/internal/validators.ts"],"sourcesContent":["import React, {\n  type ReactNode,\n  createContext,\n  useCallback,\n  useContext,\n  useState,\n} from 'react';\n\nimport type { Hotkey } from './types';\n\nimport BoundHotkeysProxyProviderProvider from './BoundHotkeysProxyProvider';\nimport deepEqual from './deepEqual';\n\nexport type HotkeysContextType = {\n  activeScopes: string[];\n  disableScope: (scope: string) => void;\n  enableScope: (scope: string) => void;\n  hotkeys: readonly Hotkey[];\n  toggleScope: (scope: string) => void;\n};\n\n// The context is only needed for special features like global scoping, so we use a graceful default fallback\nconst HotkeysContext = createContext<HotkeysContextType>({\n  activeScopes: [], // This array has to be empty instead of containing '*' as default, to check if the provider is set or not\n  disableScope: () => {},\n  enableScope: () => {},\n  hotkeys: [],\n  toggleScope: () => {},\n});\n\nexport const useHotkeysContext = () => {\n  return useContext(HotkeysContext);\n};\n\ninterface Props {\n  children: ReactNode;\n  initiallyActiveScopes?: string[];\n}\n\nexport const HotkeysProvider = ({\n  children,\n  initiallyActiveScopes = ['*'],\n}: Props) => {\n  const [internalActiveScopes, setInternalActiveScopes] = useState(\n    initiallyActiveScopes\n  );\n  const [boundHotkeys, setBoundHotkeys] = useState<Hotkey[]>([]);\n\n  const enableScope = useCallback((scope: string) => {\n    setInternalActiveScopes((prev) => {\n      if (prev.includes('*')) {\n        return [scope];\n      }\n\n      return Array.from(new Set([...prev, scope]));\n    });\n  }, []);\n\n  const disableScope = useCallback((scope: string) => {\n    setInternalActiveScopes((prev) => {\n      return prev.filter((s) => s !== scope);\n    });\n  }, []);\n\n  const toggleScope = useCallback((scope: string) => {\n    setInternalActiveScopes((prev) => {\n      if (prev.includes(scope)) {\n        return prev.filter((s) => s !== scope);\n      } else {\n        if (prev.includes('*')) {\n          return [scope];\n        }\n\n        return Array.from(new Set([...prev, scope]));\n      }\n    });\n  }, []);\n\n  const addBoundHotkey = useCallback((hotkey: Hotkey) => {\n    setBoundHotkeys((prev) => [...prev, hotkey]);\n  }, []);\n\n  const removeBoundHotkey = useCallback((hotkey: Hotkey) => {\n    setBoundHotkeys((prev) => prev.filter((h) => !deepEqual(h, hotkey)));\n  }, []);\n\n  return (\n    <HotkeysContext.Provider\n      value={{\n        activeScopes: internalActiveScopes,\n        disableScope,\n        enableScope,\n        hotkeys: boundHotkeys,\n        toggleScope,\n      }}\n    >\n      <BoundHotkeysProxyProviderProvider\n        addHotkey={addBoundHotkey}\n        removeHotkey={removeBoundHotkey}\n      >\n        {children}\n      </BoundHotkeysProxyProviderProvider>\n    </HotkeysContext.Provider>\n  );\n};\n","import React, { type ReactNode, createContext, useContext } from 'react';\n\nimport type { Hotkey } from './types';\n\ntype BoundHotkeysProxyProviderType = {\n  addHotkey: (hotkey: Hotkey) => void;\n  removeHotkey: (hotkey: Hotkey) => void;\n};\n\nconst BoundHotkeysProxyProvider = createContext<\n  BoundHotkeysProxyProviderType | undefined\n>(undefined);\n\nexport const useBoundHotkeysProxy = () => {\n  return useContext(BoundHotkeysProxyProvider);\n};\n\ninterface Props {\n  addHotkey: (hotkey: Hotkey) => void;\n  children: ReactNode;\n  removeHotkey: (hotkey: Hotkey) => void;\n}\n\nexport default function BoundHotkeysProxyProviderProvider({\n  addHotkey,\n  children,\n  removeHotkey,\n}: Props) {\n  return (\n    <BoundHotkeysProxyProvider.Provider value={{ addHotkey, removeHotkey }}>\n      {children}\n    </BoundHotkeysProxyProvider.Provider>\n  );\n}\n","export default function deepEqual(x: any, y: any): boolean {\n  return x && y && typeof x === 'object' && typeof y === 'object'\n    ? Object.keys(x).length === Object.keys(y).length &&\n        Object.keys(x).reduce(\n          (isEqual, key) => isEqual && deepEqual(x[key], y[key]),\n          true\n        )\n    : x === y;\n}\n","import type { Hotkey, KeyboardModifiers } from './types';\n\nconst reservedModifierKeywords = new Set([\n  'shift',\n  'alt',\n  'meta',\n  'mod',\n  'ctrl',\n  'control',\n]);\n\nconst mappedKeys: Record<string, string> = {\n  AltLeft: 'alt',\n  AltRight: 'alt',\n  ControlLeft: 'ctrl',\n  ControlRight: 'ctrl',\n  MetaLeft: 'meta',\n  MetaRight: 'meta',\n  OSLeft: 'meta',\n  OSRight: 'meta',\n  ShiftLeft: 'shift',\n  ShiftRight: 'shift',\n  down: 'arrowdown',\n  esc: 'escape',\n  left: 'arrowleft',\n  return: 'enter',\n  right: 'arrowright',\n  up: 'arrowup',\n};\n\nexport function mapKey(key: string): string {\n  return (mappedKeys[key.trim()] || key.trim())\n    .toLowerCase()\n    .replace(/key|digit|numpad/, '');\n}\n\nexport function isHotkeyModifier(key: string) {\n  return reservedModifierKeywords.has(key);\n}\n\nexport function parseKeysHookInput(keys: string, delimiter = ','): string[] {\n  return keys.toLowerCase().split(delimiter);\n}\n\nexport function parseHotkey(\n  hotkey: string,\n  splitKey = '+',\n  useKey = false,\n  description?: string\n): Hotkey {\n  const keys = hotkey\n    .toLocaleLowerCase()\n    .split(splitKey)\n    .map((k) => mapKey(k));\n\n  const modifiers: KeyboardModifiers = {\n    alt: keys.includes('alt'),\n    ctrl: keys.includes('ctrl') || keys.includes('control'),\n    meta: keys.includes('meta'),\n    mod: keys.includes('mod'),\n    shift: keys.includes('shift'),\n    useKey,\n  };\n\n  const singleCharKeys = keys.filter((k) => !reservedModifierKeywords.has(k));\n\n  return {\n    ...modifiers,\n    description,\n    keys: singleCharKeys,\n  };\n}\n","import { isHotkeyModifier, mapKey } from './parseHotkeys';\n(() => {\n  if (typeof document !== 'undefined') {\n    document.addEventListener('keydown', (e) => {\n      if (e.code === undefined) {\n        // Synthetic event (e.g., Chrome autofill). Ignore.\n        return;\n      }\n\n      pushToCurrentlyPressedKeys([mapKey(e.code)]);\n    });\n\n    document.addEventListener('keyup', (e) => {\n      if (e.code === undefined) {\n        // Synthetic event (e.g., Chrome autofill). Ignore.\n        return;\n      }\n\n      removeFromCurrentlyPressedKeys([mapKey(e.code)]);\n    });\n  }\n  if (typeof window !== 'undefined') {\n    window.addEventListener('blur', () => {\n      currentlyPressedKeys.clear();\n    });\n  }\n})();\n\nconst currentlyPressedKeys: Set<string> = new Set<string>();\n\n// https://github.com/microsoft/TypeScript/issues/17002\nexport function isReadonlyArray(value: unknown): value is readonly unknown[] {\n  return Array.isArray(value);\n}\n\nexport function isHotkeyPressed(\n  key: readonly string[] | string,\n  delimiter = ','\n): boolean {\n  const hotkeyArray = isReadonlyArray(key) ? key : key.split(delimiter);\n\n  return hotkeyArray.every((hotkey) =>\n    currentlyPressedKeys.has(hotkey.trim().toLowerCase())\n  );\n}\n\nexport function pushToCurrentlyPressedKeys(key: string | string[]): void {\n  const hotkeyArray = Array.isArray(key) ? key : [key];\n\n  /*\n  Due to a weird behavior on macOS we need to clear the set if the user pressed down the meta key and presses another key.\n  https://stackoverflow.com/questions/11818637/why-does-javascript-drop-keyup-events-when-the-metakey-is-pressed-on-mac-browser\n  Otherwise the set will hold all ever pressed keys while the meta key is down which leads to wrong results.\n   */\n  if (currentlyPressedKeys.has('meta')) {\n    currentlyPressedKeys.forEach(\n      (key) =>\n        !isHotkeyModifier(key) && currentlyPressedKeys.delete(key.toLowerCase())\n    );\n  }\n\n  hotkeyArray.forEach((hotkey) =>\n    currentlyPressedKeys.add(hotkey.toLowerCase())\n  );\n}\n\nexport function removeFromCurrentlyPressedKeys(key: string | string[]): void {\n  const hotkeyArray = Array.isArray(key) ? key : [key];\n\n  /*\n  Due to a weird behavior on macOS we need to clear the set if the user pressed down the meta key and presses another key.\n  https://stackoverflow.com/questions/11818637/why-does-javascript-drop-keyup-events-when-the-metakey-is-pressed-on-mac-browser\n  Otherwise the set will hold all ever pressed keys while the meta key is down which leads to wrong results.\n   */\n  if (key === 'meta') {\n    currentlyPressedKeys.clear();\n  } else {\n    hotkeyArray.forEach((hotkey) =>\n      currentlyPressedKeys.delete(hotkey.toLowerCase())\n    );\n  }\n}\n","/**\n * A const enum that includes all non-printable string values one can expect\n * from $event.key. For example, this enum includes values like \"CapsLock\",\n * \"Backspace\", and \"AudioVolumeMute\", but does not include values like \"a\",\n * \"A\", \"#\", \"é\", or \"¿\". Auto generated from MDN:\n * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values#Speech_recognition_keys\n */\nexport const Key = {\n  /** Changes the input mode on an external audio/video receiver (AVR) unit. */\n  AVRInput: 'AVRInput',\n\n  /** Toggles the power on an external AVR unit. */\n  AVRPower: 'AVRPower',\n\n  /**\n   * The Accept, Commit, or OK key or button. Accepts the currently selected\n   * option or input method sequence conversion.\n   */\n  Accept: 'Accept',\n\n  /** The numeric keypad's addition key, +. */\n  Add: 'Add',\n\n  /** The Again key. Redoes or repeats a previous action. */\n  Again: 'Again',\n\n  /**\n   * The All Candidates key, which starts multi-candidate mode, in which\n   * multiple candidates are displayed for the ongoing input.\n   */\n  AllCandidates: 'AllCandidates',\n\n  /** The Alphanumeric key. */\n  Alphanumeric: 'Alphanumeric',\n\n  /**\n   * The Alt (Alternative) key. This is the Option ⌥ key on Mac, or the Alt key\n   * on Windows.\n   */\n  Alt: 'Alt',\n\n  /**\n   * The AltGr or AltGraph (Alternate Graphics) key. Enables the ISO Level 3\n   * shift modifier (where Shift is the level 2 modifier).\n   */\n  AltGraph: 'AltGraph',\n\n  /**\n   * Presents a list of recently-used applications which lets the user change\n   * apps quickly.\n   */\n  AppSwitch: 'AppSwitch',\n\n  /** The down arrow key. */\n  ArrowDown: 'ArrowDown',\n\n  /** The left arrow key. */\n  ArrowLeft: 'ArrowLeft',\n\n  /** The right arrow key. */\n  ArrowRight: 'ArrowRight',\n\n  /** The up arrow key. */\n  ArrowUp: 'ArrowUp',\n\n  /** The Attn (Attention) key. */\n  Attn: 'Attn',\n\n  /** Adjusts audio balance toward the left. */\n  AudioBalanceLeft: 'AudioBalanceLeft',\n\n  /** Adjusts audio balance twoard the right. */\n  AudioBalanceRight: 'AudioBalanceRight',\n\n  /**\n   * Reduces bass boosting or cycles downward through bass boost modes or\n   * states.\n   */\n  AudioBassBoostDown: 'AudioBassBoostDown',\n\n  /** Toggles bass boosting on and off. */\n  AudioBassBoostToggle: 'AudioBassBoostToggle',\n\n  /**\n   * Increases the amoung of bass boosting, or cycles upward through a set of\n   * bass boost modes or states.\n   */\n  AudioBassBoostUp: 'AudioBassBoostUp',\n\n  /** Decreases the amount of bass. */\n  AudioBassDown: 'AudioBassDown',\n\n  /** Increases the amount of bass. */\n  AudioBassUp: 'AudioBassUp',\n\n  /** Adjusts the audio fader toward the front. */\n  AudioFaderFront: 'AudioFaderFront',\n\n  /** Adjustts the audio fader toward the rear. */\n  AudioFaderRear: 'AudioFaderRear',\n\n  /** Selects the next available surround sound mode. */\n  AudioSurroundModeNext: 'AudioSurroundModeNext',\n\n  /** Decreases the amount of treble. */\n  AudioTrebleDown: 'AudioTrebleDown',\n\n  /** Increases the amount of treble. */\n  AudioTrebleUp: 'AudioTrebleUp',\n\n  /** Decreases the audio volume. */\n  AudioVolumeDown: 'AudioVolumeDown',\n\n  /** Mutes the audio. */\n  AudioVolumeMute: 'AudioVolumeMute',\n\n  /** Increases the audio volume. */\n  AudioVolumeUp: 'AudioVolumeUp',\n\n  /** The Backspace key. This key is labeled Delete on Mac keyboards. */\n  Backspace: 'Backspace',\n\n  /**\n   * The Brightness Down key. Typically used to reduce the brightness of the\n   * display.\n   */\n  BrightnessDown: 'BrightnessDown',\n\n  /** The Brightness Up key. Typically increases the brightness of the display. */\n  BrightnessUp: 'BrightnessUp',\n\n  /**\n   * Navigates to the previous content or page in the current Web view's\n   * history.\n   */\n  BrowserBack: 'BrowserBack',\n\n  /** Opens the user's list of bookmarks/favorites. */\n  BrowserFavorites: 'BrowserFavorites',\n\n  /** Navigates to the next content or page in the current Web view's history. */\n  BrowserForward: 'BrowserForward',\n\n  /** Navigates to the user's preferred home page. */\n  BrowserHome: 'BrowserHome',\n\n  /** Refreshes the current page or contentl. */\n  BrowserRefresh: 'BrowserRefresh',\n\n  /**\n   * Activates the user's preferred search engine or the search interface within\n   * their browser.\n   */\n  BrowserSearch: 'BrowserSearch',\n\n  /** Stops loading the currently displayed Web view or content. */\n  BrowserStop: 'BrowserStop',\n\n  /** The Call key; dials the number which has been entered. */\n  Call: 'Call',\n\n  /** The Camera key; activates the camera. */\n  Camera: 'Camera',\n\n  /** The Focus key; focuses the camera. */\n  CameraFocus: 'CameraFocus',\n\n  /** The Cancel key. */\n  Cancel: 'Cancel',\n\n  /**\n   * The Caps Lock key. Toggles the capital character lock on and off for\n   * subsequent input.\n   */\n  CapsLock: 'CapsLock',\n\n  /** Switches to the previous channel. */\n  ChannelDown: 'ChannelDown',\n\n  /** Switches to the next channel. */\n  ChannelUp: 'ChannelUp',\n\n  /** The Clear key. Removes the currently selected input. */\n  Clear: 'Clear',\n\n  /** Closes the current document or message. Must not exit the application. */\n  Close: 'Close',\n\n  /** Toggles closed captioning on and off. */\n  ClosedCaptionToggle: 'ClosedCaptionToggle',\n\n  /**\n   * The Code Input key, which enables code input mode, which lets the user\n   * enter characters by typing their code points (their Unicode character\n   * numbers, typically).\n   */\n  CodeInput: 'CodeInput',\n\n  /**\n   * General-purpose media function key, color-coded red; this has index 0 among\n   * the colored keys.\n   */\n  ColorF0Red: 'ColorF0Red',\n\n  /**\n   * General-purpose media funciton key, color-coded green; this has index 1\n   * among the colored keys.\n   */\n  ColorF1Green: 'ColorF1Green',\n\n  /**\n   * General-purpose media funciton key, color-coded yellow; this has index 2\n   * among the colored keys.\n   */\n  ColorF2Yellow: 'ColorF2Yellow',\n\n  /**\n   * General-purpose media funciton key, color-coded blue; this has index 3\n   * among the colored keys.\n   */\n  ColorF3Blue: 'ColorF3Blue',\n\n  /**\n   * General-purpose media funciton key, color-coded grey; this has index 4\n   * among the colored keys.\n   */\n  ColorF4Grey: 'ColorF4Grey',\n\n  /**\n   * General-purpose media funciton key, color-coded brown; this has index 5\n   * among the colored keys.\n   */\n  ColorF5Brown: 'ColorF5Brown',\n\n  /** The Compose key. */\n  Compose: 'Compose',\n\n  /**\n   * Shows the context menu. Typically found between the Windows (or OS) key and\n   * the Control key on the right side of the keyboard.\n   */\n  ContextMenu: 'ContextMenu',\n\n  /** The Control, Ctrl, or Ctl key. Allows typing control characters. */\n  Control: 'Control',\n\n  /**\n   * The Convert key, which instructs the IME to convert the current input\n   * method sequence into the resulting character.\n   */\n  Convert: 'Convert',\n\n  /** The Copy key (on certain extended keyboards). */\n  Copy: 'Copy',\n\n  /** The Cursor Select key, CrSel. */\n  CrSel: 'CrSel',\n\n  /** The Cut key (on certain extended keyboards). */\n  Cut: 'Cut',\n\n  /** Switches the input source to the Digital Video Recorder (DVR). */\n  DVR: 'DVR',\n\n  /**\n   * A dead \"combining\" key; that is, a key which is used in tandem with other\n   * keys to generate accented and other modified characters. If pressed by\n   * itself, it doesn't generate a character. If you wish to identify which\n   * specific dead key was pressed (in cases where more than one exists), you\n   * can do so by examining the KeyboardEvent's associated compositionupdate\n   * event's data property.\n   */\n  Dead: 'Dead',\n\n  /**\n   * The decimal point key (typically . or , depending on the region. In newer\n   * browsers, this value to simply be the character generated by the decimal\n   * key (one of those two characters). [1]\n   */\n  Decimal: 'Decimal',\n\n  /** The Delete key, Del. */\n  Delete: 'Delete',\n\n  /**\n   * Adjusts the brightness of the device by toggling between two brightness\n   * levels or by cycling among multiple brightness levels.\n   */\n  Dimmer: 'Dimmer',\n\n  /** Cycles among video sources. */\n  DisplaySwap: 'DisplaySwap',\n\n  /** The numeric keypad's division key, /. */\n  Divide: 'Divide',\n\n  /**\n   * The Eisu key. This key's purpose is defined by the IME, but may be used to\n   * close the IME.\n   */\n  Eisu: 'Eisu',\n\n  /**\n   * The Eject key. Ejects removable media (or toggles an optical storage device\n   * tray open and closed).\n   */\n  Eject: 'Eject',\n\n  /** The End key. Moves to the end of content. */\n  End: 'End',\n\n  /** The End Call or Hang Up button. */\n  EndCall: 'EndCall',\n\n  /** The Enter or ↵ key (sometimes labeled Return). */\n  Enter: 'Enter',\n\n  /**\n   * Erase to End of Field. Deletes all characters from the current cursor\n   * position to the end of the current field.\n   */\n  EraseEof: 'EraseEof',\n\n  /**\n   * The Esc (Escape) key. Typically used as an exit, cancel, or \"escape this\n   * operation\" button. Historically, the Escape character was used to signal\n   * the start of a special control sequence of characters called an \"escape\n   * sequence.\"\n   */\n  Escape: 'Escape',\n\n  /** The ExSel (Extend Selection) key. */\n  ExSel: 'ExSel',\n\n  /** The Execute key. */\n  Execute: 'Execute',\n\n  /** The Exit button, which exits the curreent application or menu. */\n  Exit: 'Exit',\n\n  /** The first general-purpose function key, F1. */\n  F1: 'F1',\n\n  /** The F2 key. */\n  F2: 'F2',\n\n  /** The F3 key. */\n  F3: 'F3',\n\n  /** The F4 key. */\n  F4: 'F4',\n\n  /** The F5 key. */\n  F5: 'F5',\n\n  /** The F6 key. */\n  F6: 'F6',\n\n  /** The F7 key. */\n  F7: 'F7',\n\n  /** The F8 key. */\n  F8: 'F8',\n\n  /** The F9 key. */\n  F9: 'F9',\n\n  /** The F10 key. */\n  F10: 'F10',\n\n  /** The F11 key. */\n  F11: 'F11',\n\n  /** The F12 key. */\n  F12: 'F12',\n\n  /** The F13 key. */\n  F13: 'F13',\n\n  /** The F14 key. */\n  F14: 'F14',\n\n  /** The F15 key. */\n  F15: 'F15',\n\n  /** The F16 key. */\n  F16: 'F16',\n\n  /** The F17 key. */\n  F17: 'F17',\n\n  /** The F18 key. */\n  F18: 'F18',\n\n  /** The F19 key. */\n  F19: 'F19',\n\n  /** The F20 key. */\n  F20: 'F20',\n\n  /** Clears the program or content stored in the first favorites list slot. */\n  FavoriteClear0: 'FavoriteClear0',\n\n  /** Clears the program or content stored in the second favorites list slot. */\n  FavoriteClear1: 'FavoriteClear1',\n\n  /** Clears the program or content stored in the third favorites list slot. */\n  FavoriteClear2: 'FavoriteClear2',\n\n  /** Clears the program or content stored in the fourth favorites list slot. */\n  FavoriteClear3: 'FavoriteClear3',\n\n  /**\n   * Selects (recalls) the program or content stored in the first favorites list\n   * slot.\n   */\n  FavoriteRecall0: 'FavoriteRecall0',\n\n  /**\n   * Selects (recalls) the program or content stored in the second favorites\n   * list slot.\n   */\n  FavoriteRecall1: 'FavoriteRecall1',\n\n  /**\n   * Selects (recalls) the program or content stored in the third favorites list\n   * slot.\n   */\n  FavoriteRecall2: 'FavoriteRecall2',\n\n  /**\n   * Selects (recalls) the program or content stored in the fourth favorites\n   * list slot.\n   */\n  FavoriteRecall3: 'FavoriteRecall3',\n\n  /** Stores the current program or content into the first favorites list slot. */\n  FavoriteStore0: 'FavoriteStore0',\n\n  /** Stores the current program or content into the second favorites list slot. */\n  FavoriteStore1: 'FavoriteStore1',\n\n  /** Stores the current program or content into the third favorites list slot. */\n  FavoriteStore2: 'FavoriteStore2',\n\n  /** Stores the current program or content into the fourth favorites list slot. */\n  FavoriteStore3: 'FavoriteStore3',\n\n  /**\n   * The Final (Final Mode) key is used on some Asian keyboards to enter final\n   * mode when using IMEs.\n   */\n  FinalMode: 'FinalMode',\n\n  /**\n   * The Find key. Opens an interface (typically a dialog box) for performing a\n   * find/search operation.\n   */\n  Find: 'Find',\n\n  /** The Finish key. */\n  Finish: 'Finish',\n\n  /**\n   * The Fn (Function modifier) key. Used to allow generating function key\n   * (F1-F15, for instance) characters on keyboards without a dedicated function\n   * key area. Often handled in hardware so that events aren't generated for\n   * this key.\n   */\n  Fn: 'Fn',\n\n  /**\n   * The FnLock or F-Lock (Function Lock) key.Toggles the function key mode\n   * described by \"Fn\" on and off. Often handled in hardware so that events\n   * aren't generated for this key.\n   */\n  FnLock: 'FnLock',\n\n  /** The Back button. */\n  GoBack: 'GoBack',\n\n  /**\n   * The Home button, which takes the user to the phone's main screen (usually\n   * an application launcher).\n   */\n  GoHome: 'GoHome',\n\n  /**\n   * Switches to the first character group on an ISO/IEC 9995 keyboard. Each key\n   * may have multiple groups of characters, each in its own column. Pressing\n   * this key instructs the device to interpret keypresses as coming from the\n   * first column on subsequent keystrokes.\n   */\n  GroupFirst: 'GroupFirst',\n\n  /** Switches to the last character group on an ISO/IEC 9995 keyboard. */\n  GroupLast: 'GroupLast',\n\n  /** Switches to the next character group on an ISO/IEC 9995 keyboard. */\n  GroupNext: 'GroupNext',\n\n  /** Switches to the previous character group on an ISO/IEC 9995 keyboard. */\n  GroupPrevious: 'GroupPrevious',\n\n  /** Toggles the display of the program or content guide. */\n  Guide: 'Guide',\n\n  /**\n   * If the guide is currently displayed, this button tells the guide to display\n   * the next day's content.\n   */\n  GuideNextDay: 'GuideNextDay',\n\n  /**\n   * If the guide is currently displayed, this button tells the guide to display\n   * the previous day's content.\n   */\n  GuidePreviousDay: 'GuidePreviousDay',\n\n  /**\n   * The Hangul (Korean character set) mode key, which toggles between Hangul\n   * and English entry modes.\n   */\n  HangulMode: 'HangulMode',\n\n  /**\n   * Selects the Hanja mode, for converting Hangul characters to the more\n   * specific Hanja characters.\n   */\n  HanjaMode: 'HanjaMode',\n\n  /** The Hankaku (half-width characters) key. */\n  Hankaku: 'Hankaku',\n\n  /**\n   * The Headset Hook key. This is typically actually a button on the headset\n   * which is used to hang up calls and play or pause media.\n   */\n  HeadsetHook: 'HeadsetHook',\n\n  /** The Help key. Opens or toggles the display of help information. */\n  Help: 'Help',\n\n  /**\n   * The Hibernate key. This saves the state of the computer to disk and then\n   * shuts down; the computer can be returned to its previous state by restoring\n   * the saved state information.\n   */\n  Hibernate: 'Hibernate',\n\n  /** The Hiragana key; selects Kana characters mode. */\n  Hiragana: 'Hiragana',\n\n  /** Toggles between the Hiragana and Katakana writing systems. */\n  HiraganaKatakana: 'HiraganaKatakana',\n\n  /** The Home key. Moves to the start of content. */\n  Home: 'Home',\n\n  /** The Hyper key. */\n  Hyper: 'Hyper',\n\n  /**\n   * Toggles the display of information about the currently selected content,\n   * program, or media.\n   */\n  Info: 'Info',\n\n  /** The Insert key, Ins. Toggles between inserting and overwriting text. */\n  Insert: 'Insert',\n\n  /**\n   * Tellls the device to perform an instant replay (typically some form of\n   * jumping back a short amount of time then playing it again, possibly but not\n   * usually in slow motion).\n   */\n  InstantReplay: 'InstantReplay',\n\n  /**\n   * Selects the Junja mode, in which Korean is represented using single-byte\n   * Latin characters.\n   */\n  JunjaMode: 'JunjaMode',\n\n  /** The Kana Mode (Kana Lock) key. */\n  KanaMode: 'KanaMode',\n\n  /**\n   * The Kanji Mode key. Enables entering Japanese text using the ideographic\n   * characters of Chinese origin.\n   */\n  KanjiMode: 'KanjiMode',\n\n  /** The Katakana key. */\n  Katakana: 'Katakana',\n\n  /** The 11 key found on certain media numeric keypads. */\n  Key11: 'Key11',\n\n  /** The 12 key found on certain media numeric keypads. */\n  Key12: 'Key12',\n\n  /** The Redial button, which redials the last-called number. */\n  LastNumberRedial: 'LastNumberRedial',\n\n  /** The first generic application launcher button. */\n  LaunchApplication1: 'LaunchApplication1',\n\n  /** The second generic application launcher button. */\n  LaunchApplication2: 'LaunchApplication2',\n\n  /** The third generic application launcher button. */\n  LaunchApplication3: 'LaunchApplication3',\n\n  /** The fourth generic application launcher button. */\n  LaunchApplication4: 'LaunchApplication4',\n\n  /** The fifth generic application launcher button. */\n  LaunchApplication5: 'LaunchApplication5',\n\n  /** The sixth generic application launcher button. */\n  LaunchApplication6: 'LaunchApplication6',\n\n  /** The seventh generic application launcher button. */\n  LaunchApplication7: 'LaunchApplication7',\n\n  /** The eighth generic application launcher button. */\n  LaunchApplication8: 'LaunchApplication8',\n\n  /** The ninth generic application launcher button. */\n  LaunchApplication9: 'LaunchApplication9',\n\n  /** The 10th generic application launcher button. */\n  LaunchApplication10: 'LaunchApplication10',\n\n  /** The 11th generic application launcher button. */\n  LaunchApplication11: 'LaunchApplication11',\n\n  /** The 12th generic application launcher button. */\n  LaunchApplication12: 'LaunchApplication12',\n\n  /** The 13th generic application launcher button. */\n  LaunchApplication13: 'LaunchApplication13',\n\n  /** The 14th generic application launcher button. */\n  LaunchApplication14: 'LaunchApplication14',\n\n  /** The 15th generic application launcher button. */\n  LaunchApplication15: 'LaunchApplication15',\n\n  /** The 16th generic application launcher button. */\n  LaunchApplication16: 'LaunchApplication16',\n\n  /**\n   * The Calculator key, often labeled with an icon such as . This is often used\n   * as a generic application launcher key (APPCOMMAND_LAUNCH_APP2).\n   */\n  LaunchCalculator: 'LaunchCalculator',\n\n  /** The Calendar key, often labeled with an icon like . */\n  LaunchCalendar: 'LaunchCalendar',\n\n  /** The Contacts key. */\n  LaunchContacts: 'LaunchContacts',\n\n  /** The Mail key. This is often displayed as . */\n  LaunchMail: 'LaunchMail',\n\n  /** The Media Player key. */\n  LaunchMediaPlayer: 'LaunchMediaPlayer',\n\n  /** The Music Player key, often labeled with an icon such as . */\n  LaunchMusicPlayer: 'LaunchMusicPlayer',\n\n  /**\n   * The My Computer key on Windows keyboards. This is often used as a generic\n   * application launcher key (APPCOMMAND_LAUNCH_APP1).\n   */\n  LaunchMyComputer: 'LaunchMyComputer',\n\n  /** The Phone key, to open the phone dialer application if one is present. */\n  LaunchPhone: 'LaunchPhone',\n\n  /** The Screen Saver key. */\n  LaunchScreenSaver: 'LaunchScreenSaver',\n\n  /**\n   * The Spreadsheet key. This key may be labeled with an icon such as or that\n   * of a specific spreadsheet application.\n   */\n  LaunchSpreadsheet: 'LaunchSpreadsheet',\n\n  /**\n   * The Web Browser key. This key is frequently labeled with an icon such as or\n   * the icon of a specific browser, depending on the device manufacturer.\n   */\n  LaunchWebBrowser: 'LaunchWebBrowser',\n\n  /** The WebCam key. Opens the webcam application. */\n  LaunchWebCam: 'LaunchWebCam',\n\n  /**\n   * The Word Processor key. This may be an icon of a specific word processor\n   * application, or a generic document icon.\n   */\n  LaunchWordProcessor: 'LaunchWordProcessor',\n\n  /** Opens content liniked to the current program, if available and possible. */\n  Link: 'Link',\n\n  /** Lists the current program. */\n  ListProgram: 'ListProgram',\n\n  /** Toggles a display listing currently available live content or programs. */\n  LiveContent: 'LiveContent',\n\n  /** Locks or unlocks the currently selected content or pgoram. */\n  Lock: 'Lock',\n\n  /** The LogOff key. */\n  LogOff: 'LogOff',\n\n  /** Opens the user interface to forward a message. */\n  MailForward: 'MailForward',\n\n  /** Opens the user interface to reply to a message. */\n  MailReply: 'MailReply',\n\n  /** Sends the current message. */\n  MailSend: 'MailSend',\n\n  /**\n   * A button which cycles among the notification modes: silent, vibrate, ring,\n   * and so forth.\n   */\n  MannerMode: 'MannerMode',\n\n  /**\n   * Presents a list of media applications, such as photo viewers, audio and\n   * video players, and games. [1]\n   */\n  MediaApps: 'MediaApps',\n\n  /** The Audio Track key. */\n  MediaAudioTrack: 'MediaAudioTrack',\n\n  /** Starts, continues, or increases the speed of fast forwarding the media. */\n  MediaFastForward: 'MediaFastForward',\n\n  /** Jumps back to the last-viewed content, program, or other media. */\n  MediaLast: 'MediaLast',\n\n  /**\n   * Pauses the currently playing media. Some older applications use simply\n   * \"Pause\" but this is not correct.\n   */\n  MediaPause: 'MediaPause',\n\n  /**\n   * Starts or continues playing media at normal speed, if not already doing so.\n   * Has no effect otherwise.\n   */\n  MediaPlay: 'MediaPlay',\n\n  /** Toggles between playing and pausing the current media. */\n  MediaPlayPause: 'MediaPlayPause',\n\n  /** Starts or resumes recording media. */\n  MediaRecord: 'MediaRecord',\n\n  /** Starts, continues, or increases the speed of rewinding the media. */\n  MediaRewind: 'MediaRewind',\n\n  /** Skips backward to the previous content or program. */\n  MediaSkipBackward: 'MediaSkipBackward',\n\n  /** Skips forward to the next content or program. */\n  MediaSkipForward: 'MediaSkipForward',\n\n  /** Steps backward to the previous content or program. */\n  MediaStepBackward: 'MediaStepBackward',\n\n  /** Steps forward to the next content or program. */\n  MediaStepForward: 'MediaStepForward',\n\n  /**\n   * Stops the current media activity (such as playing, recording, pausing,\n   * forwarding, or rewinding). Has no effect if the media is currently stopped\n   * already.\n   */\n  MediaStop: 'MediaStop',\n\n  /**\n   * Top Menu button; opens the media's main menu, such as on a DVD or Blu-Ray\n   * disc.\n   */\n  MediaTopMenu: 'MediaTopMenu',\n\n  /** Seeks to the next media or program track. */\n  MediaTrackNext: 'MediaTrackNext',\n\n  /** Seeks to the previous media or program track. */\n  MediaTrackPrevious: 'MediaTrackPrevious',\n\n  /**\n   * The Meta key. Allows issuing special command inputs. This is the Windows\n   * logo key, or the Command ⌘ key on Mac.\n   */\n  Meta: 'Meta',\n\n  /** Toggles the microphone on and off. */\n  MicrophoneToggle: 'MicrophoneToggle',\n\n  /** Decreases the microphone's input volume. */\n  MicrophoneVolumeDown: 'MicrophoneVolumeDown',\n\n  /** Mutes the microphone input. */\n  MicrophoneVolumeMute: 'MicrophoneVolumeMute',\n\n  /** Increases the microphone's input volume. */\n  MicrophoneVolumeUp: 'MicrophoneVolumeUp',\n\n  /** The Mod key. This is the Command ⌘ on Mac, or the Control key on Windows. */\n  Mod: 'Mod',\n\n  /** The Mode Change key. Toggles or cycles among input modes of IMEs. */\n  ModeChange: 'ModeChange',\n\n  /** The numeric keypad's multiplication key, *. */\n  Multiply: 'Multiply',\n\n  /** Navigates into a submenu or option. */\n  NavigateIn: 'NavigateIn',\n\n  /** Navigates to the next item. */\n  NavigateNext: 'NavigateNext',\n\n  /** Navigates out of the current screen or menu. */\n  NavigateOut: 'NavigateOut',\n\n  /** Navigates to the previous item. */\n  NavigatePrevious: 'NavigatePrevious',\n\n  /** Creates a new document or message. */\n  New: 'New',\n\n  /**\n   * The Next Candidate function key. Selects the next possible match for the\n   * ongoing input.\n   */\n  NextCandidate: 'NextCandidate',\n\n  /** Cycles to the next channel in the favorites list. */\n  NextFavoriteChannel: 'NextFavoriteChannel',\n\n  /**\n   * Cycles to the next saved user profile, if this feature is supported and\n   * multiple profiles exist.\n   */\n  NextUserProfile: 'NextUserProfile',\n\n  /**\n   * The NonConvert (\"Don't convert\") key. This accepts the current input method\n   * sequence without running conversion when using an IME.\n   */\n  NonConvert: 'NonConvert',\n\n  /** The Notification key. */\n  Notification: 'Notification',\n\n  /**\n   * The NumLock (Number Lock) key. Toggles the numeric keypad between number\n   * entry some other mode (often directional arrows).\n   */\n  NumLock: 'NumLock',\n\n  /**\n   * Opens the user interface for selecting on demand content or programs to\n   * watch.\n   */\n  OnDemand: 'OnDemand',\n\n  /** Opens an existing document or message. */\n  Open: 'Open',\n\n  /**\n   * The Page Down (or PgDn) key. Scrolls down or displays the next page of\n   * content.\n   */\n  PageDown: 'PageDown',\n\n  /**\n   * The Page Up (or PgUp) key. Scrolls up or displays the previous page of\n   * content.\n   */\n  PageUp: 'PageUp',\n\n  /** Starts the process of pairing the remote with a device to be controlled. */\n  Pairing: 'Pairing',\n\n  /** Paste from the clipboard. */\n  Paste: 'Paste',\n\n  /**\n   * The Pause key. Pauses the current application or state, if applicable. This\n   * shouldn't be confused with the \"MediaPause\" key value, which is used for\n   * media controllers, rather than to control applications and processes.\n   */\n  Pause: 'Pause',\n\n  /** A button to move the picture-in-picture view downward. */\n  PinPDown: 'PinPDown',\n\n  /** A button to control moving the picture-in-picture view. */\n  PinPMove: 'PinPMove',\n\n  /** Toggles display of th epicture-in-picture view on and off. */\n  PinPToggle: 'PinPToggle',\n\n  /** A button to move the picture-in-picture view upward. */\n  PinPUp: 'PinPUp',\n\n  /**\n   * The Play key. Resumes a previously paused application, if applicable. This\n   * shouldn't be confused with the \"MediaPlay\" key value, which is used for\n   * media controllers, rather than to control applications and processes.\n   */\n  Play: 'Play',\n\n  /** Decreases the media playback rate. */\n  PlaySpeedDown: 'PlaySpeedDown',\n\n  /** Returns the media playback rate to normal. */\n  PlaySpeedReset: 'PlaySpeedReset',\n\n  /** Increases the media playback rate. */\n  PlaySpeedUp: 'PlaySpeedUp',\n\n  /**\n   * The Power button or key, to toggle power on and off. Not all systems pass\n   * this key through to to the user agent.\n   */\n  Power: 'Power',\n\n  /** The PowerOff or PowerDown key. Shuts off the system. */\n  PowerOff: 'PowerOff',\n\n  /**\n   * The Previous Candidate key. Selects the previous possible match for the\n   * ongoing input.\n   */\n  PreviousCandidate: 'PreviousCandidate',\n\n  /** Prints the current document or message. */\n  Print: 'Print',\n\n  /**\n   * The PrintScreen or PrtScr key. Sometimes SnapShot. Captures the screen and\n   * prints it or saves it to disk.\n   */\n  PrintScreen: 'PrintScreen',\n\n  /** The Process key. Instructs the IME to process the conversion. */\n  Process: 'Process',\n\n  /** The Props (Properties) key. */\n  Props: 'Props',\n\n  /** Toggles random media (also known as \"shuffle mode\") on and off. */\n  RandomToggle: 'RandomToggle',\n\n  /**\n   * A code sent when the remote control's battery is low. This doesn't actually\n   * correspond to a physical key at all.\n   */\n  RcLowBattery: 'RcLowBattery',\n\n  /** Cycles among the available media recording speeds. */\n  RecordSpeedNext: 'RecordSpeedNext',\n\n  /** Redo the last action. */\n  Redo: 'Redo',\n\n  /**\n   * Toggles radio frequency (RF) input bypass mode on and off. RF bypass mode\n   * passes RF input directly to the RF output without any processing or\n   * filtering.\n   */\n  RfBypass: 'RfBypass',\n\n  /** The Romaji key; selects the Roman character set. */\n  Romaji: 'Romaji',\n\n  /** Cycles among input modes on an external set-top box (STB). */\n  STBInput: 'STBInput',\n\n  /** Toggles on and off an external STB. */\n  STBPower: 'STBPower',\n\n  /** Saves the current document or message. */\n  Save: 'Save',\n\n  /**\n   * Toggles the channel scan mode on and off; this is a mode which flips\n   * through channels automatically until the user stops the scan.\n   */\n  ScanChannelsToggle: 'ScanChannelsToggle',\n\n  /** Cycles through the available screen display modes. */\n  ScreenModeNext: 'ScreenModeNext',\n\n  /** The Scroll Lock key. Toggles beteen scrolling and cursor movement modes. */\n  ScrollLock: 'ScrollLock',\n\n  /** The Select key. */\n  Select: 'Select',\n\n  /**\n   * The numeric keypad's places separator character (in the United States, this\n   * is a comma, but elsewhere it is frequently a period).\n   */\n  Separator: 'Separator',\n\n  /** Toggles display of the device's settings screen on and off. */\n  Settings: 'Settings',\n\n  /**\n   * The Shift key. Modifies keystrokes to allow typing upper (or other) case\n   * letters, and to support typing punctuation and other special characters.\n   */\n  Shift: 'Shift',\n\n  /**\n   * The Single Candidate key. Enables single candidate mode (as opposed to\n   * multi-candidate mode); in this mode, only one candidate is displayed at a\n   * time.\n   */\n  SingleCandidate: 'SingleCandidate',\n\n  /** The first general-purpose virtual function key. */\n  Soft1: 'Soft1',\n\n  /** The second general-purpose virtual function key. */\n  Soft2: 'Soft2',\n\n  /** The third general-purpose virtual function key. */\n  Soft3: 'Soft3',\n\n  /** The fourth general-purpose virtual function key. */\n  Soft4: 'Soft4',\n\n  /**\n   * Presents a list of possible corrections for a word which was incorrectly\n   * identified.\n   */\n  SpeechCorrectionList: 'SpeechCorrectionList',\n\n  /**\n   * Toggles between dictation mode and command/control mode. This lets the\n   * speech engine know whether to interpret spoken words as input text or as\n   * commands.\n   */\n  SpeechInputToggle: 'SpeechInputToggle',\n\n  /** Starts spell checking the current document. */\n  SpellCheck: 'SpellCheck',\n\n  /** Toggles split screen display mode on and off. */\n  SplitScreenToggle: 'SplitScreenToggle',\n\n  /**\n   * The Standby key; also known as Suspend or Sleep. This turns off the display\n   * and puts the computer in a low power consumption mode, without completely\n   * powering off.\n   */\n  Standby: 'Standby',\n\n  /** Toggles the display of subtitles on and off if they're available. */\n  Subtitle: 'Subtitle',\n\n  /** The numeric keypad's subtraction key, -. */\n  Subtract: 'Subtract',\n\n  /** The Super key. */\n  Super: 'Super',\n\n  /** The Symbol modifier key (found on certain virtual keyboards). */\n  Symbol: 'Symbol',\n\n  /** The Symbol Lock key. */\n  SymbolLock: 'SymbolLock',\n\n  /** Switches into TV viewing mode. */\n  TV: 'TV',\n\n  /** Toggles 3D TV mode on and off. */\n  TV3DMode: 'TV3DMode',\n\n  /** Toggles between antenna and cable inputs. */\n  TVAntennaCable: 'TVAntennaCable',\n\n  /** Toggles audio description mode on and off. */\n  TVAudioDescription: 'TVAudioDescription',\n\n  /**\n   * Decreases trhe audio description's mixing volume; reduces the volume of the\n   * audio descriptions relative to the program sound.\n   */\n  TVAudioDescriptionMixDown: 'TVAudioDescriptionMixDown',\n\n  /**\n   * Increases the audio description's mixing volume; increases the volume of\n   * the audio descriptions relative to the program sound.\n   */\n  TVAudioDescriptionMixUp: 'TVAudioDescriptionMixUp',\n\n  /**\n   * Displays or hides the media contents available for playback (this may be a\n   * channel guide showing the currently airing programs, or a list of media\n   * files to play).\n   */\n  TVContentsMenu: 'TVContentsMenu',\n\n  /** Displays or hides the TV's data service menu. */\n  TVDataService: 'TVDataService',\n\n  /** Cycles the input mode on an external TV. */\n  TVInput: 'TVInput',\n\n  /** Switches to the input \"Component 1.\" */\n  TVInputComponent1: 'TVInputComponent1',\n\n  /** Switches to the input \"Component 2.\" */\n  TVInputComponent2: 'TVInputComponent2',\n\n  /** Switches to the input \"Composite 1.\" */\n  TVInputComposite1: 'TVInputComposite1',\n\n  /** Switches to the input \"Composite 2.\" */\n  TVInputComposite2: 'TVInputComposite2',\n\n  /** Switches to the input \"HDMI 1.\" */\n  TVInputHDMI1: 'TVInputHDMI1',\n\n  /** Switches to the input \"HDMI 2.\" */\n  TVInputHDMI2: 'TVInputHDMI2',\n\n  /** Switches to the input \"HDMI 3.\" */\n  TVInputHDMI3: 'TVInputHDMI3',\n\n  /** Switches to the input \"HDMI 4.\" */\n  TVInputHDMI4: 'TVInputHDMI4',\n\n  /** Switches to the input \"VGA 1.\" */\n  TVInputVGA1: 'TVInputVGA1',\n\n  /** The Media Context menu key. */\n  TVMediaContext: 'TVMediaContext',\n\n  /** Toggle the TV's network connection on and off. */\n  TVNetwork: 'TVNetwork',\n\n  /** Put the TV into number entry mode. */\n  TVNumberEntry: 'TVNumberEntry',\n\n  /** The device's power button. */\n  TVPower: 'TVPower',\n\n  /** Radio button. */\n  TVRadioService: 'TVRadioService',\n\n  /** Satellite button. */\n  TVSatellite: 'TVSatellite',\n\n  /** Broadcast Satellite button. */\n  TVSatelliteBS: 'TVSatelliteBS',\n\n  /** Communication Satellite button. */\n  TVSatelliteCS: 'TVSatelliteCS',\n\n  /** Toggles among available satellites. */\n  TVSatelliteToggle: 'TVSatelliteToggle',\n\n  /**\n   * Selects analog terrestrial television service (analog cable or antenna\n   * reception).\n   */\n  TVTerrestrialAnalog: 'TVTerrestrialAnalog',\n\n  /**\n   * Selects digital terrestrial television service (digital cable or antenna\n   * receiption).\n   */\n  TVTerrestrialDigital: 'TVTerrestrialDigital',\n\n  /** Timer programming button. */\n  TVTimer: 'TVTimer',\n\n  /** The Horizontal Tab key, Tab. */\n  Tab: 'Tab',\n\n  /** Toggles display of teletext, if available. */\n  Teletext: 'Teletext',\n\n  /** Undo the last action. */\n  Undo: 'Undo',\n\n  /**\n   * The user agent wasn't able to map the event's virtual keycode to a specific\n   * key value. This can happen due to hardware or software constraints, or\n   * because of constraints around the platform on which the user agent is\n   * running.\n   */\n  Unidentified: 'Unidentified',\n\n  /** Cycles through the available video modes. */\n  VideoModeNext: 'VideoModeNext',\n\n  /** The Voice Dial key. Initiates voice dialing. */\n  VoiceDial: 'VoiceDial',\n\n  /**\n   * The WakeUp key; used to wake the computer from the hibernation or standby\n   * modes.\n   */\n  WakeUp: 'WakeUp',\n\n  /**\n   * Causes the device to identify itself in some fashion, such as by flashing a\n   * light, briefly changing the brightness of indicator lights, or emitting a\n   * tone.\n   */\n  Wink: 'Wink',\n\n  /** The Zenkaku (full width) characters key. */\n  Zenkaku: 'Zenkaku',\n\n  /** The Zenkaku/Hankaku (full width/half width) toggle key. */\n  ZenkakuHanaku: 'ZenkakuHanaku',\n\n  /** The ZoomIn key. */\n  ZoomIn: 'ZoomIn',\n\n  /** The ZoomOut key. */\n  ZoomOut: 'ZoomOut',\n\n  /**\n   * Toggles between full-screen and scaled content display, or otherwise change\n   * the magnification level.\n   */\n  ZoomToggle: 'ZoomToggle',\n} as const;\n","import { useCallback, useState } from 'react';\n\nimport { mapKey } from './parseHotkeys';\n\nexport default function useRecordHotkeys() {\n  const [keys, setKeys] = useState(new Set<string>());\n  const [isRecording, setIsRecording] = useState(false);\n\n  const handler = useCallback((event: KeyboardEvent) => {\n    if (event.code === undefined) {\n      // Synthetic event (e.g., Chrome autofill).  Ignore.\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    setKeys((prev) => {\n      const newKeys = new Set(prev);\n\n      newKeys.add(mapKey(event.code));\n\n      return newKeys;\n    });\n  }, []);\n\n  const stop = useCallback(() => {\n    if (typeof document !== 'undefined') {\n      document.removeEventListener('keydown', handler);\n\n      setIsRecording(false);\n    }\n  }, [handler]);\n\n  const start = useCallback(() => {\n    setKeys(new Set<string>());\n\n    if (typeof document !== 'undefined') {\n      stop();\n\n      document.addEventListener('keydown', handler);\n\n      setIsRecording(true);\n    }\n  }, [handler, stop]);\n\n  const resetKeys = useCallback(() => {\n    setKeys(new Set<string>());\n  }, []);\n\n  return [keys, { isRecording, resetKeys, start, stop }] as const;\n}\n","import {\n  type DependencyList,\n  type RefCallback,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport type { Key } from './key';\nimport type {\n  HotkeyCallback,\n  Keys,\n  Options,\n  OptionsOrDependencyArray,\n  RefType,\n} from './types';\n\nimport { useBoundHotkeysProxy } from './BoundHotkeysProxyProvider';\nimport { useHotkeysContext } from './HotkeysProvider';\nimport {\n  pushToCurrentlyPressedKeys,\n  removeFromCurrentlyPressedKeys,\n} from './isHotkeyPressed';\nimport { mapKey, parseHotkey, parseKeysHookInput } from './parseHotkeys';\nimport useDeepEqualMemo from './useDeepEqualMemo';\nimport {\n  isHotkeyEnabled,\n  isHotkeyEnabledOnTag,\n  isHotkeyMatchingKeyboardEvent,\n  isKeyboardEventTriggeredByInput,\n  isScopeActive,\n  maybePreventDefault,\n} from './validators';\n\nconst stopPropagation = (e: KeyboardEvent): void => {\n  e.stopPropagation();\n  e.preventDefault();\n  e.stopImmediatePropagation();\n};\n\nconst useSafeLayoutEffect =\n  typeof window === 'undefined' ? useEffect : useLayoutEffect;\n\nexport default function useHotkeys<T extends HTMLElement>(\n  keys: Keys,\n  callback: HotkeyCallback,\n  options?: OptionsOrDependencyArray,\n  dependencies?: OptionsOrDependencyArray\n) {\n  const [ref, setRef] = useState<RefType<T>>(null);\n  const hasTriggeredRef = useRef(false);\n\n  const _options: Options | undefined = Array.isArray(options)\n    ? Array.isArray(dependencies)\n      ? undefined\n      : (dependencies as Options)\n    : (options as Options);\n\n  const _keys = useMemo(() => {\n    if (Array.isArray(keys) && keys.length > 0 && Array.isArray(keys[0])) {\n      // Handle Keys[][] case\n      return (keys as (keyof typeof Key)[][])\n        .map((keyCombo) =>\n          keyCombo.map((k) => k.toString()).join(_options?.splitKey || '+')\n        )\n        .join(_options?.delimiter || ',');\n    } else if (Array.isArray(keys)) {\n      return keys.join(_options?.delimiter || ',');\n    }\n\n    return keys as string;\n  }, [keys, _options?.splitKey, _options?.delimiter]);\n\n  const _deps: DependencyList | undefined = Array.isArray(options)\n    ? options\n    : Array.isArray(dependencies)\n      ? dependencies\n      : undefined;\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const memoisedCB = useCallback(callback, _deps ?? []);\n  const cbRef = useRef<HotkeyCallback>(memoisedCB);\n\n  cbRef.current = _deps ? memoisedCB : callback;\n\n  const memoisedOptions = useDeepEqualMemo(_options);\n\n  const { activeScopes } = useHotkeysContext();\n  const proxy = useBoundHotkeysProxy();\n\n  useSafeLayoutEffect(() => {\n    if (\n      memoisedOptions?.enabled === false ||\n      !isScopeActive(activeScopes, memoisedOptions?.scopes)\n    ) {\n      return;\n    }\n\n    const listener = (e: KeyboardEvent, isKeyUp = false) => {\n      if (\n        isKeyboardEventTriggeredByInput(e) &&\n        !isHotkeyEnabledOnTag(e, memoisedOptions?.enableOnFormTags)\n      ) {\n        return;\n      }\n      // TODO: SINCE THE EVENT IS NOW ATTACHED TO THE REF, THE ACTIVE ELEMENT CAN NEVER BE INSIDE THE REF. THE HOTKEY ONLY TRIGGERS IF THE\n      // REF IS THE ACTIVE ELEMENT. THIS IS A PROBLEM SINCE FOCUSED SUB COMPONENTS WON'T TRIGGER THE HOTKEY.\n      if (ref !== null) {\n        const rootNode = ref.getRootNode();\n\n        if (\n          (rootNode instanceof Document || rootNode instanceof ShadowRoot) &&\n          rootNode.activeElement !== ref &&\n          !ref.contains(rootNode.activeElement)\n        ) {\n          stopPropagation(e);\n\n          return;\n        }\n      }\n      if (\n        (e.target as HTMLElement)?.isContentEditable &&\n        !memoisedOptions?.enableOnContentEditable\n      ) {\n        return;\n      }\n\n      parseKeysHookInput(_keys, memoisedOptions?.delimiter).forEach((key) => {\n        const hotkey = parseHotkey(\n          key,\n          memoisedOptions?.splitKey,\n          memoisedOptions?.useKey\n        );\n\n        if (\n          isHotkeyMatchingKeyboardEvent(\n            e,\n            hotkey,\n            memoisedOptions?.ignoreModifiers\n          ) ||\n          hotkey.keys?.includes('*')\n        ) {\n          // DIFF+\n          if (\n            (memoisedOptions?.ignoreEventWhenPrevented ?? true) &&\n            e.defaultPrevented\n          ) {\n            // Skip the handler if the event's default action has been prevented\n            return;\n          }\n          if (memoisedOptions?.ignoreEventWhen?.(e)) {\n            return;\n          }\n          if (isKeyUp && hasTriggeredRef.current) {\n            return;\n          }\n          if (!isHotkeyEnabled(e, hotkey, memoisedOptions?.enabled)) {\n            stopPropagation(e);\n\n            return;\n          }\n\n          // Execute the user callback for that hotkey\n          cbRef.current(e, hotkey);\n\n          // DIFF: after callback\n          maybePreventDefault(e, hotkey, memoisedOptions?.preventDefault);\n\n          if (!isKeyUp) {\n            hasTriggeredRef.current = true;\n          }\n        }\n      });\n    };\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.code === undefined) {\n        // Synthetic event (e.g., Chrome autofill).  Ignore.\n        return;\n      }\n\n      pushToCurrentlyPressedKeys(mapKey(event.code));\n\n      if (\n        (memoisedOptions?.keydown === undefined &&\n          memoisedOptions?.keyup !== true) ||\n        memoisedOptions?.keydown\n      ) {\n        listener(event);\n      }\n    };\n\n    const handleKeyUp = (event: KeyboardEvent) => {\n      if (event.code === undefined) {\n        // Synthetic event (e.g., Chrome autofill).  Ignore.\n        return;\n      }\n\n      removeFromCurrentlyPressedKeys(mapKey(event.code));\n\n      hasTriggeredRef.current = false;\n\n      if (memoisedOptions?.keyup) {\n        listener(event, true);\n      }\n    };\n\n    const domNode = ref || _options?.document || document;\n\n    domNode.addEventListener('keyup', handleKeyUp as any);\n    domNode.addEventListener('keydown', handleKeyDown as any);\n\n    if (proxy) {\n      parseKeysHookInput(_keys, memoisedOptions?.delimiter).forEach((key) =>\n        proxy.addHotkey(\n          parseHotkey(\n            key,\n            memoisedOptions?.splitKey,\n            memoisedOptions?.useKey,\n            memoisedOptions?.description\n          )\n        )\n      );\n    }\n\n    return () => {\n      domNode.removeEventListener('keyup', handleKeyUp as any);\n      domNode.removeEventListener('keydown', handleKeyDown as any);\n\n      if (proxy) {\n        parseKeysHookInput(_keys, memoisedOptions?.delimiter).forEach((key) =>\n          proxy.removeHotkey(\n            parseHotkey(\n              key,\n              memoisedOptions?.splitKey,\n              memoisedOptions?.useKey,\n              memoisedOptions?.description\n            )\n          )\n        );\n      }\n    };\n  }, [ref, _keys, memoisedOptions, activeScopes]);\n\n  return setRef as RefCallback<T>;\n}\n","import { useRef } from 'react';\n\nimport deepEqual from './deepEqual';\n\nexport default function useDeepEqualMemo<T>(value: T) {\n  const ref = useRef<T | undefined>();\n\n  if (!deepEqual(ref.current, value)) {\n    ref.current = value;\n  }\n\n  return ref.current;\n}\n","import type { FormTags, Hotkey, Scopes, Trigger } from './types';\n\nimport { isHotkeyPressed, isReadonlyArray } from './isHotkeyPressed';\nimport { mapKey } from './parseHotkeys';\n\nexport function maybePreventDefault(\n  e: KeyboardEvent,\n  hotkey: Hotkey,\n  preventDefault?: Trigger\n): void {\n  if (\n    (typeof preventDefault === 'function' && preventDefault(e, hotkey)) ||\n    preventDefault === true\n  ) {\n    e.preventDefault();\n  }\n}\n\nexport function isHotkeyEnabled(\n  e: KeyboardEvent,\n  hotkey: Hotkey,\n  enabled?: Trigger\n): boolean {\n  if (typeof enabled === 'function') {\n    return enabled(e, hotkey);\n  }\n\n  return enabled === true || enabled === undefined;\n}\n\nexport function isKeyboardEventTriggeredByInput(ev: KeyboardEvent): boolean {\n  return isHotkeyEnabledOnTag(ev, ['input', 'textarea', 'select']);\n}\n\nexport function isHotkeyEnabledOnTag(\n  { target }: KeyboardEvent,\n  enabledOnTags: boolean | readonly FormTags[] = false\n): boolean {\n  const targetTagName = target && (target as HTMLElement).tagName;\n\n  if (isReadonlyArray(enabledOnTags)) {\n    return Boolean(\n      targetTagName &&\n        enabledOnTags?.some(\n          (tag) => tag.toLowerCase() === targetTagName.toLowerCase()\n        )\n    );\n  }\n\n  return Boolean(targetTagName && enabledOnTags && enabledOnTags);\n}\n\nexport function isScopeActive(\n  activeScopes: string[],\n  scopes?: Scopes\n): boolean {\n  if (activeScopes.length === 0 && scopes) {\n    console.warn(\n      'A hotkey has the \"scopes\" option set, however no active scopes were found. If you want to use the global scopes feature, you need to wrap your app in a <HotkeysProvider>'\n    );\n\n    return true;\n  }\n  if (!scopes) {\n    return true;\n  }\n\n  return (\n    activeScopes.some((scope) => scopes.includes(scope)) ||\n    activeScopes.includes('*')\n  );\n}\n\nexport const isHotkeyMatchingKeyboardEvent = (\n  e: KeyboardEvent,\n  hotkey: Hotkey,\n  ignoreModifiers = false\n): boolean => {\n  const { alt, ctrl, keys, meta, mod, shift, useKey } = hotkey;\n  const { altKey, code, ctrlKey, key: producedKey, metaKey, shiftKey } = e;\n\n  const mappedCode = mapKey(code);\n\n  if (useKey && keys?.length === 1 && keys.includes(producedKey)) {\n    return true;\n  }\n  if (\n    !keys?.includes(mappedCode) &&\n    !['alt', 'control', 'ctrl', 'meta', 'os', 'shift', 'unknown'].includes(\n      mappedCode\n    )\n  ) {\n    return false;\n  }\n  if (!ignoreModifiers) {\n    // We check the pressed keys for compatibility with the keyup event. In keyup events the modifier flags are not set.\n    if (alt !== altKey && mappedCode !== 'alt') {\n      return false;\n    }\n    if (shift !== shiftKey && mappedCode !== 'shift') {\n      return false;\n    }\n    // Mod is a special key name that is checking for meta on macOS and ctrl on other platforms\n    if (mod) {\n      if (!metaKey && !ctrlKey) {\n        return false;\n      }\n    } else {\n      if (meta !== metaKey && mappedCode !== 'meta' && mappedCode !== 'os') {\n        return false;\n      }\n      if (\n        ctrl !== ctrlKey &&\n        mappedCode !== 'ctrl' &&\n        mappedCode !== 'control'\n      ) {\n        return false;\n      }\n    }\n  }\n  // All modifiers are correct, now check the key\n  // If the key is set, we check for the key\n  if (keys && keys.length === 1 && keys.includes(mappedCode)) {\n    return true;\n  } else if (keys) {\n    // Check if all keys are present in pressedDownKeys set\n    return isHotkeyPressed(keys);\n  } else if (!keys) {\n    // If the key is not set, we only listen for modifiers, that check went alright, so we return true\n    return true;\n  }\n\n  // There is nothing that matches.\n  return false;\n};\n"],"mappings":"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","names":["React","createContext","useContext","createContext","useContext","React","key","useCallback","useState","useState","useCallback","useCallback","useRef","useState","useState","useRef","useCallback","_a"]}